

using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Net;
using EdFi.Ods.Common.Extensions;
using EdFi.Ods.Common;
using EdFi.Ods.Api.Models;
using EdFi.Ods.Entities.Common;
using Newtonsoft.Json;
// Aggregate: AcademicHonorCategoryType

namespace EdFi.Ods.Api.Models.Resources.V2.AcademicHonorCategoryType
{
    /// <summary>
    /// A class which represents the edfi.AcademicHonorCategoryType table of the AcademicHonorCategoryType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AcademicHonorCategoryType : IAcademicHonorCategoryType, IHasETag, IAcademicHonorCategoryTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AcademicHonorCategoryType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for AcademicHonorCategory
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="academicHonorCategoryTypeId"), NaturalKeyMember]
        public int AcademicHonorCategoryTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IAcademicHonorCategoryType).AcademicHonorCategoryTypeId != null) 
                    hash = hash * 23 + (this as IAcademicHonorCategoryType).AcademicHonorCategoryTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the AcademicHonorCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the AcademicHonorCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAcademicHonorCategoryType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAcademicHonorCategoryType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAcademicHonorCategoryTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IAcademicHonorCategoryTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IAcademicHonorCategoryTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AcademicSubjectDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.AcademicSubjectDescriptor
{
    /// <summary>
    /// A class which represents the edfi.AcademicSubjectDescriptor table of the AcademicSubjectDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AcademicSubjectDescriptor : IAcademicSubjectDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IAcademicSubjectDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AcademicSubjectDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="academicSubjectDescriptorId"), NaturalKeyMember]
        public int AcademicSubjectDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return AcademicSubjectDescriptorId; }
            set { AcademicSubjectDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IAcademicSubjectDescriptor).AcademicSubjectDescriptorId != null) 
                    hash = hash * 23 + (this as IAcademicSubjectDescriptor).AcademicSubjectDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="academicSubjectType")]
        public string AcademicSubjectType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAcademicSubjectDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAcademicSubjectDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAcademicSubjectDescriptorSynchronizationSourceSupport.IsAcademicSubjectTypeSupported  { get { return true; } set { } }
 
        bool IAcademicSubjectDescriptorSynchronizationSourceSupport.IsCodeValueSupported            { get { return true; } set { } }
 
        bool IAcademicSubjectDescriptorSynchronizationSourceSupport.IsDescriptionSupported          { get { return true; } set { } }
 
        bool IAcademicSubjectDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported   { get { return true; } set { } }
 
        bool IAcademicSubjectDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported     { get { return true; } set { } }
 
        bool IAcademicSubjectDescriptorSynchronizationSourceSupport.IsNamespaceSupported            { get { return true; } set { } }
 
        bool IAcademicSubjectDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported    { get { return true; } set { } }
 
        bool IAcademicSubjectDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported     { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AcademicSubjectType

namespace EdFi.Ods.Api.Models.Resources.V2.AcademicSubjectType
{
    /// <summary>
    /// A class which represents the edfi.AcademicSubjectType table of the AcademicSubjectType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AcademicSubjectType : IAcademicSubjectType, IHasETag, IAcademicSubjectTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AcademicSubjectType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for AcademicSubject
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="academicSubjectTypeId"), NaturalKeyMember]
        public int AcademicSubjectTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IAcademicSubjectType).AcademicSubjectTypeId != null) 
                    hash = hash * 23 + (this as IAcademicSubjectType).AcademicSubjectTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the AcademicSubject type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the AcademicSubject type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAcademicSubjectType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAcademicSubjectType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAcademicSubjectTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IAcademicSubjectTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IAcademicSubjectTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AcademicWeek

namespace EdFi.Ods.Api.Models.Resources.V2.AcademicWeek
{
    /// <summary>
    /// Represents a reference to the AcademicWeek resource.
    /// </summary>
    [DataContract]
    public class AcademicWeekReference
    {
        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="weekIdentifier"), NaturalKeyMember]
        public string WeekIdentifier { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "AcademicWeek",
                            Href = "/academicWeeks"
                                    + "?schoolId=" + SchoolId            
                                    + "&weekIdentifier=" + WebUtility.UrlEncode(WeekIdentifier)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return SchoolId != default(int)
                && WeekIdentifier != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.AcademicWeek table of the AcademicWeek aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AcademicWeek : IAcademicWeek, IHasETag, IAcademicWeekSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AcademicWeek resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _beginCalendarDateReferenceExplicitlyAssigned;
        private CalendarDate.CalendarDateReference _beginCalendarDateReference;
        private CalendarDate.CalendarDateReference ImplicitBeginCalendarDateReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_beginCalendarDateReference == null && !_beginCalendarDateReferenceExplicitlyAssigned)
                    _beginCalendarDateReference = new CalendarDate.CalendarDateReference();

                return _beginCalendarDateReference;
            }
        }

        [DataMember(Name="beginCalendarDateReference")]
        public CalendarDate.CalendarDateReference BeginCalendarDateReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitBeginCalendarDateReference != null
                    && (_beginCalendarDateReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitBeginCalendarDateReference.IsReferenceFullyDefined()))
                    return ImplicitBeginCalendarDateReference;

                return null;
            }
            set 
            { 
                _beginCalendarDateReferenceExplicitlyAssigned = true;
                _beginCalendarDateReference = value;
            }
        }
        private bool _endCalendarDateReferenceExplicitlyAssigned;
        private CalendarDate.CalendarDateReference _endCalendarDateReference;
        private CalendarDate.CalendarDateReference ImplicitEndCalendarDateReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_endCalendarDateReference == null && !_endCalendarDateReferenceExplicitlyAssigned)
                    _endCalendarDateReference = new CalendarDate.CalendarDateReference();

                return _endCalendarDateReference;
            }
        }

        [DataMember(Name="endCalendarDateReference")]
        public CalendarDate.CalendarDateReference EndCalendarDateReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEndCalendarDateReference != null
                    && (_endCalendarDateReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEndCalendarDateReference.IsReferenceFullyDefined()))
                    return ImplicitEndCalendarDateReference;

                return null;
            }
            set 
            { 
                _endCalendarDateReferenceExplicitlyAssigned = true;
                _endCalendarDateReference = value;
            }
        }
        private bool _schoolReferenceExplicitlyAssigned;
        private School.SchoolReference _schoolReference;
        private School.SchoolReference ImplicitSchoolReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolReference == null && !_schoolReferenceExplicitlyAssigned)
                    _schoolReference = new School.SchoolReference();

                return _schoolReference;
            }
        }

        [DataMember(Name="schoolReference")][NaturalKeyMember]
        public School.SchoolReference SchoolReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolReference != null
                    && (_schoolReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference;

                return null;
            }
            set 
            { 
                _schoolReferenceExplicitlyAssigned = true;
                _schoolReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IAcademicWeek.SchoolId
        {
            get
            {
                if (ImplicitBeginCalendarDateReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitBeginCalendarDateReference.IsReferenceFullyDefined()))
                    return ImplicitBeginCalendarDateReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // BeginCalendarDate
                _beginCalendarDateReferenceExplicitlyAssigned = false;
                ImplicitBeginCalendarDateReference.SchoolId = value;

                // EndCalendarDate
                _endCalendarDateReferenceExplicitlyAssigned = false;
                ImplicitEndCalendarDateReference.SchoolId = value;

                // School
                _schoolReferenceExplicitlyAssigned = false;
                ImplicitSchoolReference.SchoolId = value;
            }
        }

        /// <summary>
        /// The school label for the week.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="weekIdentifier"), NaturalKeyMember]
        public string WeekIdentifier { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IAcademicWeek).SchoolId != null) 
                    hash = hash * 23 + (this as IAcademicWeek).SchoolId.GetHashCode();
 
                // Standard Property
                if ((this as IAcademicWeek).WeekIdentifier != null) 
                    hash = hash * 23 + (this as IAcademicWeek).WeekIdentifier.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The start date for the academic week.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime IAcademicWeek.BeginDate
        {
            get
            {
                if (ImplicitBeginCalendarDateReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitBeginCalendarDateReference.IsReferenceFullyDefined()))
                    return ImplicitBeginCalendarDateReference.Date;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // BeginCalendarDate
                _beginCalendarDateReferenceExplicitlyAssigned = false;
                ImplicitBeginCalendarDateReference.Date = value;
            }
        }

        /// <summary>
        /// The end date for the academic week.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime IAcademicWeek.EndDate
        {
            get
            {
                if (ImplicitEndCalendarDateReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEndCalendarDateReference.IsReferenceFullyDefined()))
                    return ImplicitEndCalendarDateReference.Date;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EndCalendarDate
                _endCalendarDateReferenceExplicitlyAssigned = false;
                ImplicitEndCalendarDateReference.Date = value;
            }
        }

        /// <summary>
        /// The total instructional days during the academic week.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="totalInstructionalDays")]
        public int TotalInstructionalDays { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAcademicWeek)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAcademicWeek) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAcademicWeekSynchronizationSourceSupport.IsBeginDateSupported               { get { return true; } set { } }
 
        bool IAcademicWeekSynchronizationSourceSupport.IsEndDateSupported                 { get { return true; } set { } }
 
        bool IAcademicWeekSynchronizationSourceSupport.IsTotalInstructionalDaysSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AccommodationDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.AccommodationDescriptor
{
    /// <summary>
    /// A class which represents the edfi.AccommodationDescriptor table of the AccommodationDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AccommodationDescriptor : IAccommodationDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IAccommodationDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AccommodationDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="accommodationDescriptorId"), NaturalKeyMember]
        public int AccommodationDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return AccommodationDescriptorId; }
            set { AccommodationDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IAccommodationDescriptor).AccommodationDescriptorId != null) 
                    hash = hash * 23 + (this as IAccommodationDescriptor).AccommodationDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="accommodationType")]
        public string AccommodationType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAccommodationDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAccommodationDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAccommodationDescriptorSynchronizationSourceSupport.IsAccommodationTypeSupported   { get { return true; } set { } }
 
        bool IAccommodationDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
 
        bool IAccommodationDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
 
        bool IAccommodationDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
 
        bool IAccommodationDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
 
        bool IAccommodationDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
 
        bool IAccommodationDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
 
        bool IAccommodationDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AccommodationType

namespace EdFi.Ods.Api.Models.Resources.V2.AccommodationType
{
    /// <summary>
    /// A class which represents the edfi.AccommodationType table of the AccommodationType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AccommodationType : IAccommodationType, IHasETag, IAccommodationTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AccommodationType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Accommodation
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="accommodationTypeId"), NaturalKeyMember]
        public int AccommodationTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IAccommodationType).AccommodationTypeId != null) 
                    hash = hash * 23 + (this as IAccommodationType).AccommodationTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Accommodation type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Accommodation type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAccommodationType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAccommodationType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAccommodationTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IAccommodationTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IAccommodationTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: Account

namespace EdFi.Ods.Api.Models.Resources.V2.Account
{
    /// <summary>
    /// Represents a reference to the Account resource.
    /// </summary>
    [DataContract]
    public class AccountReference
    {
        [DataMember(Name="number"), NaturalKeyMember]
        public string AccountNumber { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="fiscalYear"), NaturalKeyMember]
        public int FiscalYear { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "Account",
                            Href = "/accounts"
                                    + "?number=" + WebUtility.UrlEncode(AccountNumber)            
                                    + "&educationOrganizationId=" + EducationOrganizationId            
                                    + "&fiscalYear=" + FiscalYear            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return AccountNumber != default(string)
                && EducationOrganizationId != default(int)
                && FiscalYear != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Account table of the Account aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class Account : IAccount, IHasETag, IAccountSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Account()
        {
            AccountCodes = new List<AccountCode>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Account resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The alphanumeric string that identifies the account.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="number"), NaturalKeyMember]
        public string AccountNumber { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IAccount.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The financial accounting year.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="fiscalYear"), NaturalKeyMember]
        public int FiscalYear { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IAccount).AccountNumber != null) 
                    hash = hash * 23 + (this as IAccount).AccountNumber.GetHashCode();
 
                //Referenced Property
                if ((this as IAccount).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IAccount).EducationOrganizationId.GetHashCode();
 
                // Standard Property
                if ((this as IAccount).FiscalYear != null) 
                    hash = hash * 23 + (this as IAccount).FiscalYear.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<AccountCode> _accountCodes;
        private IList<IAccountCode> _accountCodesCovariant;

        [DataMember(Name="codes")]
        public IList<AccountCode> AccountCodes 
        { 
            get { return _accountCodes; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<AccountCode>(value,
                    (s, e) => ((IAccountCode)e.Item).Account = this);
                _accountCodes = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IAccountCode, AccountCode>(value);
                covariantList.ItemAdded += (s, e) => ((IAccountCode)e.Item).Account = this;
                _accountCodesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IAccountCode> IAccount.AccountCodes
        {
            get { return _accountCodesCovariant; }
            set { AccountCodes = new List<AccountCode>(value.Cast<AccountCode>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_accountCodes != null) foreach (var item in _accountCodes)
            {
                item.Account = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAccount)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAccount) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAccountSynchronizationSourceSupport.IsAccountCodesSupported  { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IAccountCode, bool> IAccountSynchronizationSourceSupport.IsAccountCodeIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.AccountCode table of the Account aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AccountCode : IAccountCode, IAccountCodeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IAccount _account;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IAccount IAccountCode.Account
        {
            get { return _account; }
            set { _account = value; }
        }

        internal IAccount Account
        {
            set { _account = value; }
        }

        /// <summary>
        /// The set of account codes defined for the education accounting system organized by account code type (e.g., fund, function, object) that map to the account.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="descriptor"), NaturalKeyMember]
        public string AccountCodeDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_account != null) 
                    hash = hash * 23 + _account.GetHashCode();
 
                // Standard Property
                if ((this as IAccountCode).AccountCodeDescriptor != null) 
                    hash = hash * 23 + (this as IAccountCode).AccountCodeDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAccountCode)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAccountCode) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: AccountabilityRating

namespace EdFi.Ods.Api.Models.Resources.V2.AccountabilityRating
{
    /// <summary>
    /// Represents a reference to the AccountabilityRating resource.
    /// </summary>
    [DataContract]
    public class AccountabilityRatingReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="ratingTitle"), NaturalKeyMember]
        public string RatingTitle { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "AccountabilityRating",
                            Href = "/accountabilityRatings"
                                    + "?educationOrganizationId=" + EducationOrganizationId            
                                    + "&ratingTitle=" + WebUtility.UrlEncode(RatingTitle)            
                                    + "&schoolYear=" + SchoolYear            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int)
                && RatingTitle != default(string)
                && SchoolYear != default(short)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.AccountabilityRating table of the AccountabilityRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AccountabilityRating : IAccountabilityRating, IHasETag, IAccountabilityRatingSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AccountabilityRating resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        private bool _schoolYearTypeReferenceExplicitlyAssigned;
        private SchoolYearType.SchoolYearTypeReference _schoolYearTypeReference;
        private SchoolYearType.SchoolYearTypeReference ImplicitSchoolYearTypeReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolYearTypeReference == null && !_schoolYearTypeReferenceExplicitlyAssigned)
                    _schoolYearTypeReference = new SchoolYearType.SchoolYearTypeReference();

                return _schoolYearTypeReference;
            }
        }

        [DataMember(Name="schoolYearTypeReference")][NaturalKeyMember]
        public SchoolYearType.SchoolYearTypeReference SchoolYearTypeReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolYearTypeReference != null
                    && (_schoolYearTypeReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference;

                return null;
            }
            set 
            { 
                _schoolYearTypeReferenceExplicitlyAssigned = true;
                _schoolYearTypeReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IAccountabilityRating.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The title of the rating (e.g., School Rating, Safety Score).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="ratingTitle"), NaturalKeyMember]
        public string RatingTitle { get; set; }

        /// <summary>
        /// The school year for which the AccountabilityRating is assessed.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short IAccountabilityRating.SchoolYear
        {
            get
            {
                if (ImplicitSchoolYearTypeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SchoolYearType
                _schoolYearTypeReferenceExplicitlyAssigned = false;
                ImplicitSchoolYearTypeReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IAccountabilityRating).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IAccountabilityRating).EducationOrganizationId.GetHashCode();
 
                // Standard Property
                if ((this as IAccountabilityRating).RatingTitle != null) 
                    hash = hash * 23 + (this as IAccountabilityRating).RatingTitle.GetHashCode();
 
                //Referenced Property
                if ((this as IAccountabilityRating).SchoolYear != null) 
                    hash = hash * 23 + (this as IAccountabilityRating).SchoolYear.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An accountability rating level, designation, or assessment.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="rating")]
        public string Rating { get; set; }

        /// <summary>
        /// The date the rating was awarded.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="ratingDate")]
        public DateTime? RatingDate { get; set; }

        /// <summary>
        /// The organization that assessed the rating.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="ratingOrganization")]
        public string RatingOrganization { get; set; }

        /// <summary>
        /// The program associated with the AccountabilityRating (e.g., NCLB, AEIS).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="ratingProgram")]
        public string RatingProgram { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAccountabilityRating)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAccountabilityRating) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAccountabilityRatingSynchronizationSourceSupport.IsRatingSupported              { get { return true; } set { } }
 
        bool IAccountabilityRatingSynchronizationSourceSupport.IsRatingDateSupported          { get { return true; } set { } }
 
        bool IAccountabilityRatingSynchronizationSourceSupport.IsRatingOrganizationSupported  { get { return true; } set { } }
 
        bool IAccountabilityRatingSynchronizationSourceSupport.IsRatingProgramSupported       { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AccountCodeDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.AccountCodeDescriptor
{
    /// <summary>
    /// A class which represents the edfi.AccountCodeDescriptor table of the AccountCodeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AccountCodeDescriptor : IAccountCodeDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IAccountCodeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AccountCodeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="accountCodeDescriptorId"), NaturalKeyMember]
        public int AccountCodeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return AccountCodeDescriptorId; }
            set { AccountCodeDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IAccountCodeDescriptor).AccountCodeDescriptorId != null) 
                    hash = hash * 23 + (this as IAccountCodeDescriptor).AccountCodeDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The type of the account code (e.g., fund, function, object).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="accountCodeCategory")]
        public string AccountCodeCategory { get; set; }

        /// <summary>
        /// The first date the account code is valid.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The last date the account code is valid.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAccountCodeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAccountCodeDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAccountCodeDescriptorSynchronizationSourceSupport.IsAccountCodeCategorySupported  { get { return true; } set { } }
 
        bool IAccountCodeDescriptorSynchronizationSourceSupport.IsBeginDateSupported            { get { return true; } set { } }
 
        bool IAccountCodeDescriptorSynchronizationSourceSupport.IsCodeValueSupported            { get { return true; } set { } }
 
        bool IAccountCodeDescriptorSynchronizationSourceSupport.IsDescriptionSupported          { get { return true; } set { } }
 
        bool IAccountCodeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported   { get { return true; } set { } }
 
        bool IAccountCodeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported     { get { return true; } set { } }
 
        bool IAccountCodeDescriptorSynchronizationSourceSupport.IsEndDateSupported              { get { return true; } set { } }
 
        bool IAccountCodeDescriptorSynchronizationSourceSupport.IsNamespaceSupported            { get { return true; } set { } }
 
        bool IAccountCodeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported    { get { return true; } set { } }
 
        bool IAccountCodeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported     { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AchievementCategoryDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.AchievementCategoryDescriptor
{
    /// <summary>
    /// A class which represents the edfi.AchievementCategoryDescriptor table of the AchievementCategoryDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AchievementCategoryDescriptor : IAchievementCategoryDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IAchievementCategoryDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AchievementCategoryDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementCategoryDescriptorId"), NaturalKeyMember]
        public int AchievementCategoryDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return AchievementCategoryDescriptorId; }
            set { AchievementCategoryDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IAchievementCategoryDescriptor).AchievementCategoryDescriptorId != null) 
                    hash = hash * 23 + (this as IAchievementCategoryDescriptor).AchievementCategoryDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="achievementCategoryType")]
        public string AchievementCategoryType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAchievementCategoryDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAchievementCategoryDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAchievementCategoryDescriptorSynchronizationSourceSupport.IsAchievementCategoryTypeSupported  { get { return true; } set { } }
 
        bool IAchievementCategoryDescriptorSynchronizationSourceSupport.IsCodeValueSupported                { get { return true; } set { } }
 
        bool IAchievementCategoryDescriptorSynchronizationSourceSupport.IsDescriptionSupported              { get { return true; } set { } }
 
        bool IAchievementCategoryDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported       { get { return true; } set { } }
 
        bool IAchievementCategoryDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported         { get { return true; } set { } }
 
        bool IAchievementCategoryDescriptorSynchronizationSourceSupport.IsNamespaceSupported                { get { return true; } set { } }
 
        bool IAchievementCategoryDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported        { get { return true; } set { } }
 
        bool IAchievementCategoryDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported         { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AchievementCategoryType

namespace EdFi.Ods.Api.Models.Resources.V2.AchievementCategoryType
{
    /// <summary>
    /// A class which represents the edfi.AchievementCategoryType table of the AchievementCategoryType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AchievementCategoryType : IAchievementCategoryType, IHasETag, IAchievementCategoryTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AchievementCategoryType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for AchievementCategory
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementCategoryTypeId"), NaturalKeyMember]
        public int AchievementCategoryTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IAchievementCategoryType).AchievementCategoryTypeId != null) 
                    hash = hash * 23 + (this as IAchievementCategoryType).AchievementCategoryTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the AchievementCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the AchievementCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAchievementCategoryType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAchievementCategoryType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAchievementCategoryTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IAchievementCategoryTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IAchievementCategoryTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: Actual

namespace EdFi.Ods.Api.Models.Resources.V2.Actual
{
    /// <summary>
    /// Represents a reference to the Actual resource.
    /// </summary>
    [DataContract]
    public class ActualReference
    {
        [DataMember(Name="accountNumber"), NaturalKeyMember]
        public string AccountNumber { get; set; }

        [DataMember(Name="asOfDate"), NaturalKeyMember]
        public DateTime AsOfDate { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="fiscalYear"), NaturalKeyMember]
        public int FiscalYear { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "Actual",
                            Href = "/actuals"
                                    + "?accountNumber=" + WebUtility.UrlEncode(AccountNumber)            
                                    + "&asOfDate=" + JsonConvert.SerializeObject(AsOfDate).Replace("\"", string.Empty)            
                                    + "&educationOrganizationId=" + EducationOrganizationId            
                                    + "&fiscalYear=" + FiscalYear            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return AccountNumber != default(string)
                && AsOfDate != default(DateTime)
                && EducationOrganizationId != default(int)
                && FiscalYear != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Actual table of the Actual aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class Actual : IActual, IHasETag, IActualSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the Actual resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _accountReferenceExplicitlyAssigned;
        private Account.AccountReference _accountReference;
        private Account.AccountReference ImplicitAccountReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_accountReference == null && !_accountReferenceExplicitlyAssigned)
                    _accountReference = new Account.AccountReference();

                return _accountReference;
            }
        }

        [DataMember(Name="accountReference")][NaturalKeyMember]
        public Account.AccountReference AccountReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitAccountReference != null
                    && (_accountReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitAccountReference.IsReferenceFullyDefined()))
                    return ImplicitAccountReference;

                return null;
            }
            set 
            { 
                _accountReferenceExplicitlyAssigned = true;
                _accountReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The alphanumeric string that identifies the account.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IActual.AccountNumber
        {
            get
            {
                if (ImplicitAccountReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAccountReference.IsReferenceFullyDefined()))
                    return ImplicitAccountReference.AccountNumber;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Account
                _accountReferenceExplicitlyAssigned = false;
                ImplicitAccountReference.AccountNumber = value;
            }
        }

        /// <summary>
        /// The date of the reported actual element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="asOfDate"), NaturalKeyMember]
        public DateTime AsOfDate { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IActual.EducationOrganizationId
        {
            get
            {
                if (ImplicitAccountReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAccountReference.IsReferenceFullyDefined()))
                    return ImplicitAccountReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Account
                _accountReferenceExplicitlyAssigned = false;
                ImplicitAccountReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The financial accounting year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IActual.FiscalYear
        {
            get
            {
                if (ImplicitAccountReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAccountReference.IsReferenceFullyDefined()))
                    return ImplicitAccountReference.FiscalYear;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Account
                _accountReferenceExplicitlyAssigned = false;
                ImplicitAccountReference.FiscalYear = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IActual).AccountNumber != null) 
                    hash = hash * 23 + (this as IActual).AccountNumber.GetHashCode();
 
                // Standard Property
                if ((this as IActual).AsOfDate != null) 
                    hash = hash * 23 + (this as IActual).AsOfDate.GetHashCode();
 
                //Referenced Property
                if ((this as IActual).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IActual).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IActual).FiscalYear != null) 
                    hash = hash * 23 + (this as IActual).FiscalYear.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Current balance for the account.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="amountToDate")][Range(typeof(decimal), "-922337203685477.5808", "922337203685477.5807")]
        public decimal AmountToDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IActual)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IActual) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IActualSynchronizationSourceSupport.IsAmountToDateSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AdditionalCreditType

namespace EdFi.Ods.Api.Models.Resources.V2.AdditionalCreditType
{
    /// <summary>
    /// A class which represents the edfi.AdditionalCreditType table of the AdditionalCreditType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AdditionalCreditType : IAdditionalCreditType, IHasETag, IAdditionalCreditTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AdditionalCreditType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for AdditionalCredit
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="additionalCreditTypeId"), NaturalKeyMember]
        public int AdditionalCreditTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IAdditionalCreditType).AdditionalCreditTypeId != null) 
                    hash = hash * 23 + (this as IAdditionalCreditType).AdditionalCreditTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the AdditionalCredit type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the AdditionalCredit type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAdditionalCreditType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAdditionalCreditType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAdditionalCreditTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IAdditionalCreditTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IAdditionalCreditTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AddressType

namespace EdFi.Ods.Api.Models.Resources.V2.AddressType
{
    /// <summary>
    /// A class which represents the edfi.AddressType table of the AddressType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AddressType : IAddressType, IHasETag, IAddressTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AddressType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Address
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressTypeId"), NaturalKeyMember]
        public int AddressTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IAddressType).AddressTypeId != null) 
                    hash = hash * 23 + (this as IAddressType).AddressTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Address type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Address type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAddressType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAddressType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAddressTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IAddressTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IAddressTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AdministrationEnvironmentType

namespace EdFi.Ods.Api.Models.Resources.V2.AdministrationEnvironmentType
{
    /// <summary>
    /// A class which represents the edfi.AdministrationEnvironmentType table of the AdministrationEnvironmentType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AdministrationEnvironmentType : IAdministrationEnvironmentType, IHasETag, IAdministrationEnvironmentTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AdministrationEnvironmentType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for AdministrationEnvironment
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="administrationEnvironmentTypeId"), NaturalKeyMember]
        public int AdministrationEnvironmentTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IAdministrationEnvironmentType).AdministrationEnvironmentTypeId != null) 
                    hash = hash * 23 + (this as IAdministrationEnvironmentType).AdministrationEnvironmentTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the AdministrationEnvironment type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the AdministrationEnvironment type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAdministrationEnvironmentType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAdministrationEnvironmentType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAdministrationEnvironmentTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IAdministrationEnvironmentTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IAdministrationEnvironmentTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AdministrativeFundingControlDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.AdministrativeFundingControlDescriptor
{
    /// <summary>
    /// A class which represents the edfi.AdministrativeFundingControlDescriptor table of the AdministrativeFundingControlDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AdministrativeFundingControlDescriptor : IAdministrativeFundingControlDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IAdministrativeFundingControlDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AdministrativeFundingControlDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="administrativeFundingControlDescriptorId"), NaturalKeyMember]
        public int AdministrativeFundingControlDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return AdministrativeFundingControlDescriptorId; }
            set { AdministrativeFundingControlDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IAdministrativeFundingControlDescriptor).AdministrativeFundingControlDescriptorId != null) 
                    hash = hash * 23 + (this as IAdministrativeFundingControlDescriptor).AdministrativeFundingControlDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="administrativeFundingControlType")]
        public string AdministrativeFundingControlType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAdministrativeFundingControlDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAdministrativeFundingControlDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAdministrativeFundingControlDescriptorSynchronizationSourceSupport.IsAdministrativeFundingControlTypeSupported  { get { return true; } set { } }
 
        bool IAdministrativeFundingControlDescriptorSynchronizationSourceSupport.IsCodeValueSupported                         { get { return true; } set { } }
 
        bool IAdministrativeFundingControlDescriptorSynchronizationSourceSupport.IsDescriptionSupported                       { get { return true; } set { } }
 
        bool IAdministrativeFundingControlDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported                { get { return true; } set { } }
 
        bool IAdministrativeFundingControlDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported                  { get { return true; } set { } }
 
        bool IAdministrativeFundingControlDescriptorSynchronizationSourceSupport.IsNamespaceSupported                         { get { return true; } set { } }
 
        bool IAdministrativeFundingControlDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported                 { get { return true; } set { } }
 
        bool IAdministrativeFundingControlDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported                  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AdministrativeFundingControlType

namespace EdFi.Ods.Api.Models.Resources.V2.AdministrativeFundingControlType
{
    /// <summary>
    /// A class which represents the edfi.AdministrativeFundingControlType table of the AdministrativeFundingControlType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AdministrativeFundingControlType : IAdministrativeFundingControlType, IHasETag, IAdministrativeFundingControlTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AdministrativeFundingControlType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for AdministrativeFundingControl
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="administrativeFundingControlTypeId"), NaturalKeyMember]
        public int AdministrativeFundingControlTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IAdministrativeFundingControlType).AdministrativeFundingControlTypeId != null) 
                    hash = hash * 23 + (this as IAdministrativeFundingControlType).AdministrativeFundingControlTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the AdministrativeFundingControl type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the AdministrativeFundingControl type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAdministrativeFundingControlType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAdministrativeFundingControlType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAdministrativeFundingControlTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IAdministrativeFundingControlTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IAdministrativeFundingControlTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: Assessment

namespace EdFi.Ods.Api.Models.Resources.V2.Assessment
{
    /// <summary>
    /// Represents a reference to the Assessment resource.
    /// </summary>
    [DataContract]
    public class AssessmentReference
    {
        [DataMember(Name="identifier"), NaturalKeyMember]
        public string AssessmentIdentifier { get; set; }

        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "Assessment",
                            Href = "/assessments"
                                    + "?identifier=" + WebUtility.UrlEncode(AssessmentIdentifier)            
                                    + "&namespace=" + WebUtility.UrlEncode(Namespace)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return AssessmentIdentifier != default(string)
                && Namespace != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Assessment table of the Assessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class Assessment : IAssessment, IHasETag, IAssessmentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Assessment()
        {
            AssessmentAcademicSubjects = new List<AssessmentAcademicSubject>();
            AssessmentAssessedGradeLevels = new List<AssessmentAssessedGradeLevel>();
            AssessmentIdentificationCodes = new List<AssessmentIdentificationCode>();
            AssessmentLanguages = new List<AssessmentLanguage>();
            AssessmentPerformanceLevels = new List<AssessmentPerformanceLevel>();
            AssessmentPrograms = new List<AssessmentProgram>();
            AssessmentScores = new List<AssessmentScore>();
            AssessmentSections = new List<AssessmentSection>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Assessment resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _assessmentFamilyReferenceExplicitlyAssigned;
        private AssessmentFamily.AssessmentFamilyReference _assessmentFamilyReference;
        private AssessmentFamily.AssessmentFamilyReference ImplicitAssessmentFamilyReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_assessmentFamilyReference == null && !_assessmentFamilyReferenceExplicitlyAssigned)
                    _assessmentFamilyReference = new AssessmentFamily.AssessmentFamilyReference();

                return _assessmentFamilyReference;
            }
        }

        [DataMember(Name="assessmentFamilyReference")]
        public AssessmentFamily.AssessmentFamilyReference AssessmentFamilyReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitAssessmentFamilyReference != null
                    && (_assessmentFamilyReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitAssessmentFamilyReference.IsReferenceFullyDefined()))
                    return ImplicitAssessmentFamilyReference;

                return null;
            }
            set 
            { 
                _assessmentFamilyReferenceExplicitlyAssigned = true;
                _assessmentFamilyReference = value;
            }
        }
        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identifier"), NaturalKeyMember]
        public string AssessmentIdentifier { get; set; }

        /// <summary>
        /// Namespace for the Assessment.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IAssessment).AssessmentIdentifier != null) 
                    hash = hash * 23 + (this as IAssessment).AssessmentIdentifier.GetHashCode();
 
                // Standard Property
                if ((this as IAssessment).Namespace != null) 
                    hash = hash * 23 + (this as IAssessment).Namespace.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Indicates that the assessment is adaptive.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="adaptiveAssessment")]
        public bool? AdaptiveAssessment { get; set; }

        /// <summary>
        /// The category of an assessment based on format and content. For example:          Achievement test          Advanced placement test          Alternate assessment/grade-level standards          Attitudinal test          Cognitive and perceptual skills test          ...
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="categoryDescriptor")]
        public string AssessmentCategoryDescriptor { get; set; }

        /// <summary>
        /// The title or name of the AssessmentFamily.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IAssessment.AssessmentFamilyTitle
        {
            get
            {
                if (ImplicitAssessmentFamilyReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAssessmentFamilyReference.IsReferenceFullyDefined()))
                    return ImplicitAssessmentFamilyReference.AssessmentFamilyTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // AssessmentFamily
                _assessmentFamilyReferenceExplicitlyAssigned = false;
                ImplicitAssessmentFamilyReference.AssessmentFamilyTitle = value;
            }
        }

        /// <summary>
        /// Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="form")]
        public string AssessmentForm { get; set; }

        /// <summary>
        /// The period or window in which an assessment is supposed to be administered.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="periodDescriptor")]
        public string AssessmentPeriodDescriptor { get; set; }

        /// <summary>
        /// The title or name of the Assessment.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="title")]
        public string AssessmentTitle { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? IAssessment.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The maximum raw score achievable across all assessment items that are correct and scored at the maximum.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maxRawScore")]
        public int? MaxRawScore { get; set; }

        /// <summary>
        /// Reflects the specific nomenclature used for Assessment.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nomenclature")]
        public string Nomenclature { get; set; }

        /// <summary>
        /// The month, day, and year that the conceptual design for the assessment was most recently revised substantially.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="revisionDate")]
        public DateTime? RevisionDate { get; set; }

        /// <summary>
        /// The version identifier for the assessment.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="version")]
        public int? Version { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// contentStandard
        /// </summary> 
        [DataMember(Name = "contentStandard")]
        public AssessmentContentStandard AssessmentContentStandard { get; set; }

        IAssessmentContentStandard IAssessment.AssessmentContentStandard
        {
            get { return AssessmentContentStandard; }
            set { AssessmentContentStandard = (AssessmentContentStandard) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<AssessmentAcademicSubject> _assessmentAcademicSubjects;
        private IList<IAssessmentAcademicSubject> _assessmentAcademicSubjectsCovariant;

        [DataMember(Name="academicSubjects")]
        public IList<AssessmentAcademicSubject> AssessmentAcademicSubjects 
        { 
            get { return _assessmentAcademicSubjects; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<AssessmentAcademicSubject>(value,
                    (s, e) => ((IAssessmentAcademicSubject)e.Item).Assessment = this);
                _assessmentAcademicSubjects = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IAssessmentAcademicSubject, AssessmentAcademicSubject>(value);
                covariantList.ItemAdded += (s, e) => ((IAssessmentAcademicSubject)e.Item).Assessment = this;
                _assessmentAcademicSubjectsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IAssessmentAcademicSubject> IAssessment.AssessmentAcademicSubjects
        {
            get { return _assessmentAcademicSubjectsCovariant; }
            set { AssessmentAcademicSubjects = new List<AssessmentAcademicSubject>(value.Cast<AssessmentAcademicSubject>()); }
        }

        private IList<AssessmentAssessedGradeLevel> _assessmentAssessedGradeLevels;
        private IList<IAssessmentAssessedGradeLevel> _assessmentAssessedGradeLevelsCovariant;

        [DataMember(Name="assessedGradeLevels")]
        public IList<AssessmentAssessedGradeLevel> AssessmentAssessedGradeLevels 
        { 
            get { return _assessmentAssessedGradeLevels; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<AssessmentAssessedGradeLevel>(value,
                    (s, e) => ((IAssessmentAssessedGradeLevel)e.Item).Assessment = this);
                _assessmentAssessedGradeLevels = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IAssessmentAssessedGradeLevel, AssessmentAssessedGradeLevel>(value);
                covariantList.ItemAdded += (s, e) => ((IAssessmentAssessedGradeLevel)e.Item).Assessment = this;
                _assessmentAssessedGradeLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IAssessmentAssessedGradeLevel> IAssessment.AssessmentAssessedGradeLevels
        {
            get { return _assessmentAssessedGradeLevelsCovariant; }
            set { AssessmentAssessedGradeLevels = new List<AssessmentAssessedGradeLevel>(value.Cast<AssessmentAssessedGradeLevel>()); }
        }

        private IList<AssessmentIdentificationCode> _assessmentIdentificationCodes;
        private IList<IAssessmentIdentificationCode> _assessmentIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes")]
        public IList<AssessmentIdentificationCode> AssessmentIdentificationCodes 
        { 
            get { return _assessmentIdentificationCodes; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<AssessmentIdentificationCode>(value,
                    (s, e) => ((IAssessmentIdentificationCode)e.Item).Assessment = this);
                _assessmentIdentificationCodes = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IAssessmentIdentificationCode, AssessmentIdentificationCode>(value);
                covariantList.ItemAdded += (s, e) => ((IAssessmentIdentificationCode)e.Item).Assessment = this;
                _assessmentIdentificationCodesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IAssessmentIdentificationCode> IAssessment.AssessmentIdentificationCodes
        {
            get { return _assessmentIdentificationCodesCovariant; }
            set { AssessmentIdentificationCodes = new List<AssessmentIdentificationCode>(value.Cast<AssessmentIdentificationCode>()); }
        }

        private IList<AssessmentLanguage> _assessmentLanguages;
        private IList<IAssessmentLanguage> _assessmentLanguagesCovariant;

        [DataMember(Name="languages")]
        public IList<AssessmentLanguage> AssessmentLanguages 
        { 
            get { return _assessmentLanguages; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<AssessmentLanguage>(value,
                    (s, e) => ((IAssessmentLanguage)e.Item).Assessment = this);
                _assessmentLanguages = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IAssessmentLanguage, AssessmentLanguage>(value);
                covariantList.ItemAdded += (s, e) => ((IAssessmentLanguage)e.Item).Assessment = this;
                _assessmentLanguagesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IAssessmentLanguage> IAssessment.AssessmentLanguages
        {
            get { return _assessmentLanguagesCovariant; }
            set { AssessmentLanguages = new List<AssessmentLanguage>(value.Cast<AssessmentLanguage>()); }
        }

        private IList<AssessmentPerformanceLevel> _assessmentPerformanceLevels;
        private IList<IAssessmentPerformanceLevel> _assessmentPerformanceLevelsCovariant;

        [DataMember(Name="performanceLevels")]
        public IList<AssessmentPerformanceLevel> AssessmentPerformanceLevels 
        { 
            get { return _assessmentPerformanceLevels; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<AssessmentPerformanceLevel>(value,
                    (s, e) => ((IAssessmentPerformanceLevel)e.Item).Assessment = this);
                _assessmentPerformanceLevels = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IAssessmentPerformanceLevel, AssessmentPerformanceLevel>(value);
                covariantList.ItemAdded += (s, e) => ((IAssessmentPerformanceLevel)e.Item).Assessment = this;
                _assessmentPerformanceLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IAssessmentPerformanceLevel> IAssessment.AssessmentPerformanceLevels
        {
            get { return _assessmentPerformanceLevelsCovariant; }
            set { AssessmentPerformanceLevels = new List<AssessmentPerformanceLevel>(value.Cast<AssessmentPerformanceLevel>()); }
        }

        private IList<AssessmentProgram> _assessmentPrograms;
        private IList<IAssessmentProgram> _assessmentProgramsCovariant;

        [DataMember(Name="programs")]
        public IList<AssessmentProgram> AssessmentPrograms 
        { 
            get { return _assessmentPrograms; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<AssessmentProgram>(value,
                    (s, e) => ((IAssessmentProgram)e.Item).Assessment = this);
                _assessmentPrograms = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IAssessmentProgram, AssessmentProgram>(value);
                covariantList.ItemAdded += (s, e) => ((IAssessmentProgram)e.Item).Assessment = this;
                _assessmentProgramsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IAssessmentProgram> IAssessment.AssessmentPrograms
        {
            get { return _assessmentProgramsCovariant; }
            set { AssessmentPrograms = new List<AssessmentProgram>(value.Cast<AssessmentProgram>()); }
        }

        private IList<AssessmentScore> _assessmentScores;
        private IList<IAssessmentScore> _assessmentScoresCovariant;

        [DataMember(Name="scores")]
        public IList<AssessmentScore> AssessmentScores 
        { 
            get { return _assessmentScores; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<AssessmentScore>(value,
                    (s, e) => ((IAssessmentScore)e.Item).Assessment = this);
                _assessmentScores = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IAssessmentScore, AssessmentScore>(value);
                covariantList.ItemAdded += (s, e) => ((IAssessmentScore)e.Item).Assessment = this;
                _assessmentScoresCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IAssessmentScore> IAssessment.AssessmentScores
        {
            get { return _assessmentScoresCovariant; }
            set { AssessmentScores = new List<AssessmentScore>(value.Cast<AssessmentScore>()); }
        }

        private IList<AssessmentSection> _assessmentSections;
        private IList<IAssessmentSection> _assessmentSectionsCovariant;

        [DataMember(Name="sections")]
        public IList<AssessmentSection> AssessmentSections 
        { 
            get { return _assessmentSections; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<AssessmentSection>(value,
                    (s, e) => ((IAssessmentSection)e.Item).Assessment = this);
                _assessmentSections = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IAssessmentSection, AssessmentSection>(value);
                covariantList.ItemAdded += (s, e) => ((IAssessmentSection)e.Item).Assessment = this;
                _assessmentSectionsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IAssessmentSection> IAssessment.AssessmentSections
        {
            get { return _assessmentSectionsCovariant; }
            set { AssessmentSections = new List<AssessmentSection>(value.Cast<AssessmentSection>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_assessmentAcademicSubjects != null) foreach (var item in _assessmentAcademicSubjects)
            {
                item.Assessment = this;
            }
            
            if (_assessmentAssessedGradeLevels != null) foreach (var item in _assessmentAssessedGradeLevels)
            {
                item.Assessment = this;
            }
            
            if (_assessmentIdentificationCodes != null) foreach (var item in _assessmentIdentificationCodes)
            {
                item.Assessment = this;
            }
            
            if (_assessmentLanguages != null) foreach (var item in _assessmentLanguages)
            {
                item.Assessment = this;
            }
            
            if (_assessmentPerformanceLevels != null) foreach (var item in _assessmentPerformanceLevels)
            {
                item.Assessment = this;
            }
            
            if (_assessmentPrograms != null) foreach (var item in _assessmentPrograms)
            {
                item.Assessment = this;
            }
            
            if (_assessmentScores != null) foreach (var item in _assessmentScores)
            {
                item.Assessment = this;
            }
            
            if (_assessmentSections != null) foreach (var item in _assessmentSections)
            {
                item.Assessment = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessment)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessment) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAssessmentSynchronizationSourceSupport.IsAdaptiveAssessmentSupported             { get { return true; } set { } }
 
        bool IAssessmentSynchronizationSourceSupport.IsAssessmentAcademicSubjectsSupported     { get { return true; } set { } }
 
        bool IAssessmentSynchronizationSourceSupport.IsAssessmentAssessedGradeLevelsSupported  { get { return true; } set { } }
 
        bool IAssessmentSynchronizationSourceSupport.IsAssessmentCategoryDescriptorSupported   { get { return true; } set { } }
 
        bool IAssessmentSynchronizationSourceSupport.IsAssessmentContentStandardSupported      { get { return true; } set { } }
 
        bool IAssessmentSynchronizationSourceSupport.IsAssessmentFamilyTitleSupported          { get { return true; } set { } }
 
        bool IAssessmentSynchronizationSourceSupport.IsAssessmentFormSupported                 { get { return true; } set { } }
 
        bool IAssessmentSynchronizationSourceSupport.IsAssessmentIdentificationCodesSupported  { get { return true; } set { } }
 
        bool IAssessmentSynchronizationSourceSupport.IsAssessmentLanguagesSupported            { get { return true; } set { } }
 
        bool IAssessmentSynchronizationSourceSupport.IsAssessmentPerformanceLevelsSupported    { get { return true; } set { } }
 
        bool IAssessmentSynchronizationSourceSupport.IsAssessmentPeriodDescriptorSupported     { get { return true; } set { } }
 
        bool IAssessmentSynchronizationSourceSupport.IsAssessmentProgramsSupported             { get { return true; } set { } }
 
        bool IAssessmentSynchronizationSourceSupport.IsAssessmentScoresSupported               { get { return true; } set { } }
 
        bool IAssessmentSynchronizationSourceSupport.IsAssessmentSectionsSupported             { get { return true; } set { } }
 
        bool IAssessmentSynchronizationSourceSupport.IsAssessmentTitleSupported                { get { return true; } set { } }
 
        bool IAssessmentSynchronizationSourceSupport.IsEducationOrganizationIdSupported        { get { return true; } set { } }
 
        bool IAssessmentSynchronizationSourceSupport.IsMaxRawScoreSupported                    { get { return true; } set { } }
 
        bool IAssessmentSynchronizationSourceSupport.IsNomenclatureSupported                   { get { return true; } set { } }
 
        bool IAssessmentSynchronizationSourceSupport.IsRevisionDateSupported                   { get { return true; } set { } }
 
        bool IAssessmentSynchronizationSourceSupport.IsVersionSupported                        { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IAssessmentAcademicSubject, bool> IAssessmentSynchronizationSourceSupport.IsAssessmentAcademicSubjectIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IAssessmentAssessedGradeLevel, bool> IAssessmentSynchronizationSourceSupport.IsAssessmentAssessedGradeLevelIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IAssessmentIdentificationCode, bool> IAssessmentSynchronizationSourceSupport.IsAssessmentIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IAssessmentLanguage, bool> IAssessmentSynchronizationSourceSupport.IsAssessmentLanguageIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IAssessmentPerformanceLevel, bool> IAssessmentSynchronizationSourceSupport.IsAssessmentPerformanceLevelIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IAssessmentProgram, bool> IAssessmentSynchronizationSourceSupport.IsAssessmentProgramIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IAssessmentScore, bool> IAssessmentSynchronizationSourceSupport.IsAssessmentScoreIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IAssessmentSection, bool> IAssessmentSynchronizationSourceSupport.IsAssessmentSectionIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.AssessmentAcademicSubject table of the Assessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentAcademicSubject : IAssessmentAcademicSubject, IAssessmentAcademicSubjectSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IAssessment _assessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IAssessment IAssessmentAcademicSubject.Assessment
        {
            get { return _assessment; }
            set { _assessment = value; }
        }

        internal IAssessment Assessment
        {
            set { _assessment = value; }
        }

        /// <summary>
        /// The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="academicSubjectDescriptor"), NaturalKeyMember]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_assessment != null) 
                    hash = hash * 23 + _assessment.GetHashCode();
 
                // Standard Property
                if ((this as IAssessmentAcademicSubject).AcademicSubjectDescriptor != null) 
                    hash = hash * 23 + (this as IAssessmentAcademicSubject).AcademicSubjectDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentAcademicSubject)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentAcademicSubject) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.AssessmentAssessedGradeLevel table of the Assessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentAssessedGradeLevel : IAssessmentAssessedGradeLevel, IAssessmentAssessedGradeLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IAssessment _assessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IAssessment IAssessmentAssessedGradeLevel.Assessment
        {
            get { return _assessment; }
            set { _assessment = value; }
        }

        internal IAssessment Assessment
        {
            set { _assessment = value; }
        }

        /// <summary>
        /// The grade level(s) for which an assessment is designed. The semantics of null is assumed to mean that the assessment is not associated with any grade level.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_assessment != null) 
                    hash = hash * 23 + _assessment.GetHashCode();
 
                // Standard Property
                if ((this as IAssessmentAssessedGradeLevel).GradeLevelDescriptor != null) 
                    hash = hash * 23 + (this as IAssessmentAssessedGradeLevel).GradeLevelDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentAssessedGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentAssessedGradeLevel) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.AssessmentContentStandard table of the Assessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentContentStandard : IAssessmentContentStandard, IAssessmentContentStandardSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public AssessmentContentStandard()
        {
            AssessmentContentStandardAuthors = new List<AssessmentContentStandardAuthor>();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _mandatingEducationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _mandatingEducationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitMandatingEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_mandatingEducationOrganizationReference == null && !_mandatingEducationOrganizationReferenceExplicitlyAssigned)
                    _mandatingEducationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _mandatingEducationOrganizationReference;
            }
        }

        [DataMember(Name="mandatingEducationOrganizationReference")]
        public EducationOrganization.EducationOrganizationReference MandatingEducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitMandatingEducationOrganizationReference != null
                    && (_mandatingEducationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitMandatingEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitMandatingEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _mandatingEducationOrganizationReferenceExplicitlyAssigned = true;
                _mandatingEducationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IAssessment _assessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IAssessment IAssessmentContentStandard.Assessment
        {
            get { return _assessment; }
            set { _assessment = value; }
        }

        internal IAssessment Assessment
        {
            set { _assessment = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_assessment != null) 
                    hash = hash * 23 + _assessment.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The beginning of the period during which this learning standard document is intended for use.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The end of the period during which this learning standard document is intended for use.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? IAssessmentContentStandard.MandatingEducationOrganizationId
        {
            get
            {
                if (ImplicitMandatingEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitMandatingEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitMandatingEducationOrganizationReference.EducationOrganizationId;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // MandatingEducationOrganization
                _mandatingEducationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitMandatingEducationOrganizationReference.EducationOrganizationId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The date on which this content was first published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="publicationDate")]
        public DateTime? PublicationDate { get; set; }

        /// <summary>
        /// The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="publicationStatusType")]
        public string PublicationStatusType { get; set; }

        /// <summary>
        /// The year at which this content was first published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="publicationYear")]
        public short? PublicationYear { get; set; }

        /// <summary>
        /// The name of the content standard, for example Common Core.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// An unambiguous reference to the standards using a network-resolvable URI.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="uri")]
        public string URI { get; set; }

        /// <summary>
        /// The version identifier for the content.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="version")]
        public string Version { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<AssessmentContentStandardAuthor> _assessmentContentStandardAuthors;
        private IList<IAssessmentContentStandardAuthor> _assessmentContentStandardAuthorsCovariant;

        [DataMember(Name="authors")]
        public IList<AssessmentContentStandardAuthor> AssessmentContentStandardAuthors 
        { 
            get { return _assessmentContentStandardAuthors; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<AssessmentContentStandardAuthor>(value,
                    (s, e) => ((IAssessmentContentStandardAuthor)e.Item).AssessmentContentStandard = this);
                _assessmentContentStandardAuthors = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IAssessmentContentStandardAuthor, AssessmentContentStandardAuthor>(value);
                covariantList.ItemAdded += (s, e) => ((IAssessmentContentStandardAuthor)e.Item).AssessmentContentStandard = this;
                _assessmentContentStandardAuthorsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IAssessmentContentStandardAuthor> IAssessmentContentStandard.AssessmentContentStandardAuthors
        {
            get { return _assessmentContentStandardAuthorsCovariant; }
            set { AssessmentContentStandardAuthors = new List<AssessmentContentStandardAuthor>(value.Cast<AssessmentContentStandardAuthor>()); }
        }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_assessmentContentStandardAuthors != null) foreach (var item in _assessmentContentStandardAuthors)
            {
                item.AssessmentContentStandard = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentContentStandard)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentContentStandard) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAssessmentContentStandardSynchronizationSourceSupport.IsAssessmentContentStandardAuthorsSupported  { get { return true; } set { } }
 
        bool IAssessmentContentStandardSynchronizationSourceSupport.IsBeginDateSupported                         { get { return true; } set { } }
 
        bool IAssessmentContentStandardSynchronizationSourceSupport.IsEndDateSupported                           { get { return true; } set { } }
 
        bool IAssessmentContentStandardSynchronizationSourceSupport.IsMandatingEducationOrganizationIdSupported  { get { return true; } set { } }
 
        bool IAssessmentContentStandardSynchronizationSourceSupport.IsPublicationDateSupported                   { get { return true; } set { } }
 
        bool IAssessmentContentStandardSynchronizationSourceSupport.IsPublicationStatusTypeSupported             { get { return true; } set { } }
 
        bool IAssessmentContentStandardSynchronizationSourceSupport.IsPublicationYearSupported                   { get { return true; } set { } }
 
        bool IAssessmentContentStandardSynchronizationSourceSupport.IsTitleSupported                             { get { return true; } set { } }
 
        bool IAssessmentContentStandardSynchronizationSourceSupport.IsURISupported                               { get { return true; } set { } }
 
        bool IAssessmentContentStandardSynchronizationSourceSupport.IsVersionSupported                           { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IAssessmentContentStandardAuthor, bool> IAssessmentContentStandardSynchronizationSourceSupport.IsAssessmentContentStandardAuthorIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.AssessmentContentStandardAuthor table of the Assessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentContentStandardAuthor : IAssessmentContentStandardAuthor, IAssessmentContentStandardAuthorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IAssessmentContentStandard _assessmentContentStandard;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IAssessmentContentStandard IAssessmentContentStandardAuthor.AssessmentContentStandard
        {
            get { return _assessmentContentStandard; }
            set { _assessmentContentStandard = value; }
        }

        internal IAssessmentContentStandard AssessmentContentStandard
        {
            set { _assessmentContentStandard = value; }
        }

        /// <summary>
        /// The person or organization chiefly responsible for the intellectual content of the standard.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="author"), NaturalKeyMember]
        public string Author { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_assessmentContentStandard != null) 
                    hash = hash * 23 + _assessmentContentStandard.GetHashCode();
 
                // Standard Property
                if ((this as IAssessmentContentStandardAuthor).Author != null) 
                    hash = hash * 23 + (this as IAssessmentContentStandardAuthor).Author.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentContentStandardAuthor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentContentStandardAuthor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.AssessmentIdentificationCode table of the Assessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentIdentificationCode : IAssessmentIdentificationCode, IAssessmentIdentificationCodeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IAssessment _assessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IAssessment IAssessmentIdentificationCode.Assessment
        {
            get { return _assessment; }
            set { _assessment = value; }
        }

        internal IAssessment Assessment
        {
            set { _assessment = value; }
        }

        /// <summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to an assessment.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="assessmentIdentificationSystemDescriptor"), NaturalKeyMember]
        public string AssessmentIdentificationSystemDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_assessment != null) 
                    hash = hash * 23 + _assessment.GetHashCode();
 
                // Standard Property
                if ((this as IAssessmentIdentificationCode).AssessmentIdentificationSystemDescriptor != null) 
                    hash = hash * 23 + (this as IAssessmentIdentificationCode).AssessmentIdentificationSystemDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The organization code or name assigning the assessment identification code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assigningOrganizationIdentificationCode")]
        public string AssigningOrganizationIdentificationCode { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode")]
        public string IdentificationCode { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentIdentificationCode) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAssessmentIdentificationCodeSynchronizationSourceSupport.IsAssigningOrganizationIdentificationCodeSupported  { get { return true; } set { } }
 
        bool IAssessmentIdentificationCodeSynchronizationSourceSupport.IsIdentificationCodeSupported                       { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.AssessmentLanguage table of the Assessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentLanguage : IAssessmentLanguage, IAssessmentLanguageSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IAssessment _assessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IAssessment IAssessmentLanguage.Assessment
        {
            get { return _assessment; }
            set { _assessment = value; }
        }

        internal IAssessment Assessment
        {
            set { _assessment = value; }
        }

        /// <summary>
        /// An indication of the languages in which the assessment is designed.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageDescriptor"), NaturalKeyMember]
        public string LanguageDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_assessment != null) 
                    hash = hash * 23 + _assessment.GetHashCode();
 
                // Standard Property
                if ((this as IAssessmentLanguage).LanguageDescriptor != null) 
                    hash = hash * 23 + (this as IAssessmentLanguage).LanguageDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentLanguage)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentLanguage) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.AssessmentPerformanceLevel table of the Assessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentPerformanceLevel : IAssessmentPerformanceLevel, IAssessmentPerformanceLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IAssessment _assessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IAssessment IAssessmentPerformanceLevel.Assessment
        {
            get { return _assessment; }
            set { _assessment = value; }
        }

        internal IAssessment Assessment
        {
            set { _assessment = value; }
        }

        /// <summary>
        /// The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="assessmentReportingMethodType"), NaturalKeyMember]
        public string AssessmentReportingMethodType { get; set; }

        /// <summary>
        /// The performance level(s) defined for the assessment.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="performanceLevelDescriptor"), NaturalKeyMember]
        public string PerformanceLevelDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_assessment != null) 
                    hash = hash * 23 + _assessment.GetHashCode();
 
                // Standard Property
                if ((this as IAssessmentPerformanceLevel).AssessmentReportingMethodType != null) 
                    hash = hash * 23 + (this as IAssessmentPerformanceLevel).AssessmentReportingMethodType.GetHashCode();
 
                // Standard Property
                if ((this as IAssessmentPerformanceLevel).PerformanceLevelDescriptor != null) 
                    hash = hash * 23 + (this as IAssessmentPerformanceLevel).PerformanceLevelDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The maximum score to make the indicated level of performance.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumScore")]
        public string MaximumScore { get; set; }

        /// <summary>
        /// The minimum score required to make the indicated level of performance.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minimumScore")]
        public string MinimumScore { get; set; }

        /// <summary>
        /// The datatype of the result. The results can be expressed as a number, percentile,range, level, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="resultDatatypeType")]
        public string ResultDatatypeType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentPerformanceLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentPerformanceLevel) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAssessmentPerformanceLevelSynchronizationSourceSupport.IsMaximumScoreSupported        { get { return true; } set { } }
 
        bool IAssessmentPerformanceLevelSynchronizationSourceSupport.IsMinimumScoreSupported        { get { return true; } set { } }
 
        bool IAssessmentPerformanceLevelSynchronizationSourceSupport.IsResultDatatypeTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.AssessmentProgram table of the Assessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentProgram : IAssessmentProgram, IAssessmentProgramSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _programReferenceExplicitlyAssigned;
        private Program.ProgramReference _programReference;
        private Program.ProgramReference ImplicitProgramReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_programReference == null && !_programReferenceExplicitlyAssigned)
                    _programReference = new Program.ProgramReference();

                return _programReference;
            }
        }

        [DataMember(Name="programReference")][NaturalKeyMember]
        public Program.ProgramReference ProgramReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitProgramReference != null
                    && (_programReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference;

                return null;
            }
            set 
            { 
                _programReferenceExplicitlyAssigned = true;
                _programReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IAssessment _assessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IAssessment IAssessmentProgram.Assessment
        {
            get { return _assessment; }
            set { _assessment = value; }
        }

        internal IAssessment Assessment
        {
            set { _assessment = value; }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IAssessmentProgram.EducationOrganizationId
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IAssessmentProgram.ProgramName
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.ProgramName = value;
            }
        }

        /// <summary>
        /// The type of program.
        /// </summary>

        // IS in a reference (AssessmentProgram.ProgramTypeId), IS a lookup column 
        string IAssessmentProgram.ProgramType
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramType;

                return null;
            }
            set
            {
                ImplicitProgramReference.ProgramType = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_assessment != null) 
                    hash = hash * 23 + _assessment.GetHashCode();
 
                //Referenced Property
                if ((this as IAssessmentProgram).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IAssessmentProgram).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IAssessmentProgram).ProgramName != null) 
                    hash = hash * 23 + (this as IAssessmentProgram).ProgramName.GetHashCode();
 
                //Unified Type Property
                if ((this as IAssessmentProgram).ProgramType != null) 
                    hash = hash * 23 + (this as IAssessmentProgram).ProgramType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentProgram)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentProgram) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.AssessmentScore table of the Assessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentScore : IAssessmentScore, IAssessmentScoreSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IAssessment _assessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IAssessment IAssessmentScore.Assessment
        {
            get { return _assessment; }
            set { _assessment = value; }
        }

        internal IAssessment Assessment
        {
            set { _assessment = value; }
        }

        /// <summary>
        /// The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="assessmentReportingMethodType"), NaturalKeyMember]
        public string AssessmentReportingMethodType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_assessment != null) 
                    hash = hash * 23 + _assessment.GetHashCode();
 
                // Standard Property
                if ((this as IAssessmentScore).AssessmentReportingMethodType != null) 
                    hash = hash * 23 + (this as IAssessmentScore).AssessmentReportingMethodType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The maximum score possible on the assessment.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumScore")]
        public string MaximumScore { get; set; }

        /// <summary>
        /// The minimum score possible on the assessment.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minimumScore")]
        public string MinimumScore { get; set; }

        /// <summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="resultDatatypeType")]
        public string ResultDatatypeType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentScore)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentScore) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAssessmentScoreSynchronizationSourceSupport.IsMaximumScoreSupported        { get { return true; } set { } }
 
        bool IAssessmentScoreSynchronizationSourceSupport.IsMinimumScoreSupported        { get { return true; } set { } }
 
        bool IAssessmentScoreSynchronizationSourceSupport.IsResultDatatypeTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.AssessmentSection table of the Assessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentSection : IAssessmentSection, IAssessmentSectionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _sectionReferenceExplicitlyAssigned;
        private Section.SectionReference _sectionReference;
        private Section.SectionReference ImplicitSectionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_sectionReference == null && !_sectionReferenceExplicitlyAssigned)
                    _sectionReference = new Section.SectionReference();

                return _sectionReference;
            }
        }

        [DataMember(Name="sectionReference")][NaturalKeyMember]
        public Section.SectionReference SectionReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSectionReference != null
                    && (_sectionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference;

                return null;
            }
            set 
            { 
                _sectionReferenceExplicitlyAssigned = true;
                _sectionReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IAssessment _assessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IAssessment IAssessmentSection.Assessment
        {
            get { return _assessment; }
            set { _assessment = value; }
        }

        internal IAssessment Assessment
        {
            set { _assessment = value; }
        }

        /// <summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IAssessmentSection.ClassPeriodName
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.ClassPeriodName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.ClassPeriodName = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IAssessmentSection.ClassroomIdentificationCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.ClassroomIdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.ClassroomIdentificationCode = value;
            }
        }

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IAssessmentSection.LocalCourseCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.LocalCourseCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.LocalCourseCode = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IAssessmentSection.SchoolId
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short IAssessmentSection.SchoolYear
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IAssessmentSection.SequenceOfCourse
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SequenceOfCourse;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SequenceOfCourse = value;
            }
        }

        /// <summary>
        /// The term for the Session during the school year.
        /// </summary>

        // IS in a reference (AssessmentSection.TermDescriptorId), IS a lookup column 
        string IAssessmentSection.TermDescriptor
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitSectionReference.TermDescriptor = value;
            }
        }

        /// <summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IAssessmentSection.UniqueSectionCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.UniqueSectionCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.UniqueSectionCode = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_assessment != null) 
                    hash = hash * 23 + _assessment.GetHashCode();
 
                //Referenced Property
                if ((this as IAssessmentSection).ClassPeriodName != null) 
                    hash = hash * 23 + (this as IAssessmentSection).ClassPeriodName.GetHashCode();
 
                //Referenced Property
                if ((this as IAssessmentSection).ClassroomIdentificationCode != null) 
                    hash = hash * 23 + (this as IAssessmentSection).ClassroomIdentificationCode.GetHashCode();
 
                //Referenced Property
                if ((this as IAssessmentSection).LocalCourseCode != null) 
                    hash = hash * 23 + (this as IAssessmentSection).LocalCourseCode.GetHashCode();
 
                //Referenced Property
                if ((this as IAssessmentSection).SchoolId != null) 
                    hash = hash * 23 + (this as IAssessmentSection).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as IAssessmentSection).SchoolYear != null) 
                    hash = hash * 23 + (this as IAssessmentSection).SchoolYear.GetHashCode();
 
                //Referenced Property
                if ((this as IAssessmentSection).SequenceOfCourse != null) 
                    hash = hash * 23 + (this as IAssessmentSection).SequenceOfCourse.GetHashCode();
 
                //Unified Type Property
                if ((this as IAssessmentSection).TermDescriptor != null) 
                    hash = hash * 23 + (this as IAssessmentSection).TermDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IAssessmentSection).UniqueSectionCode != null) 
                    hash = hash * 23 + (this as IAssessmentSection).UniqueSectionCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentSection)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentSection) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: AssessmentCategoryDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.AssessmentCategoryDescriptor
{
    /// <summary>
    /// A class which represents the edfi.AssessmentCategoryDescriptor table of the AssessmentCategoryDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentCategoryDescriptor : IAssessmentCategoryDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IAssessmentCategoryDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AssessmentCategoryDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assessmentCategoryDescriptorId"), NaturalKeyMember]
        public int AssessmentCategoryDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return AssessmentCategoryDescriptorId; }
            set { AssessmentCategoryDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IAssessmentCategoryDescriptor).AssessmentCategoryDescriptorId != null) 
                    hash = hash * 23 + (this as IAssessmentCategoryDescriptor).AssessmentCategoryDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="assessmentCategoryType")]
        public string AssessmentCategoryType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentCategoryDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentCategoryDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAssessmentCategoryDescriptorSynchronizationSourceSupport.IsAssessmentCategoryTypeSupported  { get { return true; } set { } }
 
        bool IAssessmentCategoryDescriptorSynchronizationSourceSupport.IsCodeValueSupported               { get { return true; } set { } }
 
        bool IAssessmentCategoryDescriptorSynchronizationSourceSupport.IsDescriptionSupported             { get { return true; } set { } }
 
        bool IAssessmentCategoryDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported      { get { return true; } set { } }
 
        bool IAssessmentCategoryDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported        { get { return true; } set { } }
 
        bool IAssessmentCategoryDescriptorSynchronizationSourceSupport.IsNamespaceSupported               { get { return true; } set { } }
 
        bool IAssessmentCategoryDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported       { get { return true; } set { } }
 
        bool IAssessmentCategoryDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported        { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AssessmentCategoryType

namespace EdFi.Ods.Api.Models.Resources.V2.AssessmentCategoryType
{
    /// <summary>
    /// A class which represents the edfi.AssessmentCategoryType table of the AssessmentCategoryType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentCategoryType : IAssessmentCategoryType, IHasETag, IAssessmentCategoryTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AssessmentCategoryType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for AssessmentCategory
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assessmentCategoryTypeId"), NaturalKeyMember]
        public int AssessmentCategoryTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IAssessmentCategoryType).AssessmentCategoryTypeId != null) 
                    hash = hash * 23 + (this as IAssessmentCategoryType).AssessmentCategoryTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the AssessmentCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the AssessmentCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentCategoryType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentCategoryType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAssessmentCategoryTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IAssessmentCategoryTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IAssessmentCategoryTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AssessmentFamily

namespace EdFi.Ods.Api.Models.Resources.V2.AssessmentFamily
{
    /// <summary>
    /// Represents a reference to the AssessmentFamily resource.
    /// </summary>
    [DataContract]
    public class AssessmentFamilyReference
    {
        [DataMember(Name="title"), NaturalKeyMember]
        public string AssessmentFamilyTitle { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "AssessmentFamily",
                            Href = "/assessmentFamilies"
                                    + "?title=" + WebUtility.UrlEncode(AssessmentFamilyTitle)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return AssessmentFamilyTitle != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.AssessmentFamily table of the AssessmentFamily aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentFamily : IAssessmentFamily, IHasETag, IAssessmentFamilySynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public AssessmentFamily()
        {
            AssessmentFamilyAssessmentPeriods = new List<AssessmentFamilyAssessmentPeriod>();
            AssessmentFamilyIdentificationCodes = new List<AssessmentFamilyIdentificationCode>();
            AssessmentFamilyLanguages = new List<AssessmentFamilyLanguage>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the AssessmentFamily resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _parentAssessmentFamilyReferenceExplicitlyAssigned;
        private AssessmentFamilyReference _parentAssessmentFamilyReference;
        private AssessmentFamilyReference ImplicitParentAssessmentFamilyReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_parentAssessmentFamilyReference == null && !_parentAssessmentFamilyReferenceExplicitlyAssigned)
                    _parentAssessmentFamilyReference = new AssessmentFamilyReference();

                return _parentAssessmentFamilyReference;
            }
        }

        [DataMember(Name="parentAssessmentFamilyReference")]
        public AssessmentFamilyReference ParentAssessmentFamilyReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitParentAssessmentFamilyReference != null
                    && (_parentAssessmentFamilyReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitParentAssessmentFamilyReference.IsReferenceFullyDefined()))
                    return ImplicitParentAssessmentFamilyReference;

                return null;
            }
            set 
            { 
                _parentAssessmentFamilyReferenceExplicitlyAssigned = true;
                _parentAssessmentFamilyReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The title or name of the AssessmentFamily.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="title"), NaturalKeyMember]
        public string AssessmentFamilyTitle { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IAssessmentFamily).AssessmentFamilyTitle != null) 
                    hash = hash * 23 + (this as IAssessmentFamily).AssessmentFamilyTitle.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment family.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="academicSubjectDescriptor")]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// The typical grade level for which an assessment family is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example: Adult, Prekindergarten, First grade, Second grade, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="assessedGradeLevelDescriptor")]
        public string AssessedGradeLevelDescriptor { get; set; }

        /// <summary>
        /// The category of an assessment based on format and content. For example: Achievement test, Advanced placement test, Alternate assessment/grade-level standards, Attitudinal test, Cognitive, and perceptual skills test, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="assessmentCategoryDescriptor")]
        public string AssessmentCategoryDescriptor { get; set; }

        /// <summary>
        /// If the assessment spans a range of grades, then this attribute holds the lowest grade assessed. If only one grade level is assessed, then this attribute is omitted.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="lowestAssessedGradeLevelDescriptor")]
        public string LowestAssessedGradeLevelDescriptor { get; set; }

        /// <summary>
        /// Namespace for the Assessments in this AssessmentFamily.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// Reflects the specific nomenclature used for this level of AssessmentFamily.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nomenclature")]
        public string Nomenclature { get; set; }

        /// <summary>
        /// The title or name of the AssessmentFamily.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IAssessmentFamily.ParentAssessmentFamilyTitle
        {
            get
            {
                if (ImplicitParentAssessmentFamilyReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitParentAssessmentFamilyReference.IsReferenceFullyDefined()))
                    return ImplicitParentAssessmentFamilyReference.AssessmentFamilyTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ParentAssessmentFamily
                _parentAssessmentFamilyReferenceExplicitlyAssigned = false;
                ImplicitParentAssessmentFamilyReference.AssessmentFamilyTitle = value;
            }
        }

        /// <summary>
        /// The month, day, and year that the conceptual design for the AssessmentFamily was most recently revised substantially.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="revisionDate")]
        public DateTime? RevisionDate { get; set; }

        /// <summary>
        /// The version identifier for the AssessmentFamily.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="version")]
        public int? Version { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// contentStandard
        /// </summary> 
        [DataMember(Name = "contentStandard")]
        public AssessmentFamilyContentStandard AssessmentFamilyContentStandard { get; set; }

        IAssessmentFamilyContentStandard IAssessmentFamily.AssessmentFamilyContentStandard
        {
            get { return AssessmentFamilyContentStandard; }
            set { AssessmentFamilyContentStandard = (AssessmentFamilyContentStandard) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<AssessmentFamilyAssessmentPeriod> _assessmentFamilyAssessmentPeriods;
        private IList<IAssessmentFamilyAssessmentPeriod> _assessmentFamilyAssessmentPeriodsCovariant;

        [DataMember(Name="assessmentPeriods")]
        public IList<AssessmentFamilyAssessmentPeriod> AssessmentFamilyAssessmentPeriods 
        { 
            get { return _assessmentFamilyAssessmentPeriods; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<AssessmentFamilyAssessmentPeriod>(value,
                    (s, e) => ((IAssessmentFamilyAssessmentPeriod)e.Item).AssessmentFamily = this);
                _assessmentFamilyAssessmentPeriods = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IAssessmentFamilyAssessmentPeriod, AssessmentFamilyAssessmentPeriod>(value);
                covariantList.ItemAdded += (s, e) => ((IAssessmentFamilyAssessmentPeriod)e.Item).AssessmentFamily = this;
                _assessmentFamilyAssessmentPeriodsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IAssessmentFamilyAssessmentPeriod> IAssessmentFamily.AssessmentFamilyAssessmentPeriods
        {
            get { return _assessmentFamilyAssessmentPeriodsCovariant; }
            set { AssessmentFamilyAssessmentPeriods = new List<AssessmentFamilyAssessmentPeriod>(value.Cast<AssessmentFamilyAssessmentPeriod>()); }
        }

        private IList<AssessmentFamilyIdentificationCode> _assessmentFamilyIdentificationCodes;
        private IList<IAssessmentFamilyIdentificationCode> _assessmentFamilyIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes")]
        public IList<AssessmentFamilyIdentificationCode> AssessmentFamilyIdentificationCodes 
        { 
            get { return _assessmentFamilyIdentificationCodes; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<AssessmentFamilyIdentificationCode>(value,
                    (s, e) => ((IAssessmentFamilyIdentificationCode)e.Item).AssessmentFamily = this);
                _assessmentFamilyIdentificationCodes = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IAssessmentFamilyIdentificationCode, AssessmentFamilyIdentificationCode>(value);
                covariantList.ItemAdded += (s, e) => ((IAssessmentFamilyIdentificationCode)e.Item).AssessmentFamily = this;
                _assessmentFamilyIdentificationCodesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IAssessmentFamilyIdentificationCode> IAssessmentFamily.AssessmentFamilyIdentificationCodes
        {
            get { return _assessmentFamilyIdentificationCodesCovariant; }
            set { AssessmentFamilyIdentificationCodes = new List<AssessmentFamilyIdentificationCode>(value.Cast<AssessmentFamilyIdentificationCode>()); }
        }

        private IList<AssessmentFamilyLanguage> _assessmentFamilyLanguages;
        private IList<IAssessmentFamilyLanguage> _assessmentFamilyLanguagesCovariant;

        [DataMember(Name="languages")]
        public IList<AssessmentFamilyLanguage> AssessmentFamilyLanguages 
        { 
            get { return _assessmentFamilyLanguages; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<AssessmentFamilyLanguage>(value,
                    (s, e) => ((IAssessmentFamilyLanguage)e.Item).AssessmentFamily = this);
                _assessmentFamilyLanguages = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IAssessmentFamilyLanguage, AssessmentFamilyLanguage>(value);
                covariantList.ItemAdded += (s, e) => ((IAssessmentFamilyLanguage)e.Item).AssessmentFamily = this;
                _assessmentFamilyLanguagesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IAssessmentFamilyLanguage> IAssessmentFamily.AssessmentFamilyLanguages
        {
            get { return _assessmentFamilyLanguagesCovariant; }
            set { AssessmentFamilyLanguages = new List<AssessmentFamilyLanguage>(value.Cast<AssessmentFamilyLanguage>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_assessmentFamilyAssessmentPeriods != null) foreach (var item in _assessmentFamilyAssessmentPeriods)
            {
                item.AssessmentFamily = this;
            }
            
            if (_assessmentFamilyIdentificationCodes != null) foreach (var item in _assessmentFamilyIdentificationCodes)
            {
                item.AssessmentFamily = this;
            }
            
            if (_assessmentFamilyLanguages != null) foreach (var item in _assessmentFamilyLanguages)
            {
                item.AssessmentFamily = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentFamily)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentFamily) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAssessmentFamilySynchronizationSourceSupport.IsAcademicSubjectDescriptorSupported            { get { return true; } set { } }
 
        bool IAssessmentFamilySynchronizationSourceSupport.IsAssessedGradeLevelDescriptorSupported         { get { return true; } set { } }
 
        bool IAssessmentFamilySynchronizationSourceSupport.IsAssessmentCategoryDescriptorSupported         { get { return true; } set { } }
 
        bool IAssessmentFamilySynchronizationSourceSupport.IsAssessmentFamilyAssessmentPeriodsSupported    { get { return true; } set { } }
 
        bool IAssessmentFamilySynchronizationSourceSupport.IsAssessmentFamilyContentStandardSupported      { get { return true; } set { } }
 
        bool IAssessmentFamilySynchronizationSourceSupport.IsAssessmentFamilyIdentificationCodesSupported  { get { return true; } set { } }
 
        bool IAssessmentFamilySynchronizationSourceSupport.IsAssessmentFamilyLanguagesSupported            { get { return true; } set { } }
 
        bool IAssessmentFamilySynchronizationSourceSupport.IsLowestAssessedGradeLevelDescriptorSupported   { get { return true; } set { } }
 
        bool IAssessmentFamilySynchronizationSourceSupport.IsNamespaceSupported                            { get { return true; } set { } }
 
        bool IAssessmentFamilySynchronizationSourceSupport.IsNomenclatureSupported                         { get { return true; } set { } }
 
        bool IAssessmentFamilySynchronizationSourceSupport.IsParentAssessmentFamilyTitleSupported          { get { return true; } set { } }
 
        bool IAssessmentFamilySynchronizationSourceSupport.IsRevisionDateSupported                         { get { return true; } set { } }
 
        bool IAssessmentFamilySynchronizationSourceSupport.IsVersionSupported                              { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IAssessmentFamilyAssessmentPeriod, bool> IAssessmentFamilySynchronizationSourceSupport.IsAssessmentFamilyAssessmentPeriodIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IAssessmentFamilyIdentificationCode, bool> IAssessmentFamilySynchronizationSourceSupport.IsAssessmentFamilyIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IAssessmentFamilyLanguage, bool> IAssessmentFamilySynchronizationSourceSupport.IsAssessmentFamilyLanguageIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.AssessmentFamilyAssessmentPeriod table of the AssessmentFamily aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentFamilyAssessmentPeriod : IAssessmentFamilyAssessmentPeriod, IAssessmentFamilyAssessmentPeriodSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IAssessmentFamily _assessmentFamily;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IAssessmentFamily IAssessmentFamilyAssessmentPeriod.AssessmentFamily
        {
            get { return _assessmentFamily; }
            set { _assessmentFamily = value; }
        }

        internal IAssessmentFamily AssessmentFamily
        {
            set { _assessmentFamily = value; }
        }

        /// <summary>
        /// The periods or windows defined in which an assessment is supposed to be administered.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="assessmentPeriodDescriptor"), NaturalKeyMember]
        public string AssessmentPeriodDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_assessmentFamily != null) 
                    hash = hash * 23 + _assessmentFamily.GetHashCode();
 
                // Standard Property
                if ((this as IAssessmentFamilyAssessmentPeriod).AssessmentPeriodDescriptor != null) 
                    hash = hash * 23 + (this as IAssessmentFamilyAssessmentPeriod).AssessmentPeriodDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentFamilyAssessmentPeriod)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentFamilyAssessmentPeriod) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.AssessmentFamilyContentStandard table of the AssessmentFamily aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentFamilyContentStandard : IAssessmentFamilyContentStandard, IAssessmentFamilyContentStandardSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public AssessmentFamilyContentStandard()
        {
            AssessmentFamilyContentStandardAuthors = new List<AssessmentFamilyContentStandardAuthor>();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _mandatingEducationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _mandatingEducationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitMandatingEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_mandatingEducationOrganizationReference == null && !_mandatingEducationOrganizationReferenceExplicitlyAssigned)
                    _mandatingEducationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _mandatingEducationOrganizationReference;
            }
        }

        [DataMember(Name="mandatingEducationOrganizationReference")]
        public EducationOrganization.EducationOrganizationReference MandatingEducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitMandatingEducationOrganizationReference != null
                    && (_mandatingEducationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitMandatingEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitMandatingEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _mandatingEducationOrganizationReferenceExplicitlyAssigned = true;
                _mandatingEducationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IAssessmentFamily _assessmentFamily;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IAssessmentFamily IAssessmentFamilyContentStandard.AssessmentFamily
        {
            get { return _assessmentFamily; }
            set { _assessmentFamily = value; }
        }

        internal IAssessmentFamily AssessmentFamily
        {
            set { _assessmentFamily = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_assessmentFamily != null) 
                    hash = hash * 23 + _assessmentFamily.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The beginning of the period during which this learning standard document is intended for use.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The end of the period during which this learning standard document is intended for use.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? IAssessmentFamilyContentStandard.MandatingEducationOrganizationId
        {
            get
            {
                if (ImplicitMandatingEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitMandatingEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitMandatingEducationOrganizationReference.EducationOrganizationId;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // MandatingEducationOrganization
                _mandatingEducationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitMandatingEducationOrganizationReference.EducationOrganizationId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The date on which this content was first published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="publicationDate")]
        public DateTime? PublicationDate { get; set; }

        /// <summary>
        /// The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="publicationStatusType")]
        public string PublicationStatusType { get; set; }

        /// <summary>
        /// The year at which this content was first published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="publicationYear")]
        public short? PublicationYear { get; set; }

        /// <summary>
        /// The name of the content standard, for example Common Core.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// An unambiguous reference to the standards using a network-resolvable URI.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="uri")]
        public string URI { get; set; }

        /// <summary>
        /// The version identifier for the content.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="version")]
        public string Version { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<AssessmentFamilyContentStandardAuthor> _assessmentFamilyContentStandardAuthors;
        private IList<IAssessmentFamilyContentStandardAuthor> _assessmentFamilyContentStandardAuthorsCovariant;

        [DataMember(Name="authors")]
        public IList<AssessmentFamilyContentStandardAuthor> AssessmentFamilyContentStandardAuthors 
        { 
            get { return _assessmentFamilyContentStandardAuthors; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<AssessmentFamilyContentStandardAuthor>(value,
                    (s, e) => ((IAssessmentFamilyContentStandardAuthor)e.Item).AssessmentFamilyContentStandard = this);
                _assessmentFamilyContentStandardAuthors = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IAssessmentFamilyContentStandardAuthor, AssessmentFamilyContentStandardAuthor>(value);
                covariantList.ItemAdded += (s, e) => ((IAssessmentFamilyContentStandardAuthor)e.Item).AssessmentFamilyContentStandard = this;
                _assessmentFamilyContentStandardAuthorsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IAssessmentFamilyContentStandardAuthor> IAssessmentFamilyContentStandard.AssessmentFamilyContentStandardAuthors
        {
            get { return _assessmentFamilyContentStandardAuthorsCovariant; }
            set { AssessmentFamilyContentStandardAuthors = new List<AssessmentFamilyContentStandardAuthor>(value.Cast<AssessmentFamilyContentStandardAuthor>()); }
        }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_assessmentFamilyContentStandardAuthors != null) foreach (var item in _assessmentFamilyContentStandardAuthors)
            {
                item.AssessmentFamilyContentStandard = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentFamilyContentStandard)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentFamilyContentStandard) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAssessmentFamilyContentStandardSynchronizationSourceSupport.IsAssessmentFamilyContentStandardAuthorsSupported  { get { return true; } set { } }
 
        bool IAssessmentFamilyContentStandardSynchronizationSourceSupport.IsBeginDateSupported                               { get { return true; } set { } }
 
        bool IAssessmentFamilyContentStandardSynchronizationSourceSupport.IsEndDateSupported                                 { get { return true; } set { } }
 
        bool IAssessmentFamilyContentStandardSynchronizationSourceSupport.IsMandatingEducationOrganizationIdSupported        { get { return true; } set { } }
 
        bool IAssessmentFamilyContentStandardSynchronizationSourceSupport.IsPublicationDateSupported                         { get { return true; } set { } }
 
        bool IAssessmentFamilyContentStandardSynchronizationSourceSupport.IsPublicationStatusTypeSupported                   { get { return true; } set { } }
 
        bool IAssessmentFamilyContentStandardSynchronizationSourceSupport.IsPublicationYearSupported                         { get { return true; } set { } }
 
        bool IAssessmentFamilyContentStandardSynchronizationSourceSupport.IsTitleSupported                                   { get { return true; } set { } }
 
        bool IAssessmentFamilyContentStandardSynchronizationSourceSupport.IsURISupported                                     { get { return true; } set { } }
 
        bool IAssessmentFamilyContentStandardSynchronizationSourceSupport.IsVersionSupported                                 { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IAssessmentFamilyContentStandardAuthor, bool> IAssessmentFamilyContentStandardSynchronizationSourceSupport.IsAssessmentFamilyContentStandardAuthorIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.AssessmentFamilyContentStandardAuthor table of the AssessmentFamily aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentFamilyContentStandardAuthor : IAssessmentFamilyContentStandardAuthor, IAssessmentFamilyContentStandardAuthorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IAssessmentFamilyContentStandard _assessmentFamilyContentStandard;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IAssessmentFamilyContentStandard IAssessmentFamilyContentStandardAuthor.AssessmentFamilyContentStandard
        {
            get { return _assessmentFamilyContentStandard; }
            set { _assessmentFamilyContentStandard = value; }
        }

        internal IAssessmentFamilyContentStandard AssessmentFamilyContentStandard
        {
            set { _assessmentFamilyContentStandard = value; }
        }

        /// <summary>
        /// The person or organization chiefly responsible for the intellectual content of the standard.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="author"), NaturalKeyMember]
        public string Author { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_assessmentFamilyContentStandard != null) 
                    hash = hash * 23 + _assessmentFamilyContentStandard.GetHashCode();
 
                // Standard Property
                if ((this as IAssessmentFamilyContentStandardAuthor).Author != null) 
                    hash = hash * 23 + (this as IAssessmentFamilyContentStandardAuthor).Author.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentFamilyContentStandardAuthor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentFamilyContentStandardAuthor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.AssessmentFamilyIdentificationCode table of the AssessmentFamily aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentFamilyIdentificationCode : IAssessmentFamilyIdentificationCode, IAssessmentFamilyIdentificationCodeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IAssessmentFamily _assessmentFamily;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IAssessmentFamily IAssessmentFamilyIdentificationCode.AssessmentFamily
        {
            get { return _assessmentFamily; }
            set { _assessmentFamily = value; }
        }

        internal IAssessmentFamily AssessmentFamily
        {
            set { _assessmentFamily = value; }
        }

        /// <summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to an assessment.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="assessmentIdentificationSystemDescriptor"), NaturalKeyMember]
        public string AssessmentIdentificationSystemDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_assessmentFamily != null) 
                    hash = hash * 23 + _assessmentFamily.GetHashCode();
 
                // Standard Property
                if ((this as IAssessmentFamilyIdentificationCode).AssessmentIdentificationSystemDescriptor != null) 
                    hash = hash * 23 + (this as IAssessmentFamilyIdentificationCode).AssessmentIdentificationSystemDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The organization code or name assigning the assessment identification code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assigningOrganizationIdentificationCode")]
        public string AssigningOrganizationIdentificationCode { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode")]
        public string IdentificationCode { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentFamilyIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentFamilyIdentificationCode) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAssessmentFamilyIdentificationCodeSynchronizationSourceSupport.IsAssigningOrganizationIdentificationCodeSupported  { get { return true; } set { } }
 
        bool IAssessmentFamilyIdentificationCodeSynchronizationSourceSupport.IsIdentificationCodeSupported                       { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.AssessmentFamilyLanguage table of the AssessmentFamily aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentFamilyLanguage : IAssessmentFamilyLanguage, IAssessmentFamilyLanguageSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IAssessmentFamily _assessmentFamily;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IAssessmentFamily IAssessmentFamilyLanguage.AssessmentFamily
        {
            get { return _assessmentFamily; }
            set { _assessmentFamily = value; }
        }

        internal IAssessmentFamily AssessmentFamily
        {
            set { _assessmentFamily = value; }
        }

        /// <summary>
        /// An indication of the languages in which the AssessmentFamily is designed.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageDescriptor"), NaturalKeyMember]
        public string LanguageDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_assessmentFamily != null) 
                    hash = hash * 23 + _assessmentFamily.GetHashCode();
 
                // Standard Property
                if ((this as IAssessmentFamilyLanguage).LanguageDescriptor != null) 
                    hash = hash * 23 + (this as IAssessmentFamilyLanguage).LanguageDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentFamilyLanguage)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentFamilyLanguage) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: AssessmentIdentificationSystemDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.AssessmentIdentificationSystemDescriptor
{
    /// <summary>
    /// A class which represents the edfi.AssessmentIdentificationSystemDescriptor table of the AssessmentIdentificationSystemDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentIdentificationSystemDescriptor : IAssessmentIdentificationSystemDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IAssessmentIdentificationSystemDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AssessmentIdentificationSystemDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assessmentIdentificationSystemDescriptorId"), NaturalKeyMember]
        public int AssessmentIdentificationSystemDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return AssessmentIdentificationSystemDescriptorId; }
            set { AssessmentIdentificationSystemDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IAssessmentIdentificationSystemDescriptor).AssessmentIdentificationSystemDescriptorId != null) 
                    hash = hash * 23 + (this as IAssessmentIdentificationSystemDescriptor).AssessmentIdentificationSystemDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="assessmentIdentificationSystemType")]
        public string AssessmentIdentificationSystemType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentIdentificationSystemDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentIdentificationSystemDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAssessmentIdentificationSystemDescriptorSynchronizationSourceSupport.IsAssessmentIdentificationSystemTypeSupported  { get { return true; } set { } }
 
        bool IAssessmentIdentificationSystemDescriptorSynchronizationSourceSupport.IsCodeValueSupported                           { get { return true; } set { } }
 
        bool IAssessmentIdentificationSystemDescriptorSynchronizationSourceSupport.IsDescriptionSupported                         { get { return true; } set { } }
 
        bool IAssessmentIdentificationSystemDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported                  { get { return true; } set { } }
 
        bool IAssessmentIdentificationSystemDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported                    { get { return true; } set { } }
 
        bool IAssessmentIdentificationSystemDescriptorSynchronizationSourceSupport.IsNamespaceSupported                           { get { return true; } set { } }
 
        bool IAssessmentIdentificationSystemDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported                   { get { return true; } set { } }
 
        bool IAssessmentIdentificationSystemDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported                    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AssessmentIdentificationSystemType

namespace EdFi.Ods.Api.Models.Resources.V2.AssessmentIdentificationSystemType
{
    /// <summary>
    /// A class which represents the edfi.AssessmentIdentificationSystemType table of the AssessmentIdentificationSystemType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentIdentificationSystemType : IAssessmentIdentificationSystemType, IHasETag, IAssessmentIdentificationSystemTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AssessmentIdentificationSystemType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for AssessmentIdentificationSystem
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assessmentIdentificationSystemTypeId"), NaturalKeyMember]
        public int AssessmentIdentificationSystemTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IAssessmentIdentificationSystemType).AssessmentIdentificationSystemTypeId != null) 
                    hash = hash * 23 + (this as IAssessmentIdentificationSystemType).AssessmentIdentificationSystemTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the AssessmentIdentificationSystem type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the AssessmentIdentificationSystem type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentIdentificationSystemType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentIdentificationSystemType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAssessmentIdentificationSystemTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IAssessmentIdentificationSystemTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IAssessmentIdentificationSystemTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AssessmentItem

namespace EdFi.Ods.Api.Models.Resources.V2.AssessmentItem
{
    /// <summary>
    /// Represents a reference to the AssessmentItem resource.
    /// </summary>
    [DataContract]
    public class AssessmentItemReference
    {
        [DataMember(Name="assessmentIdentifier"), NaturalKeyMember]
        public string AssessmentIdentifier { get; set; }

        [DataMember(Name="identificationCode"), NaturalKeyMember]
        public string IdentificationCode { get; set; }

        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "AssessmentItem",
                            Href = "/assessmentItems"
                                    + "?assessmentIdentifier=" + WebUtility.UrlEncode(AssessmentIdentifier)            
                                    + "&identificationCode=" + WebUtility.UrlEncode(IdentificationCode)            
                                    + "&namespace=" + WebUtility.UrlEncode(Namespace)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return AssessmentIdentifier != default(string)
                && IdentificationCode != default(string)
                && Namespace != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.AssessmentItem table of the AssessmentItem aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentItem : IAssessmentItem, IHasETag, IAssessmentItemSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public AssessmentItem()
        {
            AssessmentItemLearningStandards = new List<AssessmentItemLearningStandard>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the AssessmentItem resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _assessmentReferenceExplicitlyAssigned;
        private Assessment.AssessmentReference _assessmentReference;
        private Assessment.AssessmentReference ImplicitAssessmentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_assessmentReference == null && !_assessmentReferenceExplicitlyAssigned)
                    _assessmentReference = new Assessment.AssessmentReference();

                return _assessmentReference;
            }
        }

        [DataMember(Name="assessmentReference")][NaturalKeyMember]
        public Assessment.AssessmentReference AssessmentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitAssessmentReference != null
                    && (_assessmentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitAssessmentReference.IsReferenceFullyDefined()))
                    return ImplicitAssessmentReference;

                return null;
            }
            set 
            { 
                _assessmentReferenceExplicitlyAssigned = true;
                _assessmentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IAssessmentItem.AssessmentIdentifier
        {
            get
            {
                if (ImplicitAssessmentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAssessmentReference.IsReferenceFullyDefined()))
                    return ImplicitAssessmentReference.AssessmentIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Assessment
                _assessmentReferenceExplicitlyAssigned = false;
                ImplicitAssessmentReference.AssessmentIdentifier = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode"), NaturalKeyMember]
        public string IdentificationCode { get; set; }

        /// <summary>
        /// Namespace for the Assessment.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IAssessmentItem.Namespace
        {
            get
            {
                if (ImplicitAssessmentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAssessmentReference.IsReferenceFullyDefined()))
                    return ImplicitAssessmentReference.Namespace;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Assessment
                _assessmentReferenceExplicitlyAssigned = false;
                ImplicitAssessmentReference.Namespace = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IAssessmentItem).AssessmentIdentifier != null) 
                    hash = hash * 23 + (this as IAssessmentItem).AssessmentIdentifier.GetHashCode();
 
                // Standard Property
                if ((this as IAssessmentItem).IdentificationCode != null) 
                    hash = hash * 23 + (this as IAssessmentItem).IdentificationCode.GetHashCode();
 
                //Referenced Property
                if ((this as IAssessmentItem).Namespace != null) 
                    hash = hash * 23 + (this as IAssessmentItem).Namespace.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Category or type of the AssessmentItem. For example:          Multiple choice          Analytic          Prose          ...
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="categoryType")]
        public string AssessmentItemCategoryType { get; set; }

        /// <summary>
        /// The correct response for the AssessmentItem.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="correctResponse")]
        public string CorrectResponse { get; set; }

        /// <summary>
        /// The duration of time allotted for the AssessmentItem.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="expectedTimeAssessed")]
        public string ExpectedTimeAssessed { get; set; }

        /// <summary>
        /// The maximum raw score achievable across all assessment items that are correct and scored at the maximum.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maxRawScore")]
        public int? MaxRawScore { get; set; }

        /// <summary>
        /// Reflects the specific nomenclature used for AssessmentItem.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nomenclature")]
        public string Nomenclature { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<AssessmentItemLearningStandard> _assessmentItemLearningStandards;
        private IList<IAssessmentItemLearningStandard> _assessmentItemLearningStandardsCovariant;

        [DataMember(Name="learningStandards")]
        public IList<AssessmentItemLearningStandard> AssessmentItemLearningStandards 
        { 
            get { return _assessmentItemLearningStandards; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<AssessmentItemLearningStandard>(value,
                    (s, e) => ((IAssessmentItemLearningStandard)e.Item).AssessmentItem = this);
                _assessmentItemLearningStandards = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IAssessmentItemLearningStandard, AssessmentItemLearningStandard>(value);
                covariantList.ItemAdded += (s, e) => ((IAssessmentItemLearningStandard)e.Item).AssessmentItem = this;
                _assessmentItemLearningStandardsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IAssessmentItemLearningStandard> IAssessmentItem.AssessmentItemLearningStandards
        {
            get { return _assessmentItemLearningStandardsCovariant; }
            set { AssessmentItemLearningStandards = new List<AssessmentItemLearningStandard>(value.Cast<AssessmentItemLearningStandard>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_assessmentItemLearningStandards != null) foreach (var item in _assessmentItemLearningStandards)
            {
                item.AssessmentItem = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentItem)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentItem) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAssessmentItemSynchronizationSourceSupport.IsAssessmentItemCategoryTypeSupported       { get { return true; } set { } }
 
        bool IAssessmentItemSynchronizationSourceSupport.IsAssessmentItemLearningStandardsSupported  { get { return true; } set { } }
 
        bool IAssessmentItemSynchronizationSourceSupport.IsCorrectResponseSupported                  { get { return true; } set { } }
 
        bool IAssessmentItemSynchronizationSourceSupport.IsExpectedTimeAssessedSupported             { get { return true; } set { } }
 
        bool IAssessmentItemSynchronizationSourceSupport.IsMaxRawScoreSupported                      { get { return true; } set { } }
 
        bool IAssessmentItemSynchronizationSourceSupport.IsNomenclatureSupported                     { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IAssessmentItemLearningStandard, bool> IAssessmentItemSynchronizationSourceSupport.IsAssessmentItemLearningStandardIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.AssessmentItemLearningStandard table of the AssessmentItem aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentItemLearningStandard : IAssessmentItemLearningStandard, IAssessmentItemLearningStandardSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _learningStandardReferenceExplicitlyAssigned;
        private LearningStandard.LearningStandardReference _learningStandardReference;
        private LearningStandard.LearningStandardReference ImplicitLearningStandardReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_learningStandardReference == null && !_learningStandardReferenceExplicitlyAssigned)
                    _learningStandardReference = new LearningStandard.LearningStandardReference();

                return _learningStandardReference;
            }
        }

        [DataMember(Name="learningStandardReference")][NaturalKeyMember]
        public LearningStandard.LearningStandardReference LearningStandardReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitLearningStandardReference != null
                    && (_learningStandardReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitLearningStandardReference.IsReferenceFullyDefined()))
                    return ImplicitLearningStandardReference;

                return null;
            }
            set 
            { 
                _learningStandardReferenceExplicitlyAssigned = true;
                _learningStandardReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IAssessmentItem _assessmentItem;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IAssessmentItem IAssessmentItemLearningStandard.AssessmentItem
        {
            get { return _assessmentItem; }
            set { _assessmentItem = value; }
        }

        internal IAssessmentItem AssessmentItem
        {
            set { _assessmentItem = value; }
        }

        /// <summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IAssessmentItemLearningStandard.LearningStandardId
        {
            get
            {
                if (ImplicitLearningStandardReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitLearningStandardReference.IsReferenceFullyDefined()))
                    return ImplicitLearningStandardReference.LearningStandardId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // LearningStandard
                _learningStandardReferenceExplicitlyAssigned = false;
                ImplicitLearningStandardReference.LearningStandardId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_assessmentItem != null) 
                    hash = hash * 23 + _assessmentItem.GetHashCode();
 
                //Referenced Property
                if ((this as IAssessmentItemLearningStandard).LearningStandardId != null) 
                    hash = hash * 23 + (this as IAssessmentItemLearningStandard).LearningStandardId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentItemLearningStandard)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentItemLearningStandard) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: AssessmentItemCategoryType

namespace EdFi.Ods.Api.Models.Resources.V2.AssessmentItemCategoryType
{
    /// <summary>
    /// A class which represents the edfi.AssessmentItemCategoryType table of the AssessmentItemCategoryType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentItemCategoryType : IAssessmentItemCategoryType, IHasETag, IAssessmentItemCategoryTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AssessmentItemCategoryType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for AssessmentItemCategory
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assessmentItemCategoryTypeId"), NaturalKeyMember]
        public int AssessmentItemCategoryTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IAssessmentItemCategoryType).AssessmentItemCategoryTypeId != null) 
                    hash = hash * 23 + (this as IAssessmentItemCategoryType).AssessmentItemCategoryTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the AssessmentItemCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the AssessmentItemCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentItemCategoryType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentItemCategoryType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAssessmentItemCategoryTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IAssessmentItemCategoryTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IAssessmentItemCategoryTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AssessmentItemResultType

namespace EdFi.Ods.Api.Models.Resources.V2.AssessmentItemResultType
{
    /// <summary>
    /// A class which represents the edfi.AssessmentItemResultType table of the AssessmentItemResultType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentItemResultType : IAssessmentItemResultType, IHasETag, IAssessmentItemResultTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AssessmentItemResultType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for AssessmentItemResult
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assessmentItemResultTypeId"), NaturalKeyMember]
        public int AssessmentItemResultTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IAssessmentItemResultType).AssessmentItemResultTypeId != null) 
                    hash = hash * 23 + (this as IAssessmentItemResultType).AssessmentItemResultTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the AssessmentItemResult type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the AssessmentItemResult type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentItemResultType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentItemResultType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAssessmentItemResultTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IAssessmentItemResultTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IAssessmentItemResultTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AssessmentPeriodDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.AssessmentPeriodDescriptor
{
    /// <summary>
    /// A class which represents the edfi.AssessmentPeriodDescriptor table of the AssessmentPeriodDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentPeriodDescriptor : IAssessmentPeriodDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IAssessmentPeriodDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AssessmentPeriodDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assessmentPeriodDescriptorId"), NaturalKeyMember]
        public int AssessmentPeriodDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return AssessmentPeriodDescriptorId; }
            set { AssessmentPeriodDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IAssessmentPeriodDescriptor).AssessmentPeriodDescriptorId != null) 
                    hash = hash * 23 + (this as IAssessmentPeriodDescriptor).AssessmentPeriodDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The first date the assessment is to be administered.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The last date the assessment is to be administered.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentPeriodDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentPeriodDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAssessmentPeriodDescriptorSynchronizationSourceSupport.IsBeginDateSupported           { get { return true; } set { } }
 
        bool IAssessmentPeriodDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
 
        bool IAssessmentPeriodDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
 
        bool IAssessmentPeriodDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
 
        bool IAssessmentPeriodDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
 
        bool IAssessmentPeriodDescriptorSynchronizationSourceSupport.IsEndDateSupported             { get { return true; } set { } }
 
        bool IAssessmentPeriodDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
 
        bool IAssessmentPeriodDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
 
        bool IAssessmentPeriodDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AssessmentReportingMethodType

namespace EdFi.Ods.Api.Models.Resources.V2.AssessmentReportingMethodType
{
    /// <summary>
    /// A class which represents the edfi.AssessmentReportingMethodType table of the AssessmentReportingMethodType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AssessmentReportingMethodType : IAssessmentReportingMethodType, IHasETag, IAssessmentReportingMethodTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AssessmentReportingMethodType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for AssessmentReportingMethod
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assessmentReportingMethodTypeId"), NaturalKeyMember]
        public int AssessmentReportingMethodTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IAssessmentReportingMethodType).AssessmentReportingMethodTypeId != null) 
                    hash = hash * 23 + (this as IAssessmentReportingMethodType).AssessmentReportingMethodTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the AssessmentReportingMethod type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the AssessmentReportingMethod type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAssessmentReportingMethodType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAssessmentReportingMethodType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAssessmentReportingMethodTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IAssessmentReportingMethodTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IAssessmentReportingMethodTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AttendanceEventCategoryDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.AttendanceEventCategoryDescriptor
{
    /// <summary>
    /// A class which represents the edfi.AttendanceEventCategoryDescriptor table of the AttendanceEventCategoryDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AttendanceEventCategoryDescriptor : IAttendanceEventCategoryDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IAttendanceEventCategoryDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AttendanceEventCategoryDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="attendanceEventCategoryDescriptorId"), NaturalKeyMember]
        public int AttendanceEventCategoryDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return AttendanceEventCategoryDescriptorId; }
            set { AttendanceEventCategoryDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IAttendanceEventCategoryDescriptor).AttendanceEventCategoryDescriptorId != null) 
                    hash = hash * 23 + (this as IAttendanceEventCategoryDescriptor).AttendanceEventCategoryDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="attendanceEventCategoryType")]
        public string AttendanceEventCategoryType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAttendanceEventCategoryDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAttendanceEventCategoryDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAttendanceEventCategoryDescriptorSynchronizationSourceSupport.IsAttendanceEventCategoryTypeSupported  { get { return true; } set { } }
 
        bool IAttendanceEventCategoryDescriptorSynchronizationSourceSupport.IsCodeValueSupported                    { get { return true; } set { } }
 
        bool IAttendanceEventCategoryDescriptorSynchronizationSourceSupport.IsDescriptionSupported                  { get { return true; } set { } }
 
        bool IAttendanceEventCategoryDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported           { get { return true; } set { } }
 
        bool IAttendanceEventCategoryDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported             { get { return true; } set { } }
 
        bool IAttendanceEventCategoryDescriptorSynchronizationSourceSupport.IsNamespaceSupported                    { get { return true; } set { } }
 
        bool IAttendanceEventCategoryDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported            { get { return true; } set { } }
 
        bool IAttendanceEventCategoryDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported             { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: AttendanceEventCategoryType

namespace EdFi.Ods.Api.Models.Resources.V2.AttendanceEventCategoryType
{
    /// <summary>
    /// A class which represents the edfi.AttendanceEventCategoryType table of the AttendanceEventCategoryType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class AttendanceEventCategoryType : IAttendanceEventCategoryType, IHasETag, IAttendanceEventCategoryTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the AttendanceEventCategoryType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for AttendanceEventCategory
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="attendanceEventCategoryTypeId"), NaturalKeyMember]
        public int AttendanceEventCategoryTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IAttendanceEventCategoryType).AttendanceEventCategoryTypeId != null) 
                    hash = hash * 23 + (this as IAttendanceEventCategoryType).AttendanceEventCategoryTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the AttendanceEventCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the AttendanceEventCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IAttendanceEventCategoryType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IAttendanceEventCategoryType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IAttendanceEventCategoryTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IAttendanceEventCategoryTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IAttendanceEventCategoryTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: BehaviorDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.BehaviorDescriptor
{
    /// <summary>
    /// A class which represents the edfi.BehaviorDescriptor table of the BehaviorDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class BehaviorDescriptor : IBehaviorDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IBehaviorDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the BehaviorDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="behaviorDescriptorId"), NaturalKeyMember]
        public int BehaviorDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return BehaviorDescriptorId; }
            set { BehaviorDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IBehaviorDescriptor).BehaviorDescriptorId != null) 
                    hash = hash * 23 + (this as IBehaviorDescriptor).BehaviorDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="behaviorType")]
        public string BehaviorType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IBehaviorDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IBehaviorDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IBehaviorDescriptorSynchronizationSourceSupport.IsBehaviorTypeSupported        { get { return true; } set { } }
 
        bool IBehaviorDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
 
        bool IBehaviorDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
 
        bool IBehaviorDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
 
        bool IBehaviorDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
 
        bool IBehaviorDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
 
        bool IBehaviorDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
 
        bool IBehaviorDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: BehaviorType

namespace EdFi.Ods.Api.Models.Resources.V2.BehaviorType
{
    /// <summary>
    /// A class which represents the edfi.BehaviorType table of the BehaviorType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class BehaviorType : IBehaviorType, IHasETag, IBehaviorTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the BehaviorType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Behavior
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="behaviorTypeId"), NaturalKeyMember]
        public int BehaviorTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IBehaviorType).BehaviorTypeId != null) 
                    hash = hash * 23 + (this as IBehaviorType).BehaviorTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Behavior type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Behavior type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IBehaviorType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IBehaviorType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IBehaviorTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IBehaviorTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IBehaviorTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: BellSchedule

namespace EdFi.Ods.Api.Models.Resources.V2.BellSchedule
{
    /// <summary>
    /// Represents a reference to the BellSchedule resource.
    /// </summary>
    [DataContract]
    public class BellScheduleReference
    {
        [DataMember(Name="name"), NaturalKeyMember]
        public string BellScheduleName { get; set; }

        [DataMember(Name="date"), NaturalKeyMember]
        public DateTime Date { get; set; }

        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "BellSchedule",
                            Href = "/bellSchedules"
                                    + "?name=" + WebUtility.UrlEncode(BellScheduleName)            
                                    + "&date=" + JsonConvert.SerializeObject(Date).Replace("\"", string.Empty)            
                                    + "&gradeLevelDescriptor=" + WebUtility.UrlEncode(GradeLevelDescriptor)            
                                    + "&schoolId=" + SchoolId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BellScheduleName != default(string)
                && Date != default(DateTime)
                && GradeLevelDescriptor != default(string)
                && SchoolId != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.BellSchedule table of the BellSchedule aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class BellSchedule : IBellSchedule, IHasETag, IBellScheduleSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public BellSchedule()
        {
            BellScheduleMeetingTimes = new List<BellScheduleMeetingTime>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the BellSchedule resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _calendarDateReferenceExplicitlyAssigned;
        private CalendarDate.CalendarDateReference _calendarDateReference;
        private CalendarDate.CalendarDateReference ImplicitCalendarDateReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_calendarDateReference == null && !_calendarDateReferenceExplicitlyAssigned)
                    _calendarDateReference = new CalendarDate.CalendarDateReference();

                return _calendarDateReference;
            }
        }

        [DataMember(Name="calendarDateReference")][NaturalKeyMember]
        public CalendarDate.CalendarDateReference CalendarDateReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitCalendarDateReference != null
                    && (_calendarDateReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCalendarDateReference.IsReferenceFullyDefined()))
                    return ImplicitCalendarDateReference;

                return null;
            }
            set 
            { 
                _calendarDateReferenceExplicitlyAssigned = true;
                _calendarDateReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Name or title of the BellSchedule.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="name"), NaturalKeyMember]
        public string BellScheduleName { get; set; }

        /// <summary>
        /// The month, day, and year of the CalendarDate.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime IBellSchedule.Date
        {
            get
            {
                if (ImplicitCalendarDateReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCalendarDateReference.IsReferenceFullyDefined()))
                    return ImplicitCalendarDateReference.Date;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // CalendarDate
                _calendarDateReferenceExplicitlyAssigned = false;
                ImplicitCalendarDateReference.Date = value;
            }
        }

        /// <summary>
        /// The grade levels the particular BellSchedule applies to.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IBellSchedule.SchoolId
        {
            get
            {
                if (ImplicitCalendarDateReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCalendarDateReference.IsReferenceFullyDefined()))
                    return ImplicitCalendarDateReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // CalendarDate
                _calendarDateReferenceExplicitlyAssigned = false;
                ImplicitCalendarDateReference.SchoolId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IBellSchedule).BellScheduleName != null) 
                    hash = hash * 23 + (this as IBellSchedule).BellScheduleName.GetHashCode();
 
                //Referenced Property
                if ((this as IBellSchedule).Date != null) 
                    hash = hash * 23 + (this as IBellSchedule).Date.GetHashCode();
 
                // Standard Property
                if ((this as IBellSchedule).GradeLevelDescriptor != null) 
                    hash = hash * 23 + (this as IBellSchedule).GradeLevelDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IBellSchedule).SchoolId != null) 
                    hash = hash * 23 + (this as IBellSchedule).SchoolId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<BellScheduleMeetingTime> _bellScheduleMeetingTimes;
        private IList<IBellScheduleMeetingTime> _bellScheduleMeetingTimesCovariant;

        [DataMember(Name="meetingTimes")]
        public IList<BellScheduleMeetingTime> BellScheduleMeetingTimes 
        { 
            get { return _bellScheduleMeetingTimes; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<BellScheduleMeetingTime>(value,
                    (s, e) => ((IBellScheduleMeetingTime)e.Item).BellSchedule = this);
                _bellScheduleMeetingTimes = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IBellScheduleMeetingTime, BellScheduleMeetingTime>(value);
                covariantList.ItemAdded += (s, e) => ((IBellScheduleMeetingTime)e.Item).BellSchedule = this;
                _bellScheduleMeetingTimesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IBellScheduleMeetingTime> IBellSchedule.BellScheduleMeetingTimes
        {
            get { return _bellScheduleMeetingTimesCovariant; }
            set { BellScheduleMeetingTimes = new List<BellScheduleMeetingTime>(value.Cast<BellScheduleMeetingTime>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_bellScheduleMeetingTimes != null) foreach (var item in _bellScheduleMeetingTimes)
            {
                item.BellSchedule = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IBellSchedule)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IBellSchedule) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IBellScheduleSynchronizationSourceSupport.IsBellScheduleMeetingTimesSupported  { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IBellScheduleMeetingTime, bool> IBellScheduleSynchronizationSourceSupport.IsBellScheduleMeetingTimeIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// Represents a reference from the BellScheduleMeetingTime entity to the ClassPeriod resource.
    /// </summary>
    [DataContract]
    public class BellScheduleMeetingTimeToClassPeriodReference
    {
        private IBellScheduleMeetingTime backReference;

        // Parameterless constructor for deserialization
        public BellScheduleMeetingTimeToClassPeriodReference() { }

        // Constructor for inline initialization in parent
        public BellScheduleMeetingTimeToClassPeriodReference(IBellScheduleMeetingTime backReference)
        {
            this.backReference = backReference;
        }

        // Expose back reference internally for access after JSON deserialization to enable link generation
        internal IBellScheduleMeetingTime BackReference
        {
            get { return backReference; }
            set { backReference = value; }
        }


        [DataMember(Name="name"), NaturalKeyMember]
        public string ClassPeriodName { get; set; }
        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Can't generate a link without the back reference
                    if (backReference == null)
                        return null;
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "ClassPeriod",
                            Href = "/classPeriods"
                                    + "?name=" + WebUtility.UrlEncode(ClassPeriodName)            
                                    + "&schoolId=" + backReference.BellSchedule.SchoolId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ClassPeriodName != default(string)
                && backReference.BellSchedule != null && backReference.BellSchedule.SchoolId != default(int)
                ;
        }
    }

    /// <summary>
    /// A class which represents the edfi.BellScheduleMeetingTime table of the BellSchedule aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class BellScheduleMeetingTime : IBellScheduleMeetingTime, IBellScheduleMeetingTimeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _classPeriodReferenceExplicitlyAssigned;
        private BellScheduleMeetingTimeToClassPeriodReference _classPeriodReference;
        private BellScheduleMeetingTimeToClassPeriodReference ImplicitClassPeriodReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_classPeriodReference == null && !_classPeriodReferenceExplicitlyAssigned)
                    _classPeriodReference = new BellScheduleMeetingTimeToClassPeriodReference(this);

                return _classPeriodReference;
            }
        }

        [DataMember(Name="classPeriodReference")][NaturalKeyMember]
        public BellScheduleMeetingTimeToClassPeriodReference ClassPeriodReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitClassPeriodReference != null
                    && (_classPeriodReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitClassPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitClassPeriodReference;

                return null;
            }
            set 
            { 
                _classPeriodReferenceExplicitlyAssigned = true;
                _classPeriodReference = value;
                _classPeriodReference.BackReference = this;             }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IBellSchedule _bellSchedule;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IBellSchedule IBellScheduleMeetingTime.BellSchedule
        {
            get { return _bellSchedule; }
            set { _bellSchedule = value; }
        }

        internal IBellSchedule BellSchedule
        {
            set { _bellSchedule = value; }
        }

        /// <summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IBellScheduleMeetingTime.ClassPeriodName
        {
            get
            {
                if (ImplicitClassPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitClassPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitClassPeriodReference.ClassPeriodName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ClassPeriod
                _classPeriodReferenceExplicitlyAssigned = false;
                ImplicitClassPeriodReference.ClassPeriodName = value;
            }
        }

        /// <summary>
        /// An indication of the time of day the class begins.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="startTime"), NaturalKeyMember][JsonConverter(typeof(UtcTimeConverter))]
        public TimeSpan StartTime { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_bellSchedule != null) 
                    hash = hash * 23 + _bellSchedule.GetHashCode();
 
                //Referenced Property
                if ((this as IBellScheduleMeetingTime).ClassPeriodName != null) 
                    hash = hash * 23 + (this as IBellScheduleMeetingTime).ClassPeriodName.GetHashCode();
 
                // Standard Property
                if ((this as IBellScheduleMeetingTime).StartTime != null) 
                    hash = hash * 23 + (this as IBellScheduleMeetingTime).StartTime.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An alternate name for the day (e.g., Red, Blue).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="alternateDayName")]
        public string AlternateDayName { get; set; }

        /// <summary>
        /// An indication of the time of day the class ends.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endTime")][JsonConverter(typeof(UtcTimeConverter))]
        public TimeSpan EndTime { get; set; }

        /// <summary>
        /// Indicator of whether this meeting time is used for official daily attendance.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="officialAttendancePeriod")]
        public bool? OfficialAttendancePeriod { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_classPeriodReference != null)
                _classPeriodReference.BackReference = this;
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IBellScheduleMeetingTime)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IBellScheduleMeetingTime) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IBellScheduleMeetingTimeSynchronizationSourceSupport.IsAlternateDayNameSupported          { get { return true; } set { } }
 
        bool IBellScheduleMeetingTimeSynchronizationSourceSupport.IsEndTimeSupported                   { get { return true; } set { } }
 
        bool IBellScheduleMeetingTimeSynchronizationSourceSupport.IsOfficialAttendancePeriodSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: Budget

namespace EdFi.Ods.Api.Models.Resources.V2.Budget
{
    /// <summary>
    /// Represents a reference to the Budget resource.
    /// </summary>
    [DataContract]
    public class BudgetReference
    {
        [DataMember(Name="accountNumber"), NaturalKeyMember]
        public string AccountNumber { get; set; }

        [DataMember(Name="asOfDate"), NaturalKeyMember]
        public DateTime AsOfDate { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="fiscalYear"), NaturalKeyMember]
        public int FiscalYear { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "Budget",
                            Href = "/budgets"
                                    + "?accountNumber=" + WebUtility.UrlEncode(AccountNumber)            
                                    + "&asOfDate=" + JsonConvert.SerializeObject(AsOfDate).Replace("\"", string.Empty)            
                                    + "&educationOrganizationId=" + EducationOrganizationId            
                                    + "&fiscalYear=" + FiscalYear            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return AccountNumber != default(string)
                && AsOfDate != default(DateTime)
                && EducationOrganizationId != default(int)
                && FiscalYear != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Budget table of the Budget aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class Budget : IBudget, IHasETag, IBudgetSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the Budget resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _accountReferenceExplicitlyAssigned;
        private Account.AccountReference _accountReference;
        private Account.AccountReference ImplicitAccountReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_accountReference == null && !_accountReferenceExplicitlyAssigned)
                    _accountReference = new Account.AccountReference();

                return _accountReference;
            }
        }

        [DataMember(Name="accountReference")][NaturalKeyMember]
        public Account.AccountReference AccountReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitAccountReference != null
                    && (_accountReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitAccountReference.IsReferenceFullyDefined()))
                    return ImplicitAccountReference;

                return null;
            }
            set 
            { 
                _accountReferenceExplicitlyAssigned = true;
                _accountReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The alphanumeric string that identifies the account.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IBudget.AccountNumber
        {
            get
            {
                if (ImplicitAccountReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAccountReference.IsReferenceFullyDefined()))
                    return ImplicitAccountReference.AccountNumber;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Account
                _accountReferenceExplicitlyAssigned = false;
                ImplicitAccountReference.AccountNumber = value;
            }
        }

        /// <summary>
        /// The date of the reported budget element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="asOfDate"), NaturalKeyMember]
        public DateTime AsOfDate { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IBudget.EducationOrganizationId
        {
            get
            {
                if (ImplicitAccountReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAccountReference.IsReferenceFullyDefined()))
                    return ImplicitAccountReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Account
                _accountReferenceExplicitlyAssigned = false;
                ImplicitAccountReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The financial accounting year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IBudget.FiscalYear
        {
            get
            {
                if (ImplicitAccountReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAccountReference.IsReferenceFullyDefined()))
                    return ImplicitAccountReference.FiscalYear;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Account
                _accountReferenceExplicitlyAssigned = false;
                ImplicitAccountReference.FiscalYear = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IBudget).AccountNumber != null) 
                    hash = hash * 23 + (this as IBudget).AccountNumber.GetHashCode();
 
                // Standard Property
                if ((this as IBudget).AsOfDate != null) 
                    hash = hash * 23 + (this as IBudget).AsOfDate.GetHashCode();
 
                //Referenced Property
                if ((this as IBudget).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IBudget).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IBudget).FiscalYear != null) 
                    hash = hash * 23 + (this as IBudget).FiscalYear.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Amount budgeted for the account for this fiscal year.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="amount")][Range(typeof(decimal), "-922337203685477.5808", "922337203685477.5807")]
        public decimal Amount { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IBudget)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IBudget) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IBudgetSynchronizationSourceSupport.IsAmountSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CalendarDate

namespace EdFi.Ods.Api.Models.Resources.V2.CalendarDate
{
    /// <summary>
    /// Represents a reference to the CalendarDate resource.
    /// </summary>
    [DataContract]
    public class CalendarDateReference
    {
        [DataMember(Name="date"), NaturalKeyMember]
        public DateTime Date { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "CalendarDate",
                            Href = "/calendarDates"
                                    + "?date=" + JsonConvert.SerializeObject(Date).Replace("\"", string.Empty)            
                                    + "&schoolId=" + SchoolId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return Date != default(DateTime)
                && SchoolId != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.CalendarDate table of the CalendarDate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CalendarDate : ICalendarDate, IHasETag, ICalendarDateSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public CalendarDate()
        {
            CalendarDateCalendarEvents = new List<CalendarDateCalendarEvent>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CalendarDate resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _schoolReferenceExplicitlyAssigned;
        private School.SchoolReference _schoolReference;
        private School.SchoolReference ImplicitSchoolReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolReference == null && !_schoolReferenceExplicitlyAssigned)
                    _schoolReference = new School.SchoolReference();

                return _schoolReference;
            }
        }

        [DataMember(Name="schoolReference")][NaturalKeyMember]
        public School.SchoolReference SchoolReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolReference != null
                    && (_schoolReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference;

                return null;
            }
            set 
            { 
                _schoolReferenceExplicitlyAssigned = true;
                _schoolReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year of the CalendarDate.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="date"), NaturalKeyMember]
        public DateTime Date { get; set; }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int ICalendarDate.SchoolId
        {
            get
            {
                if (ImplicitSchoolReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // School
                _schoolReferenceExplicitlyAssigned = false;
                ImplicitSchoolReference.SchoolId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICalendarDate).Date != null) 
                    hash = hash * 23 + (this as ICalendarDate).Date.GetHashCode();
 
                //Referenced Property
                if ((this as ICalendarDate).SchoolId != null) 
                    hash = hash * 23 + (this as ICalendarDate).SchoolId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<CalendarDateCalendarEvent> _calendarDateCalendarEvents;
        private IList<ICalendarDateCalendarEvent> _calendarDateCalendarEventsCovariant;

        [DataMember(Name="calendarEvents")]
        public IList<CalendarDateCalendarEvent> CalendarDateCalendarEvents 
        { 
            get { return _calendarDateCalendarEvents; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<CalendarDateCalendarEvent>(value,
                    (s, e) => ((ICalendarDateCalendarEvent)e.Item).CalendarDate = this);
                _calendarDateCalendarEvents = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ICalendarDateCalendarEvent, CalendarDateCalendarEvent>(value);
                covariantList.ItemAdded += (s, e) => ((ICalendarDateCalendarEvent)e.Item).CalendarDate = this;
                _calendarDateCalendarEventsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ICalendarDateCalendarEvent> ICalendarDate.CalendarDateCalendarEvents
        {
            get { return _calendarDateCalendarEventsCovariant; }
            set { CalendarDateCalendarEvents = new List<CalendarDateCalendarEvent>(value.Cast<CalendarDateCalendarEvent>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_calendarDateCalendarEvents != null) foreach (var item in _calendarDateCalendarEvents)
            {
                item.CalendarDate = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICalendarDate)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICalendarDate) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICalendarDateSynchronizationSourceSupport.IsCalendarDateCalendarEventsSupported  { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<ICalendarDateCalendarEvent, bool> ICalendarDateSynchronizationSourceSupport.IsCalendarDateCalendarEventIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.CalendarDateCalendarEvent table of the CalendarDate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CalendarDateCalendarEvent : ICalendarDateCalendarEvent, ICalendarDateCalendarEventSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ICalendarDate _calendarDate;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ICalendarDate ICalendarDateCalendarEvent.CalendarDate
        {
            get { return _calendarDate; }
            set { _calendarDate = value; }
        }

        internal ICalendarDate CalendarDate
        {
            set { _calendarDate = value; }
        }

        /// <summary>
        /// The type of scheduled or unscheduled event for the day. For example:          Instructional day          Teacher only day          Holiday          Make-up day          Weather day          Student late arrival/early dismissal.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="calendarEventDescriptor"), NaturalKeyMember]
        public string CalendarEventDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_calendarDate != null) 
                    hash = hash * 23 + _calendarDate.GetHashCode();
 
                // Standard Property
                if ((this as ICalendarDateCalendarEvent).CalendarEventDescriptor != null) 
                    hash = hash * 23 + (this as ICalendarDateCalendarEvent).CalendarEventDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The amount of time for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eventDuration")][Range(typeof(decimal), "-9.99", "9.99")]
        public decimal EventDuration { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICalendarDateCalendarEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICalendarDateCalendarEvent) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICalendarDateCalendarEventSynchronizationSourceSupport.IsEventDurationSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CalendarEventDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.CalendarEventDescriptor
{
    /// <summary>
    /// A class which represents the edfi.CalendarEventDescriptor table of the CalendarEventDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CalendarEventDescriptor : ICalendarEventDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, ICalendarEventDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CalendarEventDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="calendarEventDescriptorId"), NaturalKeyMember]
        public int CalendarEventDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return CalendarEventDescriptorId; }
            set { CalendarEventDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as ICalendarEventDescriptor).CalendarEventDescriptorId != null) 
                    hash = hash * 23 + (this as ICalendarEventDescriptor).CalendarEventDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="calendarEventType")]
        public string CalendarEventType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICalendarEventDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICalendarEventDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICalendarEventDescriptorSynchronizationSourceSupport.IsCalendarEventTypeSupported   { get { return true; } set { } }
 
        bool ICalendarEventDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
 
        bool ICalendarEventDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
 
        bool ICalendarEventDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
 
        bool ICalendarEventDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
 
        bool ICalendarEventDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
 
        bool ICalendarEventDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
 
        bool ICalendarEventDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CalendarEventType

namespace EdFi.Ods.Api.Models.Resources.V2.CalendarEventType
{
    /// <summary>
    /// A class which represents the edfi.CalendarEventType table of the CalendarEventType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CalendarEventType : ICalendarEventType, IHasETag, ICalendarEventTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CalendarEventType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for CalendarEvent
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="calendarEventTypeId"), NaturalKeyMember]
        public int CalendarEventTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICalendarEventType).CalendarEventTypeId != null) 
                    hash = hash * 23 + (this as ICalendarEventType).CalendarEventTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the CalendarEvent type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the CalendarEvent type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICalendarEventType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICalendarEventType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICalendarEventTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ICalendarEventTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ICalendarEventTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CareerPathwayType

namespace EdFi.Ods.Api.Models.Resources.V2.CareerPathwayType
{
    /// <summary>
    /// A class which represents the edfi.CareerPathwayType table of the CareerPathwayType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CareerPathwayType : ICareerPathwayType, IHasETag, ICareerPathwayTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CareerPathwayType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for CareerPathway
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="careerPathwayTypeId"), NaturalKeyMember]
        public int CareerPathwayTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICareerPathwayType).CareerPathwayTypeId != null) 
                    hash = hash * 23 + (this as ICareerPathwayType).CareerPathwayTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the CareerPathway type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the CareerPathway type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICareerPathwayType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICareerPathwayType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICareerPathwayTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ICareerPathwayTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ICareerPathwayTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CharterApprovalAgencyType

namespace EdFi.Ods.Api.Models.Resources.V2.CharterApprovalAgencyType
{
    /// <summary>
    /// A class which represents the edfi.CharterApprovalAgencyType table of the CharterApprovalAgencyType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CharterApprovalAgencyType : ICharterApprovalAgencyType, IHasETag, ICharterApprovalAgencyTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CharterApprovalAgencyType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for CharterApprovalAgency
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="charterApprovalAgencyTypeId"), NaturalKeyMember]
        public int CharterApprovalAgencyTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICharterApprovalAgencyType).CharterApprovalAgencyTypeId != null) 
                    hash = hash * 23 + (this as ICharterApprovalAgencyType).CharterApprovalAgencyTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the CharterApprovalAgency type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the CharterApprovalAgency type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICharterApprovalAgencyType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICharterApprovalAgencyType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICharterApprovalAgencyTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ICharterApprovalAgencyTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ICharterApprovalAgencyTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CharterStatusType

namespace EdFi.Ods.Api.Models.Resources.V2.CharterStatusType
{
    /// <summary>
    /// A class which represents the edfi.CharterStatusType table of the CharterStatusType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CharterStatusType : ICharterStatusType, IHasETag, ICharterStatusTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CharterStatusType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for CharterStatus
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="charterStatusTypeId"), NaturalKeyMember]
        public int CharterStatusTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICharterStatusType).CharterStatusTypeId != null) 
                    hash = hash * 23 + (this as ICharterStatusType).CharterStatusTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the CharterStatus type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the CharterStatus type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICharterStatusType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICharterStatusType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICharterStatusTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ICharterStatusTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ICharterStatusTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CitizenshipStatusType

namespace EdFi.Ods.Api.Models.Resources.V2.CitizenshipStatusType
{
    /// <summary>
    /// A class which represents the edfi.CitizenshipStatusType table of the CitizenshipStatusType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CitizenshipStatusType : ICitizenshipStatusType, IHasETag, ICitizenshipStatusTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CitizenshipStatusType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for CitizenshipStatus
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="citizenshipStatusTypeId"), NaturalKeyMember]
        public int CitizenshipStatusTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICitizenshipStatusType).CitizenshipStatusTypeId != null) 
                    hash = hash * 23 + (this as ICitizenshipStatusType).CitizenshipStatusTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the CitizenshipStatus type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the CitizenshipStatus type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICitizenshipStatusType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICitizenshipStatusType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICitizenshipStatusTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ICitizenshipStatusTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ICitizenshipStatusTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ClassPeriod

namespace EdFi.Ods.Api.Models.Resources.V2.ClassPeriod
{
    /// <summary>
    /// Represents a reference to the ClassPeriod resource.
    /// </summary>
    [DataContract]
    public class ClassPeriodReference
    {
        [DataMember(Name="name"), NaturalKeyMember]
        public string ClassPeriodName { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "ClassPeriod",
                            Href = "/classPeriods"
                                    + "?name=" + WebUtility.UrlEncode(ClassPeriodName)            
                                    + "&schoolId=" + SchoolId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ClassPeriodName != default(string)
                && SchoolId != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.ClassPeriod table of the ClassPeriod aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ClassPeriod : IClassPeriod, IHasETag, IClassPeriodSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ClassPeriod resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _schoolReferenceExplicitlyAssigned;
        private School.SchoolReference _schoolReference;
        private School.SchoolReference ImplicitSchoolReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolReference == null && !_schoolReferenceExplicitlyAssigned)
                    _schoolReference = new School.SchoolReference();

                return _schoolReference;
            }
        }

        [DataMember(Name="schoolReference")][NaturalKeyMember]
        public School.SchoolReference SchoolReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolReference != null
                    && (_schoolReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference;

                return null;
            }
            set 
            { 
                _schoolReferenceExplicitlyAssigned = true;
                _schoolReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="name"), NaturalKeyMember]
        public string ClassPeriodName { get; set; }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IClassPeriod.SchoolId
        {
            get
            {
                if (ImplicitSchoolReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // School
                _schoolReferenceExplicitlyAssigned = false;
                ImplicitSchoolReference.SchoolId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IClassPeriod).ClassPeriodName != null) 
                    hash = hash * 23 + (this as IClassPeriod).ClassPeriodName.GetHashCode();
 
                //Referenced Property
                if ((this as IClassPeriod).SchoolId != null) 
                    hash = hash * 23 + (this as IClassPeriod).SchoolId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IClassPeriod)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IClassPeriod) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: ClassroomPositionDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.ClassroomPositionDescriptor
{
    /// <summary>
    /// A class which represents the edfi.ClassroomPositionDescriptor table of the ClassroomPositionDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ClassroomPositionDescriptor : IClassroomPositionDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IClassroomPositionDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ClassroomPositionDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="classroomPositionDescriptorId"), NaturalKeyMember]
        public int ClassroomPositionDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return ClassroomPositionDescriptorId; }
            set { ClassroomPositionDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IClassroomPositionDescriptor).ClassroomPositionDescriptorId != null) 
                    hash = hash * 23 + (this as IClassroomPositionDescriptor).ClassroomPositionDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="classroomPositionType")]
        public string ClassroomPositionType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IClassroomPositionDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IClassroomPositionDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IClassroomPositionDescriptorSynchronizationSourceSupport.IsClassroomPositionTypeSupported  { get { return true; } set { } }
 
        bool IClassroomPositionDescriptorSynchronizationSourceSupport.IsCodeValueSupported              { get { return true; } set { } }
 
        bool IClassroomPositionDescriptorSynchronizationSourceSupport.IsDescriptionSupported            { get { return true; } set { } }
 
        bool IClassroomPositionDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported     { get { return true; } set { } }
 
        bool IClassroomPositionDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported       { get { return true; } set { } }
 
        bool IClassroomPositionDescriptorSynchronizationSourceSupport.IsNamespaceSupported              { get { return true; } set { } }
 
        bool IClassroomPositionDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported      { get { return true; } set { } }
 
        bool IClassroomPositionDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported       { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ClassroomPositionType

namespace EdFi.Ods.Api.Models.Resources.V2.ClassroomPositionType
{
    /// <summary>
    /// A class which represents the edfi.ClassroomPositionType table of the ClassroomPositionType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ClassroomPositionType : IClassroomPositionType, IHasETag, IClassroomPositionTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ClassroomPositionType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for ClassroomPosition
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="classroomPositionTypeId"), NaturalKeyMember]
        public int ClassroomPositionTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IClassroomPositionType).ClassroomPositionTypeId != null) 
                    hash = hash * 23 + (this as IClassroomPositionType).ClassroomPositionTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the ClassroomPosition type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the ClassroomPosition type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IClassroomPositionType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IClassroomPositionType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IClassroomPositionTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IClassroomPositionTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IClassroomPositionTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: Cohort

namespace EdFi.Ods.Api.Models.Resources.V2.Cohort
{
    /// <summary>
    /// Represents a reference to the Cohort resource.
    /// </summary>
    [DataContract]
    public class CohortReference
    {
        [DataMember(Name="identifier"), NaturalKeyMember]
        public string CohortIdentifier { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "Cohort",
                            Href = "/cohorts"
                                    + "?identifier=" + WebUtility.UrlEncode(CohortIdentifier)            
                                    + "&educationOrganizationId=" + EducationOrganizationId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return CohortIdentifier != default(string)
                && EducationOrganizationId != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Cohort table of the Cohort aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class Cohort : ICohort, IHasETag, ICohortSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Cohort()
        {
            CohortPrograms = new List<CohortProgram>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Cohort resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The name or ID for the Cohort.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identifier"), NaturalKeyMember]
        public string CohortIdentifier { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int ICohort.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICohort).CohortIdentifier != null) 
                    hash = hash * 23 + (this as ICohort).CohortIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as ICohort).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as ICohort).EducationOrganizationId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The academic subject associated with an academic intervention.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="academicSubjectDescriptor")]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// The description of the Cohort and its purpose.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string CohortDescription { get; set; }

        /// <summary>
        /// The scope of cohort (e.g., school, district, classroom).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="scopeType")]
        public string CohortScopeType { get; set; }

        /// <summary>
        /// The type of cohort (e.g., academic intervention, classroom breakout).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="type")]
        public string CohortType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<CohortProgram> _cohortPrograms;
        private IList<ICohortProgram> _cohortProgramsCovariant;

        [DataMember(Name="programs")]
        public IList<CohortProgram> CohortPrograms 
        { 
            get { return _cohortPrograms; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<CohortProgram>(value,
                    (s, e) => ((ICohortProgram)e.Item).Cohort = this);
                _cohortPrograms = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ICohortProgram, CohortProgram>(value);
                covariantList.ItemAdded += (s, e) => ((ICohortProgram)e.Item).Cohort = this;
                _cohortProgramsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ICohortProgram> ICohort.CohortPrograms
        {
            get { return _cohortProgramsCovariant; }
            set { CohortPrograms = new List<CohortProgram>(value.Cast<CohortProgram>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_cohortPrograms != null) foreach (var item in _cohortPrograms)
            {
                item.Cohort = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICohort)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICohort) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICohortSynchronizationSourceSupport.IsAcademicSubjectDescriptorSupported  { get { return true; } set { } }
 
        bool ICohortSynchronizationSourceSupport.IsCohortDescriptionSupported          { get { return true; } set { } }
 
        bool ICohortSynchronizationSourceSupport.IsCohortProgramsSupported             { get { return true; } set { } }
 
        bool ICohortSynchronizationSourceSupport.IsCohortScopeTypeSupported            { get { return true; } set { } }
 
        bool ICohortSynchronizationSourceSupport.IsCohortTypeSupported                 { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<ICohortProgram, bool> ICohortSynchronizationSourceSupport.IsCohortProgramIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.CohortProgram table of the Cohort aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CohortProgram : ICohortProgram, ICohortProgramSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _programReferenceExplicitlyAssigned;
        private Program.ProgramReference _programReference;
        private Program.ProgramReference ImplicitProgramReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_programReference == null && !_programReferenceExplicitlyAssigned)
                    _programReference = new Program.ProgramReference();

                return _programReference;
            }
        }

        [DataMember(Name="programReference")][NaturalKeyMember]
        public Program.ProgramReference ProgramReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitProgramReference != null
                    && (_programReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference;

                return null;
            }
            set 
            { 
                _programReferenceExplicitlyAssigned = true;
                _programReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ICohort _cohort;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ICohort ICohortProgram.Cohort
        {
            get { return _cohort; }
            set { _cohort = value; }
        }

        internal ICohort Cohort
        {
            set { _cohort = value; }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int ICohortProgram.ProgramEducationOrganizationId
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ICohortProgram.ProgramName
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.ProgramName = value;
            }
        }

        /// <summary>
        /// The type of program.
        /// </summary>

        // IS in a reference (CohortProgram.ProgramTypeId), IS a lookup column 
        string ICohortProgram.ProgramType
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramType;

                return null;
            }
            set
            {
                ImplicitProgramReference.ProgramType = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_cohort != null) 
                    hash = hash * 23 + _cohort.GetHashCode();
 
                //Referenced Property
                if ((this as ICohortProgram).ProgramEducationOrganizationId != null) 
                    hash = hash * 23 + (this as ICohortProgram).ProgramEducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as ICohortProgram).ProgramName != null) 
                    hash = hash * 23 + (this as ICohortProgram).ProgramName.GetHashCode();
 
                //Unified Type Property
                if ((this as ICohortProgram).ProgramType != null) 
                    hash = hash * 23 + (this as ICohortProgram).ProgramType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICohortProgram)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICohortProgram) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: CohortScopeType

namespace EdFi.Ods.Api.Models.Resources.V2.CohortScopeType
{
    /// <summary>
    /// A class which represents the edfi.CohortScopeType table of the CohortScopeType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CohortScopeType : ICohortScopeType, IHasETag, ICohortScopeTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CohortScopeType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for CohortScope
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="cohortScopeTypeId"), NaturalKeyMember]
        public int CohortScopeTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICohortScopeType).CohortScopeTypeId != null) 
                    hash = hash * 23 + (this as ICohortScopeType).CohortScopeTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the CohortScope type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the CohortScope type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICohortScopeType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICohortScopeType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICohortScopeTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ICohortScopeTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ICohortScopeTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CohortType

namespace EdFi.Ods.Api.Models.Resources.V2.CohortType
{
    /// <summary>
    /// A class which represents the edfi.CohortType table of the CohortType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CohortType : ICohortType, IHasETag, ICohortTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CohortType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Cohort
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="cohortTypeId"), NaturalKeyMember]
        public int CohortTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICohortType).CohortTypeId != null) 
                    hash = hash * 23 + (this as ICohortType).CohortTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Cohort type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Cohort type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICohortType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICohortType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICohortTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ICohortTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ICohortTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CohortYearType

namespace EdFi.Ods.Api.Models.Resources.V2.CohortYearType
{
    /// <summary>
    /// A class which represents the edfi.CohortYearType table of the CohortYearType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CohortYearType : ICohortYearType, IHasETag, ICohortYearTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CohortYearType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for CohortYear
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="cohortYearTypeId"), NaturalKeyMember]
        public int CohortYearTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICohortYearType).CohortYearTypeId != null) 
                    hash = hash * 23 + (this as ICohortYearType).CohortYearTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the CohortYear type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the CohortYear type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICohortYearType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICohortYearType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICohortYearTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ICohortYearTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ICohortYearTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CompetencyLevelDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.CompetencyLevelDescriptor
{
    /// <summary>
    /// A class which represents the edfi.CompetencyLevelDescriptor table of the CompetencyLevelDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CompetencyLevelDescriptor : ICompetencyLevelDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, ICompetencyLevelDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CompetencyLevelDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="competencyLevelDescriptorId"), NaturalKeyMember]
        public int CompetencyLevelDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return CompetencyLevelDescriptorId; }
            set { CompetencyLevelDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as ICompetencyLevelDescriptor).CompetencyLevelDescriptorId != null) 
                    hash = hash * 23 + (this as ICompetencyLevelDescriptor).CompetencyLevelDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A conversion of the level to a standard set of competency levels.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="performanceBaseConversionType")]
        public string PerformanceBaseConversionType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICompetencyLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICompetencyLevelDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICompetencyLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported                      { get { return true; } set { } }
 
        bool ICompetencyLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported                    { get { return true; } set { } }
 
        bool ICompetencyLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported             { get { return true; } set { } }
 
        bool ICompetencyLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported               { get { return true; } set { } }
 
        bool ICompetencyLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported                      { get { return true; } set { } }
 
        bool ICompetencyLevelDescriptorSynchronizationSourceSupport.IsPerformanceBaseConversionTypeSupported  { get { return true; } set { } }
 
        bool ICompetencyLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported              { get { return true; } set { } }
 
        bool ICompetencyLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported               { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CompetencyObjective

namespace EdFi.Ods.Api.Models.Resources.V2.CompetencyObjective
{
    /// <summary>
    /// Represents a reference to the CompetencyObjective resource.
    /// </summary>
    [DataContract]
    public class CompetencyObjectiveReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="objective"), NaturalKeyMember]
        public string Objective { get; set; }

        [DataMember(Name="objectiveGradeLevelDescriptor"), NaturalKeyMember]
        public string ObjectiveGradeLevelDescriptor { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "CompetencyObjective",
                            Href = "/competencyObjectives"
                                    + "?educationOrganizationId=" + EducationOrganizationId            
                                    + "&objective=" + WebUtility.UrlEncode(Objective)            
                                    + "&objectiveGradeLevelDescriptor=" + WebUtility.UrlEncode(ObjectiveGradeLevelDescriptor)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int)
                && Objective != default(string)
                && ObjectiveGradeLevelDescriptor != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.CompetencyObjective table of the CompetencyObjective aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CompetencyObjective : ICompetencyObjective, IHasETag, ICompetencyObjectiveSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CompetencyObjective resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int ICompetencyObjective.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The designated title of the CompetencyObjective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="objective"), NaturalKeyMember]
        public string Objective { get; set; }

        /// <summary>
        /// The grade level for which the CompetencyObjective is targeted.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="objectiveGradeLevelDescriptor"), NaturalKeyMember]
        public string ObjectiveGradeLevelDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as ICompetencyObjective).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as ICompetencyObjective).EducationOrganizationId.GetHashCode();
 
                // Standard Property
                if ((this as ICompetencyObjective).Objective != null) 
                    hash = hash * 23 + (this as ICompetencyObjective).Objective.GetHashCode();
 
                // Standard Property
                if ((this as ICompetencyObjective).ObjectiveGradeLevelDescriptor != null) 
                    hash = hash * 23 + (this as ICompetencyObjective).ObjectiveGradeLevelDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The Identifier for the CompetencyObjective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="competencyObjectiveId")]
        public string CompetencyObjectiveId { get; set; }

        /// <summary>
        /// The description of the student competency objective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// One or more statements that describes the criteria used by teachers and students to check for attainment of a competency objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the CompetencyObjective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="successCriteria")]
        public string SuccessCriteria { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICompetencyObjective)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICompetencyObjective) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICompetencyObjectiveSynchronizationSourceSupport.IsCompetencyObjectiveIdSupported  { get { return true; } set { } }
 
        bool ICompetencyObjectiveSynchronizationSourceSupport.IsDescriptionSupported            { get { return true; } set { } }
 
        bool ICompetencyObjectiveSynchronizationSourceSupport.IsSuccessCriteriaSupported        { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ContentClassType

namespace EdFi.Ods.Api.Models.Resources.V2.ContentClassType
{
    /// <summary>
    /// A class which represents the edfi.ContentClassType table of the ContentClassType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ContentClassType : IContentClassType, IHasETag, IContentClassTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ContentClassType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for ContentClass
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="contentClassTypeId"), NaturalKeyMember]
        public int ContentClassTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IContentClassType).ContentClassTypeId != null) 
                    hash = hash * 23 + (this as IContentClassType).ContentClassTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the ContentClass type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the ContentClass type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IContentClassType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IContentClassType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IContentClassTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IContentClassTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IContentClassTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ContinuationOfServicesReasonDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.ContinuationOfServicesReasonDescriptor
{
    /// <summary>
    /// A class which represents the edfi.ContinuationOfServicesReasonDescriptor table of the ContinuationOfServicesReasonDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ContinuationOfServicesReasonDescriptor : IContinuationOfServicesReasonDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IContinuationOfServicesReasonDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ContinuationOfServicesReasonDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="continuationOfServicesReasonDescriptorId"), NaturalKeyMember]
        public int ContinuationOfServicesReasonDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return ContinuationOfServicesReasonDescriptorId; }
            set { ContinuationOfServicesReasonDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IContinuationOfServicesReasonDescriptor).ContinuationOfServicesReasonDescriptorId != null) 
                    hash = hash * 23 + (this as IContinuationOfServicesReasonDescriptor).ContinuationOfServicesReasonDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="continuationOfServicesReasonType")]
        public string ContinuationOfServicesReasonType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IContinuationOfServicesReasonDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IContinuationOfServicesReasonDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IContinuationOfServicesReasonDescriptorSynchronizationSourceSupport.IsCodeValueSupported                         { get { return true; } set { } }
 
        bool IContinuationOfServicesReasonDescriptorSynchronizationSourceSupport.IsContinuationOfServicesReasonTypeSupported  { get { return true; } set { } }
 
        bool IContinuationOfServicesReasonDescriptorSynchronizationSourceSupport.IsDescriptionSupported                       { get { return true; } set { } }
 
        bool IContinuationOfServicesReasonDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported                { get { return true; } set { } }
 
        bool IContinuationOfServicesReasonDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported                  { get { return true; } set { } }
 
        bool IContinuationOfServicesReasonDescriptorSynchronizationSourceSupport.IsNamespaceSupported                         { get { return true; } set { } }
 
        bool IContinuationOfServicesReasonDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported                 { get { return true; } set { } }
 
        bool IContinuationOfServicesReasonDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported                  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ContinuationOfServicesReasonType

namespace EdFi.Ods.Api.Models.Resources.V2.ContinuationOfServicesReasonType
{
    /// <summary>
    /// A class which represents the edfi.ContinuationOfServicesReasonType table of the ContinuationOfServicesReasonType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ContinuationOfServicesReasonType : IContinuationOfServicesReasonType, IHasETag, IContinuationOfServicesReasonTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ContinuationOfServicesReasonType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for ContinuationOfServicesReason
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="continuationOfServicesReasonTypeId"), NaturalKeyMember]
        public int ContinuationOfServicesReasonTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IContinuationOfServicesReasonType).ContinuationOfServicesReasonTypeId != null) 
                    hash = hash * 23 + (this as IContinuationOfServicesReasonType).ContinuationOfServicesReasonTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the ContinuationOfServicesReason type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the ContinuationOfServicesReason type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IContinuationOfServicesReasonType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IContinuationOfServicesReasonType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IContinuationOfServicesReasonTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IContinuationOfServicesReasonTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IContinuationOfServicesReasonTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ContractedStaff

namespace EdFi.Ods.Api.Models.Resources.V2.ContractedStaff
{
    /// <summary>
    /// Represents a reference to the ContractedStaff resource.
    /// </summary>
    [DataContract]
    public class ContractedStaffReference
    {
        [DataMember(Name="accountNumber"), NaturalKeyMember]
        public string AccountNumber { get; set; }

        [DataMember(Name="asOfDate"), NaturalKeyMember]
        public DateTime AsOfDate { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="fiscalYear"), NaturalKeyMember]
        public int FiscalYear { get; set; }

        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "ContractedStaff",
                            Href = "/contractedStaffs"
                                    + "?accountNumber=" + WebUtility.UrlEncode(AccountNumber)            
                                    + "&asOfDate=" + JsonConvert.SerializeObject(AsOfDate).Replace("\"", string.Empty)            
                                    + "&educationOrganizationId=" + EducationOrganizationId            
                                    + "&fiscalYear=" + FiscalYear            
                                    + "&staffUniqueId=" + WebUtility.UrlEncode(StaffUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return AccountNumber != default(string)
                && AsOfDate != default(DateTime)
                && EducationOrganizationId != default(int)
                && FiscalYear != default(int)
                && StaffUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.ContractedStaff table of the ContractedStaff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ContractedStaff : IContractedStaff, IHasETag, IContractedStaffSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ContractedStaff resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _accountReferenceExplicitlyAssigned;
        private Account.AccountReference _accountReference;
        private Account.AccountReference ImplicitAccountReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_accountReference == null && !_accountReferenceExplicitlyAssigned)
                    _accountReference = new Account.AccountReference();

                return _accountReference;
            }
        }

        [DataMember(Name="accountReference")][NaturalKeyMember]
        public Account.AccountReference AccountReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitAccountReference != null
                    && (_accountReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitAccountReference.IsReferenceFullyDefined()))
                    return ImplicitAccountReference;

                return null;
            }
            set 
            { 
                _accountReferenceExplicitlyAssigned = true;
                _accountReference = value;
            }
        }
        private bool _staffReferenceExplicitlyAssigned;
        private Staff.StaffReference _staffReference;
        private Staff.StaffReference ImplicitStaffReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_staffReference == null && !_staffReferenceExplicitlyAssigned)
                    _staffReference = new Staff.StaffReference();

                return _staffReference;
            }
        }

        [DataMember(Name="staffReference")][NaturalKeyMember]
        public Staff.StaffReference StaffReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStaffReference != null
                    && (_staffReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference;

                return null;
            }
            set 
            { 
                _staffReferenceExplicitlyAssigned = true;
                _staffReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The alphanumeric string that identifies the account.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IContractedStaff.AccountNumber
        {
            get
            {
                if (ImplicitAccountReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAccountReference.IsReferenceFullyDefined()))
                    return ImplicitAccountReference.AccountNumber;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Account
                _accountReferenceExplicitlyAssigned = false;
                ImplicitAccountReference.AccountNumber = value;
            }
        }

        /// <summary>
        /// The date of the reported contracted staff element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="asOfDate"), NaturalKeyMember]
        public DateTime AsOfDate { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IContractedStaff.EducationOrganizationId
        {
            get
            {
                if (ImplicitAccountReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAccountReference.IsReferenceFullyDefined()))
                    return ImplicitAccountReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Account
                _accountReferenceExplicitlyAssigned = false;
                ImplicitAccountReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The financial accounting year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IContractedStaff.FiscalYear
        {
            get
            {
                if (ImplicitAccountReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAccountReference.IsReferenceFullyDefined()))
                    return ImplicitAccountReference.FiscalYear;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Account
                _accountReferenceExplicitlyAssigned = false;
                ImplicitAccountReference.FiscalYear = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IContractedStaff.StaffUniqueId
        {
            get
            {
                if (ImplicitStaffReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference.StaffUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Staff
                _staffReferenceExplicitlyAssigned = false;
                ImplicitStaffReference.StaffUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IContractedStaff).AccountNumber != null) 
                    hash = hash * 23 + (this as IContractedStaff).AccountNumber.GetHashCode();
 
                // Standard Property
                if ((this as IContractedStaff).AsOfDate != null) 
                    hash = hash * 23 + (this as IContractedStaff).AsOfDate.GetHashCode();
 
                //Referenced Property
                if ((this as IContractedStaff).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IContractedStaff).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IContractedStaff).FiscalYear != null) 
                    hash = hash * 23 + (this as IContractedStaff).FiscalYear.GetHashCode();
 
                //Referenced Property
                if ((this as IContractedStaff).StaffUniqueId != null) 
                    hash = hash * 23 + (this as IContractedStaff).StaffUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Current balance (amount paid to contractor) for account for the fiscal year.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="amountToDate")][Range(typeof(decimal), "-922337203685477.5808", "922337203685477.5807")]
        public decimal AmountToDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IContractedStaff)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IContractedStaff) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IContractedStaffSynchronizationSourceSupport.IsAmountToDateSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CostRateType

namespace EdFi.Ods.Api.Models.Resources.V2.CostRateType
{
    /// <summary>
    /// A class which represents the edfi.CostRateType table of the CostRateType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CostRateType : ICostRateType, IHasETag, ICostRateTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CostRateType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for CostRate
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="costRateTypeId"), NaturalKeyMember]
        public int CostRateTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICostRateType).CostRateTypeId != null) 
                    hash = hash * 23 + (this as ICostRateType).CostRateTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the CostRate type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the CostRate type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICostRateType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICostRateType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICostRateTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ICostRateTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ICostRateTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CountryDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.CountryDescriptor
{
    /// <summary>
    /// A class which represents the edfi.CountryDescriptor table of the CountryDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CountryDescriptor : ICountryDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, ICountryDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CountryDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countryDescriptorId"), NaturalKeyMember]
        public int CountryDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return CountryDescriptorId; }
            set { CountryDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as ICountryDescriptor).CountryDescriptorId != null) 
                    hash = hash * 23 + (this as ICountryDescriptor).CountryDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICountryDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICountryDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICountryDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
 
        bool ICountryDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
 
        bool ICountryDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
 
        bool ICountryDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
 
        bool ICountryDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
 
        bool ICountryDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
 
        bool ICountryDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: Course

namespace EdFi.Ods.Api.Models.Resources.V2.Course
{
    /// <summary>
    /// Represents a reference to the Course resource.
    /// </summary>
    [DataContract]
    public class CourseReference
    {
        [DataMember(Name="code"), NaturalKeyMember]
        public string CourseCode { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "Course",
                            Href = "/courses"
                                    + "?code=" + WebUtility.UrlEncode(CourseCode)            
                                    + "&educationOrganizationId=" + EducationOrganizationId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return CourseCode != default(string)
                && EducationOrganizationId != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Course table of the Course aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class Course : ICourse, IHasETag, ICourseSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Course()
        {
            CourseCompetencyLevels = new List<CourseCompetencyLevel>();
            CourseIdentificationCodes = new List<CourseIdentificationCode>();
            CourseLearningObjectives = new List<CourseLearningObjective>();
            CourseLearningStandards = new List<CourseLearningStandard>();
            CourseLevelCharacteristics = new List<CourseLevelCharacteristic>();
            CourseOfferedGradeLevels = new List<CourseOfferedGradeLevel>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Course resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a course.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="code"), NaturalKeyMember]
        public string CourseCode { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int ICourse.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICourse).CourseCode != null) 
                    hash = hash * 23 + (this as ICourse).CourseCode.GetHashCode();
 
                //Referenced Property
                if ((this as ICourse).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as ICourse).EducationOrganizationId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The intended major subject area of the course.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="academicSubjectDescriptor")]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="careerPathwayType")]
        public string CareerPathwayType { get; set; }

        /// <summary>
        /// Specifies whether the course was defined by the SEA, LEA, School, or national organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="definedByType")]
        public string CourseDefinedByType { get; set; }

        /// <summary>
        /// A description of the content standards and goals covered in the course. Reference may be made to state or national content standards.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string CourseDescription { get; set; }

        /// <summary>
        /// An indicator of whether or not the course being described is included in the computation of the student's Grade Point Average, and if so, if it is weighted differently from regular courses.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gpaApplicabilityType")]
        public string CourseGPAApplicabilityType { get; set; }

        /// <summary>
        /// The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="title")]
        public string CourseTitle { get; set; }

        /// <summary>
        /// Date the course was adopted by the education agency.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="dateCourseAdopted")]
        public DateTime? DateCourseAdopted { get; set; }

        /// <summary>
        /// An indication that this course may satisfy high school graduation requirements in the course's subject area.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highSchoolCourseRequirement")]
        public bool? HighSchoolCourseRequirement { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumAvailableCreditConversion")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? MaximumAvailableCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumAvailableCredits")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? MaximumAvailableCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="maximumAvailableCreditType")]
        public string MaximumAvailableCreditType { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minimumAvailableCreditConversion")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? MinimumAvailableCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minimumAvailableCredits")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? MinimumAvailableCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="minimumAvailableCreditType")]
        public string MinimumAvailableCreditType { get; set; }

        /// <summary>
        /// The number of parts identified for a course.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="numberOfParts")]
        public int NumberOfParts { get; set; }

        /// <summary>
        /// The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="timeRequiredForCompletion")]
        public int? TimeRequiredForCompletion { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<CourseCompetencyLevel> _courseCompetencyLevels;
        private IList<ICourseCompetencyLevel> _courseCompetencyLevelsCovariant;

        [DataMember(Name="competencyLevels")]
        public IList<CourseCompetencyLevel> CourseCompetencyLevels 
        { 
            get { return _courseCompetencyLevels; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<CourseCompetencyLevel>(value,
                    (s, e) => ((ICourseCompetencyLevel)e.Item).Course = this);
                _courseCompetencyLevels = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ICourseCompetencyLevel, CourseCompetencyLevel>(value);
                covariantList.ItemAdded += (s, e) => ((ICourseCompetencyLevel)e.Item).Course = this;
                _courseCompetencyLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ICourseCompetencyLevel> ICourse.CourseCompetencyLevels
        {
            get { return _courseCompetencyLevelsCovariant; }
            set { CourseCompetencyLevels = new List<CourseCompetencyLevel>(value.Cast<CourseCompetencyLevel>()); }
        }

        private IList<CourseIdentificationCode> _courseIdentificationCodes;
        private IList<ICourseIdentificationCode> _courseIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes")]
        public IList<CourseIdentificationCode> CourseIdentificationCodes 
        { 
            get { return _courseIdentificationCodes; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<CourseIdentificationCode>(value,
                    (s, e) => ((ICourseIdentificationCode)e.Item).Course = this);
                _courseIdentificationCodes = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ICourseIdentificationCode, CourseIdentificationCode>(value);
                covariantList.ItemAdded += (s, e) => ((ICourseIdentificationCode)e.Item).Course = this;
                _courseIdentificationCodesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ICourseIdentificationCode> ICourse.CourseIdentificationCodes
        {
            get { return _courseIdentificationCodesCovariant; }
            set { CourseIdentificationCodes = new List<CourseIdentificationCode>(value.Cast<CourseIdentificationCode>()); }
        }

        private IList<CourseLearningObjective> _courseLearningObjectives;
        private IList<ICourseLearningObjective> _courseLearningObjectivesCovariant;

        [DataMember(Name="learningObjectives")]
        public IList<CourseLearningObjective> CourseLearningObjectives 
        { 
            get { return _courseLearningObjectives; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<CourseLearningObjective>(value,
                    (s, e) => ((ICourseLearningObjective)e.Item).Course = this);
                _courseLearningObjectives = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ICourseLearningObjective, CourseLearningObjective>(value);
                covariantList.ItemAdded += (s, e) => ((ICourseLearningObjective)e.Item).Course = this;
                _courseLearningObjectivesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ICourseLearningObjective> ICourse.CourseLearningObjectives
        {
            get { return _courseLearningObjectivesCovariant; }
            set { CourseLearningObjectives = new List<CourseLearningObjective>(value.Cast<CourseLearningObjective>()); }
        }

        private IList<CourseLearningStandard> _courseLearningStandards;
        private IList<ICourseLearningStandard> _courseLearningStandardsCovariant;

        [DataMember(Name="learningStandards")]
        public IList<CourseLearningStandard> CourseLearningStandards 
        { 
            get { return _courseLearningStandards; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<CourseLearningStandard>(value,
                    (s, e) => ((ICourseLearningStandard)e.Item).Course = this);
                _courseLearningStandards = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ICourseLearningStandard, CourseLearningStandard>(value);
                covariantList.ItemAdded += (s, e) => ((ICourseLearningStandard)e.Item).Course = this;
                _courseLearningStandardsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ICourseLearningStandard> ICourse.CourseLearningStandards
        {
            get { return _courseLearningStandardsCovariant; }
            set { CourseLearningStandards = new List<CourseLearningStandard>(value.Cast<CourseLearningStandard>()); }
        }

        private IList<CourseLevelCharacteristic> _courseLevelCharacteristics;
        private IList<ICourseLevelCharacteristic> _courseLevelCharacteristicsCovariant;

        [DataMember(Name="levelCharacteristics")]
        public IList<CourseLevelCharacteristic> CourseLevelCharacteristics 
        { 
            get { return _courseLevelCharacteristics; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<CourseLevelCharacteristic>(value,
                    (s, e) => ((ICourseLevelCharacteristic)e.Item).Course = this);
                _courseLevelCharacteristics = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ICourseLevelCharacteristic, CourseLevelCharacteristic>(value);
                covariantList.ItemAdded += (s, e) => ((ICourseLevelCharacteristic)e.Item).Course = this;
                _courseLevelCharacteristicsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ICourseLevelCharacteristic> ICourse.CourseLevelCharacteristics
        {
            get { return _courseLevelCharacteristicsCovariant; }
            set { CourseLevelCharacteristics = new List<CourseLevelCharacteristic>(value.Cast<CourseLevelCharacteristic>()); }
        }

        private IList<CourseOfferedGradeLevel> _courseOfferedGradeLevels;
        private IList<ICourseOfferedGradeLevel> _courseOfferedGradeLevelsCovariant;

        [DataMember(Name="offeredGradeLevels")]
        public IList<CourseOfferedGradeLevel> CourseOfferedGradeLevels 
        { 
            get { return _courseOfferedGradeLevels; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<CourseOfferedGradeLevel>(value,
                    (s, e) => ((ICourseOfferedGradeLevel)e.Item).Course = this);
                _courseOfferedGradeLevels = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ICourseOfferedGradeLevel, CourseOfferedGradeLevel>(value);
                covariantList.ItemAdded += (s, e) => ((ICourseOfferedGradeLevel)e.Item).Course = this;
                _courseOfferedGradeLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ICourseOfferedGradeLevel> ICourse.CourseOfferedGradeLevels
        {
            get { return _courseOfferedGradeLevelsCovariant; }
            set { CourseOfferedGradeLevels = new List<CourseOfferedGradeLevel>(value.Cast<CourseOfferedGradeLevel>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_courseCompetencyLevels != null) foreach (var item in _courseCompetencyLevels)
            {
                item.Course = this;
            }
            
            if (_courseIdentificationCodes != null) foreach (var item in _courseIdentificationCodes)
            {
                item.Course = this;
            }
            
            if (_courseLearningObjectives != null) foreach (var item in _courseLearningObjectives)
            {
                item.Course = this;
            }
            
            if (_courseLearningStandards != null) foreach (var item in _courseLearningStandards)
            {
                item.Course = this;
            }
            
            if (_courseLevelCharacteristics != null) foreach (var item in _courseLevelCharacteristics)
            {
                item.Course = this;
            }
            
            if (_courseOfferedGradeLevels != null) foreach (var item in _courseOfferedGradeLevels)
            {
                item.Course = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICourse)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICourse) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICourseSynchronizationSourceSupport.IsAcademicSubjectDescriptorSupported         { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsCareerPathwayTypeSupported                 { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsCourseCompetencyLevelsSupported            { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsCourseDefinedByTypeSupported               { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsCourseDescriptionSupported                 { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsCourseGPAApplicabilityTypeSupported        { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsCourseIdentificationCodesSupported         { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsCourseLearningObjectivesSupported          { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsCourseLearningStandardsSupported           { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsCourseLevelCharacteristicsSupported        { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsCourseOfferedGradeLevelsSupported          { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsCourseTitleSupported                       { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsDateCourseAdoptedSupported                 { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsHighSchoolCourseRequirementSupported       { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsMaximumAvailableCreditConversionSupported  { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsMaximumAvailableCreditsSupported           { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsMaximumAvailableCreditTypeSupported        { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsMinimumAvailableCreditConversionSupported  { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsMinimumAvailableCreditsSupported           { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsMinimumAvailableCreditTypeSupported        { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsNumberOfPartsSupported                     { get { return true; } set { } }
 
        bool ICourseSynchronizationSourceSupport.IsTimeRequiredForCompletionSupported         { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<ICourseCompetencyLevel, bool> ICourseSynchronizationSourceSupport.IsCourseCompetencyLevelIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<ICourseIdentificationCode, bool> ICourseSynchronizationSourceSupport.IsCourseIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<ICourseLearningObjective, bool> ICourseSynchronizationSourceSupport.IsCourseLearningObjectiveIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<ICourseLearningStandard, bool> ICourseSynchronizationSourceSupport.IsCourseLearningStandardIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<ICourseLevelCharacteristic, bool> ICourseSynchronizationSourceSupport.IsCourseLevelCharacteristicIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<ICourseOfferedGradeLevel, bool> ICourseSynchronizationSourceSupport.IsCourseOfferedGradeLevelIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.CourseCompetencyLevel table of the Course aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CourseCompetencyLevel : ICourseCompetencyLevel, ICourseCompetencyLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ICourse _course;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ICourse ICourseCompetencyLevel.Course
        {
            get { return _course; }
            set { _course = value; }
        }

        internal ICourse Course
        {
            set { _course = value; }
        }

        /// <summary>
        /// The competency levels defined to rate the student for the course.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="competencyLevelDescriptor"), NaturalKeyMember]
        public string CompetencyLevelDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_course != null) 
                    hash = hash * 23 + _course.GetHashCode();
 
                // Standard Property
                if ((this as ICourseCompetencyLevel).CompetencyLevelDescriptor != null) 
                    hash = hash * 23 + (this as ICourseCompetencyLevel).CompetencyLevelDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICourseCompetencyLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICourseCompetencyLevel) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.CourseIdentificationCode table of the Course aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CourseIdentificationCode : ICourseIdentificationCode, ICourseIdentificationCodeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ICourse _course;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ICourse ICourseIdentificationCode.Course
        {
            get { return _course; }
            set { _course = value; }
        }

        internal ICourse Course
        {
            set { _course = value; }
        }

        /// <summary>
        /// A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="courseIdentificationSystemDescriptor"), NaturalKeyMember]
        public string CourseIdentificationSystemDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_course != null) 
                    hash = hash * 23 + _course.GetHashCode();
 
                // Standard Property
                if ((this as ICourseIdentificationCode).CourseIdentificationSystemDescriptor != null) 
                    hash = hash * 23 + (this as ICourseIdentificationCode).CourseIdentificationSystemDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The organization code or name assigning the staff Identification Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assigningOrganizationIdentificationCode")]
        public string AssigningOrganizationIdentificationCode { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a \"/\". For example, consider the following SCED code-    subject = 20 Math    course = 272 Geometry    level = G General    credits = 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode")]
        public string IdentificationCode { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICourseIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICourseIdentificationCode) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICourseIdentificationCodeSynchronizationSourceSupport.IsAssigningOrganizationIdentificationCodeSupported  { get { return true; } set { } }
 
        bool ICourseIdentificationCodeSynchronizationSourceSupport.IsIdentificationCodeSupported                       { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.CourseLearningObjective table of the Course aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CourseLearningObjective : ICourseLearningObjective, ICourseLearningObjectiveSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _learningObjectiveReferenceExplicitlyAssigned;
        private LearningObjective.LearningObjectiveReference _learningObjectiveReference;
        private LearningObjective.LearningObjectiveReference ImplicitLearningObjectiveReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_learningObjectiveReference == null && !_learningObjectiveReferenceExplicitlyAssigned)
                    _learningObjectiveReference = new LearningObjective.LearningObjectiveReference();

                return _learningObjectiveReference;
            }
        }

        [DataMember(Name="learningObjectiveReference")][NaturalKeyMember]
        public LearningObjective.LearningObjectiveReference LearningObjectiveReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitLearningObjectiveReference != null
                    && (_learningObjectiveReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitLearningObjectiveReference;

                return null;
            }
            set 
            { 
                _learningObjectiveReferenceExplicitlyAssigned = true;
                _learningObjectiveReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ICourse _course;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ICourse ICourseLearningObjective.Course
        {
            get { return _course; }
            set { _course = value; }
        }

        internal ICourse Course
        {
            set { _course = value; }
        }

        /// <summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ICourseLearningObjective.LearningObjectiveId
        {
            get
            {
                if (ImplicitLearningObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitLearningObjectiveReference.LearningObjectiveId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // LearningObjective
                _learningObjectiveReferenceExplicitlyAssigned = false;
                ImplicitLearningObjectiveReference.LearningObjectiveId = value;
            }
        }

        /// <summary>
        /// Namespace for the LearningObjective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ICourseLearningObjective.Namespace
        {
            get
            {
                if (ImplicitLearningObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitLearningObjectiveReference.Namespace;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // LearningObjective
                _learningObjectiveReferenceExplicitlyAssigned = false;
                ImplicitLearningObjectiveReference.Namespace = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_course != null) 
                    hash = hash * 23 + _course.GetHashCode();
 
                //Referenced Property
                if ((this as ICourseLearningObjective).LearningObjectiveId != null) 
                    hash = hash * 23 + (this as ICourseLearningObjective).LearningObjectiveId.GetHashCode();
 
                //Referenced Property
                if ((this as ICourseLearningObjective).Namespace != null) 
                    hash = hash * 23 + (this as ICourseLearningObjective).Namespace.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICourseLearningObjective)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICourseLearningObjective) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.CourseLearningStandard table of the Course aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CourseLearningStandard : ICourseLearningStandard, ICourseLearningStandardSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _learningStandardReferenceExplicitlyAssigned;
        private LearningStandard.LearningStandardReference _learningStandardReference;
        private LearningStandard.LearningStandardReference ImplicitLearningStandardReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_learningStandardReference == null && !_learningStandardReferenceExplicitlyAssigned)
                    _learningStandardReference = new LearningStandard.LearningStandardReference();

                return _learningStandardReference;
            }
        }

        [DataMember(Name="learningStandardReference")][NaturalKeyMember]
        public LearningStandard.LearningStandardReference LearningStandardReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitLearningStandardReference != null
                    && (_learningStandardReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitLearningStandardReference.IsReferenceFullyDefined()))
                    return ImplicitLearningStandardReference;

                return null;
            }
            set 
            { 
                _learningStandardReferenceExplicitlyAssigned = true;
                _learningStandardReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ICourse _course;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ICourse ICourseLearningStandard.Course
        {
            get { return _course; }
            set { _course = value; }
        }

        internal ICourse Course
        {
            set { _course = value; }
        }

        /// <summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ICourseLearningStandard.LearningStandardId
        {
            get
            {
                if (ImplicitLearningStandardReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitLearningStandardReference.IsReferenceFullyDefined()))
                    return ImplicitLearningStandardReference.LearningStandardId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // LearningStandard
                _learningStandardReferenceExplicitlyAssigned = false;
                ImplicitLearningStandardReference.LearningStandardId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_course != null) 
                    hash = hash * 23 + _course.GetHashCode();
 
                //Referenced Property
                if ((this as ICourseLearningStandard).LearningStandardId != null) 
                    hash = hash * 23 + (this as ICourseLearningStandard).LearningStandardId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICourseLearningStandard)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICourseLearningStandard) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.CourseLevelCharacteristic table of the Course aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CourseLevelCharacteristic : ICourseLevelCharacteristic, ICourseLevelCharacteristicSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ICourse _course;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ICourse ICourseLevelCharacteristic.Course
        {
            get { return _course; }
            set { _course = value; }
        }

        internal ICourse Course
        {
            set { _course = value; }
        }

        /// <summary>
        /// The type of specific program or designation with which the course is associated (e.g., AP, IB, Dual Credit, CTE).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="type"), NaturalKeyMember]
        public string CourseLevelCharacteristicType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_course != null) 
                    hash = hash * 23 + _course.GetHashCode();
 
                // Standard Property
                if ((this as ICourseLevelCharacteristic).CourseLevelCharacteristicType != null) 
                    hash = hash * 23 + (this as ICourseLevelCharacteristic).CourseLevelCharacteristicType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICourseLevelCharacteristic)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICourseLevelCharacteristic) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.CourseOfferedGradeLevel table of the Course aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CourseOfferedGradeLevel : ICourseOfferedGradeLevel, ICourseOfferedGradeLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ICourse _course;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ICourse ICourseOfferedGradeLevel.Course
        {
            get { return _course; }
            set { _course = value; }
        }

        internal ICourse Course
        {
            set { _course = value; }
        }

        /// <summary>
        /// The grade levels in which the course is offered.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_course != null) 
                    hash = hash * 23 + _course.GetHashCode();
 
                // Standard Property
                if ((this as ICourseOfferedGradeLevel).GradeLevelDescriptor != null) 
                    hash = hash * 23 + (this as ICourseOfferedGradeLevel).GradeLevelDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICourseOfferedGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICourseOfferedGradeLevel) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: CourseAttemptResultType

namespace EdFi.Ods.Api.Models.Resources.V2.CourseAttemptResultType
{
    /// <summary>
    /// A class which represents the edfi.CourseAttemptResultType table of the CourseAttemptResultType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CourseAttemptResultType : ICourseAttemptResultType, IHasETag, ICourseAttemptResultTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CourseAttemptResultType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for CourseAttemptResult
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="courseAttemptResultTypeId"), NaturalKeyMember]
        public int CourseAttemptResultTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICourseAttemptResultType).CourseAttemptResultTypeId != null) 
                    hash = hash * 23 + (this as ICourseAttemptResultType).CourseAttemptResultTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the CourseAttemptResult type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the CourseAttemptResult type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICourseAttemptResultType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICourseAttemptResultType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICourseAttemptResultTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ICourseAttemptResultTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ICourseAttemptResultTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CourseDefinedByType

namespace EdFi.Ods.Api.Models.Resources.V2.CourseDefinedByType
{
    /// <summary>
    /// A class which represents the edfi.CourseDefinedByType table of the CourseDefinedByType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CourseDefinedByType : ICourseDefinedByType, IHasETag, ICourseDefinedByTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CourseDefinedByType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for CourseDefinedBy
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="courseDefinedByTypeId"), NaturalKeyMember]
        public int CourseDefinedByTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICourseDefinedByType).CourseDefinedByTypeId != null) 
                    hash = hash * 23 + (this as ICourseDefinedByType).CourseDefinedByTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the CourseDefinedBy type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the CourseDefinedBy type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICourseDefinedByType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICourseDefinedByType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICourseDefinedByTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ICourseDefinedByTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ICourseDefinedByTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CourseGPAApplicabilityType

namespace EdFi.Ods.Api.Models.Resources.V2.CourseGPAApplicabilityType
{
    /// <summary>
    /// A class which represents the edfi.CourseGPAApplicabilityType table of the CourseGPAApplicabilityType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CourseGPAApplicabilityType : ICourseGPAApplicabilityType, IHasETag, ICourseGPAApplicabilityTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CourseGPAApplicabilityType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for CourseGPAApplicability
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="courseGPAApplicabilityTypeId"), NaturalKeyMember]
        public int CourseGPAApplicabilityTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICourseGPAApplicabilityType).CourseGPAApplicabilityTypeId != null) 
                    hash = hash * 23 + (this as ICourseGPAApplicabilityType).CourseGPAApplicabilityTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the CourseGPAApplicability type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the CourseGPAApplicability type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICourseGPAApplicabilityType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICourseGPAApplicabilityType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICourseGPAApplicabilityTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ICourseGPAApplicabilityTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ICourseGPAApplicabilityTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CourseIdentificationSystemDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.CourseIdentificationSystemDescriptor
{
    /// <summary>
    /// A class which represents the edfi.CourseIdentificationSystemDescriptor table of the CourseIdentificationSystemDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CourseIdentificationSystemDescriptor : ICourseIdentificationSystemDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, ICourseIdentificationSystemDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CourseIdentificationSystemDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="courseIdentificationSystemDescriptorId"), NaturalKeyMember]
        public int CourseIdentificationSystemDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return CourseIdentificationSystemDescriptorId; }
            set { CourseIdentificationSystemDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as ICourseIdentificationSystemDescriptor).CourseIdentificationSystemDescriptorId != null) 
                    hash = hash * 23 + (this as ICourseIdentificationSystemDescriptor).CourseIdentificationSystemDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="courseIdentificationSystemType")]
        public string CourseIdentificationSystemType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICourseIdentificationSystemDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICourseIdentificationSystemDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICourseIdentificationSystemDescriptorSynchronizationSourceSupport.IsCodeValueSupported                       { get { return true; } set { } }
 
        bool ICourseIdentificationSystemDescriptorSynchronizationSourceSupport.IsCourseIdentificationSystemTypeSupported  { get { return true; } set { } }
 
        bool ICourseIdentificationSystemDescriptorSynchronizationSourceSupport.IsDescriptionSupported                     { get { return true; } set { } }
 
        bool ICourseIdentificationSystemDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported              { get { return true; } set { } }
 
        bool ICourseIdentificationSystemDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported                { get { return true; } set { } }
 
        bool ICourseIdentificationSystemDescriptorSynchronizationSourceSupport.IsNamespaceSupported                       { get { return true; } set { } }
 
        bool ICourseIdentificationSystemDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported               { get { return true; } set { } }
 
        bool ICourseIdentificationSystemDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported                { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CourseIdentificationSystemType

namespace EdFi.Ods.Api.Models.Resources.V2.CourseIdentificationSystemType
{
    /// <summary>
    /// A class which represents the edfi.CourseIdentificationSystemType table of the CourseIdentificationSystemType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CourseIdentificationSystemType : ICourseIdentificationSystemType, IHasETag, ICourseIdentificationSystemTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CourseIdentificationSystemType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for CourseIdentificationSystem
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="courseIdentificationSystemTypeId"), NaturalKeyMember]
        public int CourseIdentificationSystemTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICourseIdentificationSystemType).CourseIdentificationSystemTypeId != null) 
                    hash = hash * 23 + (this as ICourseIdentificationSystemType).CourseIdentificationSystemTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the CourseIdentificationSystem type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the CourseIdentificationSystem type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICourseIdentificationSystemType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICourseIdentificationSystemType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICourseIdentificationSystemTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ICourseIdentificationSystemTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ICourseIdentificationSystemTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CourseLevelCharacteristicType

namespace EdFi.Ods.Api.Models.Resources.V2.CourseLevelCharacteristicType
{
    /// <summary>
    /// A class which represents the edfi.CourseLevelCharacteristicType table of the CourseLevelCharacteristicType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CourseLevelCharacteristicType : ICourseLevelCharacteristicType, IHasETag, ICourseLevelCharacteristicTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CourseLevelCharacteristicType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for CourseLevelCharacteristic
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="courseLevelCharacteristicTypeId"), NaturalKeyMember]
        public int CourseLevelCharacteristicTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICourseLevelCharacteristicType).CourseLevelCharacteristicTypeId != null) 
                    hash = hash * 23 + (this as ICourseLevelCharacteristicType).CourseLevelCharacteristicTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the CourseLevelCharacteristic type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the CourseLevelCharacteristic type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICourseLevelCharacteristicType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICourseLevelCharacteristicType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICourseLevelCharacteristicTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ICourseLevelCharacteristicTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ICourseLevelCharacteristicTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CourseOffering

namespace EdFi.Ods.Api.Models.Resources.V2.CourseOffering
{
    /// <summary>
    /// Represents a reference to the CourseOffering resource.
    /// </summary>
    [DataContract]
    public class CourseOfferingReference
    {
        [DataMember(Name="localCourseCode"), NaturalKeyMember]
        public string LocalCourseCode { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "CourseOffering",
                            Href = "/courseOfferings"
                                    + "?localCourseCode=" + WebUtility.UrlEncode(LocalCourseCode)            
                                    + "&schoolId=" + SchoolId            
                                    + "&schoolYear=" + SchoolYear            
                                    + "&termDescriptor=" + WebUtility.UrlEncode(TermDescriptor)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return LocalCourseCode != default(string)
                && SchoolId != default(int)
                && SchoolYear != default(short)
                && TermDescriptor != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.CourseOffering table of the CourseOffering aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CourseOffering : ICourseOffering, IHasETag, ICourseOfferingSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public CourseOffering()
        {
            CourseOfferingCurriculumUseds = new List<CourseOfferingCurriculumUsed>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CourseOffering resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _courseReferenceExplicitlyAssigned;
        private Course.CourseReference _courseReference;
        private Course.CourseReference ImplicitCourseReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_courseReference == null && !_courseReferenceExplicitlyAssigned)
                    _courseReference = new Course.CourseReference();

                return _courseReference;
            }
        }

        [DataMember(Name="courseReference")]
        public Course.CourseReference CourseReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitCourseReference != null
                    && (_courseReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCourseReference.IsReferenceFullyDefined()))
                    return ImplicitCourseReference;

                return null;
            }
            set 
            { 
                _courseReferenceExplicitlyAssigned = true;
                _courseReference = value;
            }
        }
        private bool _schoolReferenceExplicitlyAssigned;
        private School.SchoolReference _schoolReference;
        private School.SchoolReference ImplicitSchoolReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolReference == null && !_schoolReferenceExplicitlyAssigned)
                    _schoolReference = new School.SchoolReference();

                return _schoolReference;
            }
        }

        [DataMember(Name="schoolReference")][NaturalKeyMember]
        public School.SchoolReference SchoolReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolReference != null
                    && (_schoolReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference;

                return null;
            }
            set 
            { 
                _schoolReferenceExplicitlyAssigned = true;
                _schoolReference = value;
            }
        }
        private bool _sessionReferenceExplicitlyAssigned;
        private Session.SessionReference _sessionReference;
        private Session.SessionReference ImplicitSessionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_sessionReference == null && !_sessionReferenceExplicitlyAssigned)
                    _sessionReference = new Session.SessionReference();

                return _sessionReference;
            }
        }

        [DataMember(Name="sessionReference")][NaturalKeyMember]
        public Session.SessionReference SessionReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSessionReference != null
                    && (_sessionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSessionReference.IsReferenceFullyDefined()))
                    return ImplicitSessionReference;

                return null;
            }
            set 
            { 
                _sessionReferenceExplicitlyAssigned = true;
                _sessionReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="localCourseCode"), NaturalKeyMember]
        public string LocalCourseCode { get; set; }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int ICourseOffering.SchoolId
        {
            get
            {
                if (ImplicitSchoolReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // School
                _schoolReferenceExplicitlyAssigned = false;
                ImplicitSchoolReference.SchoolId = value;

                // Session
                _sessionReferenceExplicitlyAssigned = false;
                ImplicitSessionReference.SchoolId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short ICourseOffering.SchoolYear
        {
            get
            {
                if (ImplicitSessionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSessionReference.IsReferenceFullyDefined()))
                    return ImplicitSessionReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Session
                _sessionReferenceExplicitlyAssigned = false;
                ImplicitSessionReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// The term for the Session during the school year.
        /// </summary>

        // IS in a reference (CourseOffering.TermDescriptorId), IS a lookup column 
        string ICourseOffering.TermDescriptor
        {
            get
            {
                if (ImplicitSessionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSessionReference.IsReferenceFullyDefined()))
                    return ImplicitSessionReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitSessionReference.TermDescriptor = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICourseOffering).LocalCourseCode != null) 
                    hash = hash * 23 + (this as ICourseOffering).LocalCourseCode.GetHashCode();
 
                //Referenced Property
                if ((this as ICourseOffering).SchoolId != null) 
                    hash = hash * 23 + (this as ICourseOffering).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as ICourseOffering).SchoolYear != null) 
                    hash = hash * 23 + (this as ICourseOffering).SchoolYear.GetHashCode();
 
                //Unified Type Property
                if ((this as ICourseOffering).TermDescriptor != null) 
                    hash = hash * 23 + (this as ICourseOffering).TermDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a course.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ICourseOffering.CourseCode
        {
            get
            {
                if (ImplicitCourseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCourseReference.IsReferenceFullyDefined()))
                    return ImplicitCourseReference.CourseCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Course
                _courseReferenceExplicitlyAssigned = false;
                ImplicitCourseReference.CourseCode = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int ICourseOffering.EducationOrganizationId
        {
            get
            {
                if (ImplicitCourseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCourseReference.IsReferenceFullyDefined()))
                    return ImplicitCourseReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Course
                _courseReferenceExplicitlyAssigned = false;
                ImplicitCourseReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The planned total number of clock minutes of instruction for this course offering. Generally, this should be at least as many minutes as is required for completion by the related state- or district-defined course.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="instructionalTimePlanned")]
        public int? InstructionalTimePlanned { get; set; }

        /// <summary>
        /// The descriptive name given to a course of study offered in the school, if different from the CourseTitle.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="localCourseTitle")]
        public string LocalCourseTitle { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<CourseOfferingCurriculumUsed> _courseOfferingCurriculumUseds;
        private IList<ICourseOfferingCurriculumUsed> _courseOfferingCurriculumUsedsCovariant;

        [DataMember(Name="curriculumUseds")]
        public IList<CourseOfferingCurriculumUsed> CourseOfferingCurriculumUseds 
        { 
            get { return _courseOfferingCurriculumUseds; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<CourseOfferingCurriculumUsed>(value,
                    (s, e) => ((ICourseOfferingCurriculumUsed)e.Item).CourseOffering = this);
                _courseOfferingCurriculumUseds = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ICourseOfferingCurriculumUsed, CourseOfferingCurriculumUsed>(value);
                covariantList.ItemAdded += (s, e) => ((ICourseOfferingCurriculumUsed)e.Item).CourseOffering = this;
                _courseOfferingCurriculumUsedsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ICourseOfferingCurriculumUsed> ICourseOffering.CourseOfferingCurriculumUseds
        {
            get { return _courseOfferingCurriculumUsedsCovariant; }
            set { CourseOfferingCurriculumUseds = new List<CourseOfferingCurriculumUsed>(value.Cast<CourseOfferingCurriculumUsed>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_courseOfferingCurriculumUseds != null) foreach (var item in _courseOfferingCurriculumUseds)
            {
                item.CourseOffering = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICourseOffering)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICourseOffering) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICourseOfferingSynchronizationSourceSupport.IsCourseCodeSupported                     { get { return true; } set { } }
 
        bool ICourseOfferingSynchronizationSourceSupport.IsCourseOfferingCurriculumUsedsSupported  { get { return true; } set { } }
 
        bool ICourseOfferingSynchronizationSourceSupport.IsEducationOrganizationIdSupported        { get { return true; } set { } }
 
        bool ICourseOfferingSynchronizationSourceSupport.IsInstructionalTimePlannedSupported       { get { return true; } set { } }
 
        bool ICourseOfferingSynchronizationSourceSupport.IsLocalCourseTitleSupported               { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<ICourseOfferingCurriculumUsed, bool> ICourseOfferingSynchronizationSourceSupport.IsCourseOfferingCurriculumUsedIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.CourseOfferingCurriculumUsed table of the CourseOffering aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CourseOfferingCurriculumUsed : ICourseOfferingCurriculumUsed, ICourseOfferingCurriculumUsedSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ICourseOffering _courseOffering;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ICourseOffering ICourseOfferingCurriculumUsed.CourseOffering
        {
            get { return _courseOffering; }
            set { _courseOffering = value; }
        }

        internal ICourseOffering CourseOffering
        {
            set { _courseOffering = value; }
        }

        /// <summary>
        /// The type of curriculum used in an early learning classroom or group.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="curriculumUsedType"), NaturalKeyMember]
        public string CurriculumUsedType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_courseOffering != null) 
                    hash = hash * 23 + _courseOffering.GetHashCode();
 
                // Standard Property
                if ((this as ICourseOfferingCurriculumUsed).CurriculumUsedType != null) 
                    hash = hash * 23 + (this as ICourseOfferingCurriculumUsed).CurriculumUsedType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICourseOfferingCurriculumUsed)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICourseOfferingCurriculumUsed) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: CourseRepeatCodeType

namespace EdFi.Ods.Api.Models.Resources.V2.CourseRepeatCodeType
{
    /// <summary>
    /// A class which represents the edfi.CourseRepeatCodeType table of the CourseRepeatCodeType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CourseRepeatCodeType : ICourseRepeatCodeType, IHasETag, ICourseRepeatCodeTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CourseRepeatCodeType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for CourseRepeatCode
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="courseRepeatCodeTypeId"), NaturalKeyMember]
        public int CourseRepeatCodeTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICourseRepeatCodeType).CourseRepeatCodeTypeId != null) 
                    hash = hash * 23 + (this as ICourseRepeatCodeType).CourseRepeatCodeTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the CourseRepeatCode type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the CourseRepeatCode type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICourseRepeatCodeType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICourseRepeatCodeType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICourseRepeatCodeTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ICourseRepeatCodeTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ICourseRepeatCodeTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CourseTranscript

namespace EdFi.Ods.Api.Models.Resources.V2.CourseTranscript
{
    /// <summary>
    /// Represents a reference to the CourseTranscript resource.
    /// </summary>
    [DataContract]
    public class CourseTranscriptReference
    {
        [DataMember(Name="courseAttemptResultType"), NaturalKeyMember]
        public string CourseAttemptResultType { get; set; }

        [DataMember(Name="courseCode"), NaturalKeyMember]
        public string CourseCode { get; set; }

        [DataMember(Name="courseEducationOrganizationId"), NaturalKeyMember]
        public int CourseEducationOrganizationId { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "CourseTranscript",
                            Href = "/courseTranscripts"
                                    + "?courseAttemptResultType=" + WebUtility.UrlEncode(CourseAttemptResultType)            
                                    + "&courseCode=" + WebUtility.UrlEncode(CourseCode)            
                                    + "&courseEducationOrganizationId=" + CourseEducationOrganizationId            
                                    + "&educationOrganizationId=" + EducationOrganizationId            
                                    + "&schoolYear=" + SchoolYear            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                                    + "&termDescriptor=" + WebUtility.UrlEncode(TermDescriptor)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return CourseAttemptResultType != default(string)
                && CourseCode != default(string)
                && CourseEducationOrganizationId != default(int)
                && EducationOrganizationId != default(int)
                && SchoolYear != default(short)
                && StudentUniqueId != default(string)
                && TermDescriptor != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.CourseTranscript table of the CourseTranscript aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CourseTranscript : ICourseTranscript, IHasETag, ICourseTranscriptSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public CourseTranscript()
        {
            CourseTranscriptEarnedAdditionalCredits = new List<CourseTranscriptEarnedAdditionalCredits>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CourseTranscript resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _courseReferenceExplicitlyAssigned;
        private Course.CourseReference _courseReference;
        private Course.CourseReference ImplicitCourseReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_courseReference == null && !_courseReferenceExplicitlyAssigned)
                    _courseReference = new Course.CourseReference();

                return _courseReference;
            }
        }

        [DataMember(Name="courseReference")][NaturalKeyMember]
        public Course.CourseReference CourseReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitCourseReference != null
                    && (_courseReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCourseReference.IsReferenceFullyDefined()))
                    return ImplicitCourseReference;

                return null;
            }
            set 
            { 
                _courseReferenceExplicitlyAssigned = true;
                _courseReference = value;
            }
        }
        private bool _schoolReferenceExplicitlyAssigned;
        private School.SchoolReference _schoolReference;
        private School.SchoolReference ImplicitSchoolReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolReference == null && !_schoolReferenceExplicitlyAssigned)
                    _schoolReference = new School.SchoolReference();

                return _schoolReference;
            }
        }

        [DataMember(Name="schoolReference")]
        public School.SchoolReference SchoolReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolReference != null
                    && (_schoolReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference;

                return null;
            }
            set 
            { 
                _schoolReferenceExplicitlyAssigned = true;
                _schoolReference = value;
            }
        }
        private bool _studentAcademicRecordReferenceExplicitlyAssigned;
        private StudentAcademicRecord.StudentAcademicRecordReference _studentAcademicRecordReference;
        private StudentAcademicRecord.StudentAcademicRecordReference ImplicitStudentAcademicRecordReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentAcademicRecordReference == null && !_studentAcademicRecordReferenceExplicitlyAssigned)
                    _studentAcademicRecordReference = new StudentAcademicRecord.StudentAcademicRecordReference();

                return _studentAcademicRecordReference;
            }
        }

        [DataMember(Name="studentAcademicRecordReference")][NaturalKeyMember]
        public StudentAcademicRecord.StudentAcademicRecordReference StudentAcademicRecordReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentAcademicRecordReference != null
                    && (_studentAcademicRecordReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentAcademicRecordReference.IsReferenceFullyDefined()))
                    return ImplicitStudentAcademicRecordReference;

                return null;
            }
            set 
            { 
                _studentAcademicRecordReferenceExplicitlyAssigned = true;
                _studentAcademicRecordReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The result from the student's attempt to take the course, for example:          Pass          Fail          Incomplete          Withdrawn.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="courseAttemptResultType"), NaturalKeyMember]
        public string CourseAttemptResultType { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a course.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ICourseTranscript.CourseCode
        {
            get
            {
                if (ImplicitCourseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCourseReference.IsReferenceFullyDefined()))
                    return ImplicitCourseReference.CourseCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Course
                _courseReferenceExplicitlyAssigned = false;
                ImplicitCourseReference.CourseCode = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int ICourseTranscript.CourseEducationOrganizationId
        {
            get
            {
                if (ImplicitCourseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCourseReference.IsReferenceFullyDefined()))
                    return ImplicitCourseReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Course
                _courseReferenceExplicitlyAssigned = false;
                ImplicitCourseReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int ICourseTranscript.EducationOrganizationId
        {
            get
            {
                if (ImplicitStudentAcademicRecordReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentAcademicRecordReference.IsReferenceFullyDefined()))
                    return ImplicitStudentAcademicRecordReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentAcademicRecord
                _studentAcademicRecordReferenceExplicitlyAssigned = false;
                ImplicitStudentAcademicRecordReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short ICourseTranscript.SchoolYear
        {
            get
            {
                if (ImplicitStudentAcademicRecordReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentAcademicRecordReference.IsReferenceFullyDefined()))
                    return ImplicitStudentAcademicRecordReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentAcademicRecord
                _studentAcademicRecordReferenceExplicitlyAssigned = false;
                ImplicitStudentAcademicRecordReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ICourseTranscript.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentAcademicRecordReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentAcademicRecordReference.IsReferenceFullyDefined()))
                    return ImplicitStudentAcademicRecordReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentAcademicRecord
                _studentAcademicRecordReferenceExplicitlyAssigned = false;
                ImplicitStudentAcademicRecordReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (CourseTranscript.TermDescriptorId), IS a lookup column 
        string ICourseTranscript.TermDescriptor
        {
            get
            {
                if (ImplicitStudentAcademicRecordReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentAcademicRecordReference.IsReferenceFullyDefined()))
                    return ImplicitStudentAcademicRecordReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitStudentAcademicRecordReference.TermDescriptor = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICourseTranscript).CourseAttemptResultType != null) 
                    hash = hash * 23 + (this as ICourseTranscript).CourseAttemptResultType.GetHashCode();
 
                //Referenced Property
                if ((this as ICourseTranscript).CourseCode != null) 
                    hash = hash * 23 + (this as ICourseTranscript).CourseCode.GetHashCode();
 
                //Referenced Property
                if ((this as ICourseTranscript).CourseEducationOrganizationId != null) 
                    hash = hash * 23 + (this as ICourseTranscript).CourseEducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as ICourseTranscript).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as ICourseTranscript).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as ICourseTranscript).SchoolYear != null) 
                    hash = hash * 23 + (this as ICourseTranscript).SchoolYear.GetHashCode();
 
                //Referenced Property
                if ((this as ICourseTranscript).StudentUniqueId != null) 
                    hash = hash * 23 + (this as ICourseTranscript).StudentUniqueId.GetHashCode();
 
                //Unified Type Property
                if ((this as ICourseTranscript).TermDescriptor != null) 
                    hash = hash * 23 + (this as ICourseTranscript).TermDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="alternativeCourseCode")]
        public string AlternativeCourseCode { get; set; }

        /// <summary>
        /// The descriptive name given to a course of study offered in the school, if different from the CourseTitle.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="alternativeCourseTitle")]
        public string AlternativeCourseTitle { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="attemptedCreditConversion")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? AttemptedCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="attemptedCredits")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? AttemptedCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="attemptedCreditType")]
        public string AttemptedCreditType { get; set; }

        /// <summary>
        /// Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student's academic grade average.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="courseRepeatCodeType")]
        public string CourseRepeatCodeType { get; set; }

        /// <summary>
        /// The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="courseTitle")]
        public string CourseTitle { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="earnedCreditConversion")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? EarnedCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="earnedCredits")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal EarnedCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="earnedCreditType")]
        public string EarnedCreditType { get; set; }

        /// <summary>
        /// The final indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="finalLetterGradeEarned")]
        public string FinalLetterGradeEarned { get; set; }

        /// <summary>
        /// The final indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="finalNumericGradeEarned")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? FinalNumericGradeEarned { get; set; }

        /// <summary>
        /// The method the credits were earned (e.g., Classroom, Examination, Transfer).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="methodCreditEarnedType")]
        public string MethodCreditEarnedType { get; set; }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? ICourseTranscript.SchoolId
        {
            get
            {
                if (ImplicitSchoolReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference.SchoolId;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // School
                _schoolReferenceExplicitlyAssigned = false;
                ImplicitSchoolReference.SchoolId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// Student's grade level at time of course.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="whenTakenGradeLevelDescriptor")]
        public string WhenTakenGradeLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<CourseTranscriptEarnedAdditionalCredits> _courseTranscriptEarnedAdditionalCredits;
        private IList<ICourseTranscriptEarnedAdditionalCredits> _courseTranscriptEarnedAdditionalCreditsCovariant;

        [DataMember(Name="earnedAdditionalCredits")]
        public IList<CourseTranscriptEarnedAdditionalCredits> CourseTranscriptEarnedAdditionalCredits 
        { 
            get { return _courseTranscriptEarnedAdditionalCredits; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<CourseTranscriptEarnedAdditionalCredits>(value,
                    (s, e) => ((ICourseTranscriptEarnedAdditionalCredits)e.Item).CourseTranscript = this);
                _courseTranscriptEarnedAdditionalCredits = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ICourseTranscriptEarnedAdditionalCredits, CourseTranscriptEarnedAdditionalCredits>(value);
                covariantList.ItemAdded += (s, e) => ((ICourseTranscriptEarnedAdditionalCredits)e.Item).CourseTranscript = this;
                _courseTranscriptEarnedAdditionalCreditsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ICourseTranscriptEarnedAdditionalCredits> ICourseTranscript.CourseTranscriptEarnedAdditionalCredits
        {
            get { return _courseTranscriptEarnedAdditionalCreditsCovariant; }
            set { CourseTranscriptEarnedAdditionalCredits = new List<CourseTranscriptEarnedAdditionalCredits>(value.Cast<CourseTranscriptEarnedAdditionalCredits>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_courseTranscriptEarnedAdditionalCredits != null) foreach (var item in _courseTranscriptEarnedAdditionalCredits)
            {
                item.CourseTranscript = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICourseTranscript)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICourseTranscript) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICourseTranscriptSynchronizationSourceSupport.IsAlternativeCourseCodeSupported                    { get { return true; } set { } }
 
        bool ICourseTranscriptSynchronizationSourceSupport.IsAlternativeCourseTitleSupported                   { get { return true; } set { } }
 
        bool ICourseTranscriptSynchronizationSourceSupport.IsAttemptedCreditConversionSupported                { get { return true; } set { } }
 
        bool ICourseTranscriptSynchronizationSourceSupport.IsAttemptedCreditsSupported                         { get { return true; } set { } }
 
        bool ICourseTranscriptSynchronizationSourceSupport.IsAttemptedCreditTypeSupported                      { get { return true; } set { } }
 
        bool ICourseTranscriptSynchronizationSourceSupport.IsCourseRepeatCodeTypeSupported                     { get { return true; } set { } }
 
        bool ICourseTranscriptSynchronizationSourceSupport.IsCourseTitleSupported                              { get { return true; } set { } }
 
        bool ICourseTranscriptSynchronizationSourceSupport.IsCourseTranscriptEarnedAdditionalCreditsSupported  { get { return true; } set { } }
 
        bool ICourseTranscriptSynchronizationSourceSupport.IsEarnedCreditConversionSupported                   { get { return true; } set { } }
 
        bool ICourseTranscriptSynchronizationSourceSupport.IsEarnedCreditsSupported                            { get { return true; } set { } }
 
        bool ICourseTranscriptSynchronizationSourceSupport.IsEarnedCreditTypeSupported                         { get { return true; } set { } }
 
        bool ICourseTranscriptSynchronizationSourceSupport.IsFinalLetterGradeEarnedSupported                   { get { return true; } set { } }
 
        bool ICourseTranscriptSynchronizationSourceSupport.IsFinalNumericGradeEarnedSupported                  { get { return true; } set { } }
 
        bool ICourseTranscriptSynchronizationSourceSupport.IsMethodCreditEarnedTypeSupported                   { get { return true; } set { } }
 
        bool ICourseTranscriptSynchronizationSourceSupport.IsSchoolIdSupported                                 { get { return true; } set { } }
 
        bool ICourseTranscriptSynchronizationSourceSupport.IsWhenTakenGradeLevelDescriptorSupported            { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<ICourseTranscriptEarnedAdditionalCredits, bool> ICourseTranscriptSynchronizationSourceSupport.IsCourseTranscriptEarnedAdditionalCreditsIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.CourseTranscriptEarnedAdditionalCredits table of the CourseTranscript aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CourseTranscriptEarnedAdditionalCredits : ICourseTranscriptEarnedAdditionalCredits, ICourseTranscriptEarnedAdditionalCreditsSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ICourseTranscript _courseTranscript;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ICourseTranscript ICourseTranscriptEarnedAdditionalCredits.CourseTranscript
        {
            get { return _courseTranscript; }
            set { _courseTranscript = value; }
        }

        internal ICourseTranscript CourseTranscript
        {
            set { _courseTranscript = value; }
        }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="additionalCreditType"), NaturalKeyMember]
        public string AdditionalCreditType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_courseTranscript != null) 
                    hash = hash * 23 + _courseTranscript.GetHashCode();
 
                // Standard Property
                if ((this as ICourseTranscriptEarnedAdditionalCredits).AdditionalCreditType != null) 
                    hash = hash * 23 + (this as ICourseTranscriptEarnedAdditionalCredits).AdditionalCreditType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="credits")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal Credits { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICourseTranscriptEarnedAdditionalCredits)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICourseTranscriptEarnedAdditionalCredits) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICourseTranscriptEarnedAdditionalCreditsSynchronizationSourceSupport.IsCreditsSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CredentialFieldDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.CredentialFieldDescriptor
{
    /// <summary>
    /// A class which represents the edfi.CredentialFieldDescriptor table of the CredentialFieldDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CredentialFieldDescriptor : ICredentialFieldDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, ICredentialFieldDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CredentialFieldDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="credentialFieldDescriptorId"), NaturalKeyMember]
        public int CredentialFieldDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return CredentialFieldDescriptorId; }
            set { CredentialFieldDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as ICredentialFieldDescriptor).CredentialFieldDescriptorId != null) 
                    hash = hash * 23 + (this as ICredentialFieldDescriptor).CredentialFieldDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A classification of the certification fields to academic subjects.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="academicSubjectDescriptor")]
        public string AcademicSubjectDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICredentialFieldDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICredentialFieldDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICredentialFieldDescriptorSynchronizationSourceSupport.IsAcademicSubjectDescriptorSupported  { get { return true; } set { } }
 
        bool ICredentialFieldDescriptorSynchronizationSourceSupport.IsCodeValueSupported                  { get { return true; } set { } }
 
        bool ICredentialFieldDescriptorSynchronizationSourceSupport.IsDescriptionSupported                { get { return true; } set { } }
 
        bool ICredentialFieldDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported         { get { return true; } set { } }
 
        bool ICredentialFieldDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported           { get { return true; } set { } }
 
        bool ICredentialFieldDescriptorSynchronizationSourceSupport.IsNamespaceSupported                  { get { return true; } set { } }
 
        bool ICredentialFieldDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported          { get { return true; } set { } }
 
        bool ICredentialFieldDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported           { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CredentialType

namespace EdFi.Ods.Api.Models.Resources.V2.CredentialType
{
    /// <summary>
    /// A class which represents the edfi.CredentialType table of the CredentialType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CredentialType : ICredentialType, IHasETag, ICredentialTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CredentialType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Credential
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="credentialTypeId"), NaturalKeyMember]
        public int CredentialTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICredentialType).CredentialTypeId != null) 
                    hash = hash * 23 + (this as ICredentialType).CredentialTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Credential type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Credential type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICredentialType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICredentialType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICredentialTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ICredentialTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ICredentialTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CreditType

namespace EdFi.Ods.Api.Models.Resources.V2.CreditType
{
    /// <summary>
    /// A class which represents the edfi.CreditType table of the CreditType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CreditType : ICreditType, IHasETag, ICreditTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CreditType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Credit
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="creditTypeId"), NaturalKeyMember]
        public int CreditTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICreditType).CreditTypeId != null) 
                    hash = hash * 23 + (this as ICreditType).CreditTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Credit type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Credit type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICreditType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICreditType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICreditTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ICreditTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ICreditTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: CurriculumUsedType

namespace EdFi.Ods.Api.Models.Resources.V2.CurriculumUsedType
{
    /// <summary>
    /// A class which represents the edfi.CurriculumUsedType table of the CurriculumUsedType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class CurriculumUsedType : ICurriculumUsedType, IHasETag, ICurriculumUsedTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the CurriculumUsedType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for CurriculumUsed
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="curriculumUsedTypeId"), NaturalKeyMember]
        public int CurriculumUsedTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ICurriculumUsedType).CurriculumUsedTypeId != null) 
                    hash = hash * 23 + (this as ICurriculumUsedType).CurriculumUsedTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the CurriculumUsed type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the CurriculumUsed type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ICurriculumUsedType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ICurriculumUsedType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ICurriculumUsedTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ICurriculumUsedTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ICurriculumUsedTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: DeliveryMethodType

namespace EdFi.Ods.Api.Models.Resources.V2.DeliveryMethodType
{
    /// <summary>
    /// A class which represents the edfi.DeliveryMethodType table of the DeliveryMethodType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class DeliveryMethodType : IDeliveryMethodType, IHasETag, IDeliveryMethodTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the DeliveryMethodType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for DeliveryMethod
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="deliveryMethodTypeId"), NaturalKeyMember]
        public int DeliveryMethodTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IDeliveryMethodType).DeliveryMethodTypeId != null) 
                    hash = hash * 23 + (this as IDeliveryMethodType).DeliveryMethodTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the DeliveryMethod type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the DeliveryMethod type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IDeliveryMethodType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IDeliveryMethodType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IDeliveryMethodTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IDeliveryMethodTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IDeliveryMethodTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: Descriptor

namespace EdFi.Ods.Api.Models.Resources.V2.Descriptor
{
    /// <summary>
    /// Represents a reference to the Descriptor resource.
    /// </summary>
    [DataContract]
    public class DescriptorReference
    {
        [DataMember(Name="descriptorId"), NaturalKeyMember]
        public int DescriptorId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "Descriptor",
                            Href = "/descriptors"
                                    + "?descriptorId=" + DescriptorId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return DescriptorId != default(int)
                ;
        }
    } // Aggregate reference

}
// Aggregate: DiagnosisDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.DiagnosisDescriptor
{
    /// <summary>
    /// A class which represents the edfi.DiagnosisDescriptor table of the DiagnosisDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class DiagnosisDescriptor : IDiagnosisDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IDiagnosisDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the DiagnosisDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="diagnosisDescriptorId"), NaturalKeyMember]
        public int DiagnosisDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return DiagnosisDescriptorId; }
            set { DiagnosisDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IDiagnosisDescriptor).DiagnosisDescriptorId != null) 
                    hash = hash * 23 + (this as IDiagnosisDescriptor).DiagnosisDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="diagnosisType")]
        public string DiagnosisType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IDiagnosisDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IDiagnosisDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IDiagnosisDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
 
        bool IDiagnosisDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
 
        bool IDiagnosisDescriptorSynchronizationSourceSupport.IsDiagnosisTypeSupported       { get { return true; } set { } }
 
        bool IDiagnosisDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
 
        bool IDiagnosisDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
 
        bool IDiagnosisDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
 
        bool IDiagnosisDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
 
        bool IDiagnosisDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: DiagnosisType

namespace EdFi.Ods.Api.Models.Resources.V2.DiagnosisType
{
    /// <summary>
    /// A class which represents the edfi.DiagnosisType table of the DiagnosisType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class DiagnosisType : IDiagnosisType, IHasETag, IDiagnosisTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the DiagnosisType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Diagnosis
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="diagnosisTypeId"), NaturalKeyMember]
        public int DiagnosisTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IDiagnosisType).DiagnosisTypeId != null) 
                    hash = hash * 23 + (this as IDiagnosisType).DiagnosisTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Diagnosis type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Diagnosis type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IDiagnosisType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IDiagnosisType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IDiagnosisTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IDiagnosisTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IDiagnosisTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: DiplomaLevelType

namespace EdFi.Ods.Api.Models.Resources.V2.DiplomaLevelType
{
    /// <summary>
    /// A class which represents the edfi.DiplomaLevelType table of the DiplomaLevelType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class DiplomaLevelType : IDiplomaLevelType, IHasETag, IDiplomaLevelTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the DiplomaLevelType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for DiplomaLevel
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="diplomaLevelTypeId"), NaturalKeyMember]
        public int DiplomaLevelTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IDiplomaLevelType).DiplomaLevelTypeId != null) 
                    hash = hash * 23 + (this as IDiplomaLevelType).DiplomaLevelTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the DiplomaLevel type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the DiplomaLevel type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IDiplomaLevelType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IDiplomaLevelType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IDiplomaLevelTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IDiplomaLevelTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IDiplomaLevelTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: DiplomaType

namespace EdFi.Ods.Api.Models.Resources.V2.DiplomaType
{
    /// <summary>
    /// A class which represents the edfi.DiplomaType table of the DiplomaType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class DiplomaType : IDiplomaType, IHasETag, IDiplomaTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the DiplomaType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Diploma
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="diplomaTypeId"), NaturalKeyMember]
        public int DiplomaTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IDiplomaType).DiplomaTypeId != null) 
                    hash = hash * 23 + (this as IDiplomaType).DiplomaTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Diploma type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Diploma type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IDiplomaType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IDiplomaType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IDiplomaTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IDiplomaTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IDiplomaTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: DisabilityCategoryType

namespace EdFi.Ods.Api.Models.Resources.V2.DisabilityCategoryType
{
    /// <summary>
    /// A class which represents the edfi.DisabilityCategoryType table of the DisabilityCategoryType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class DisabilityCategoryType : IDisabilityCategoryType, IHasETag, IDisabilityCategoryTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the DisabilityCategoryType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for DisabilityCategory
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="disabilityCategoryTypeId"), NaturalKeyMember]
        public int DisabilityCategoryTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IDisabilityCategoryType).DisabilityCategoryTypeId != null) 
                    hash = hash * 23 + (this as IDisabilityCategoryType).DisabilityCategoryTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the DisabilityCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the DisabilityCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IDisabilityCategoryType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IDisabilityCategoryType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IDisabilityCategoryTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IDisabilityCategoryTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IDisabilityCategoryTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: DisabilityDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.DisabilityDescriptor
{
    /// <summary>
    /// A class which represents the edfi.DisabilityDescriptor table of the DisabilityDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class DisabilityDescriptor : IDisabilityDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IDisabilityDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the DisabilityDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="disabilityDescriptorId"), NaturalKeyMember]
        public int DisabilityDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return DisabilityDescriptorId; }
            set { DisabilityDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IDisabilityDescriptor).DisabilityDescriptorId != null) 
                    hash = hash * 23 + (this as IDisabilityDescriptor).DisabilityDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Whether the disability code is IDEA, Section 504, or other disability designation.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="disabilityCategoryType")]
        public string DisabilityCategoryType { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="disabilityType")]
        public string DisabilityType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IDisabilityDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IDisabilityDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IDisabilityDescriptorSynchronizationSourceSupport.IsCodeValueSupported               { get { return true; } set { } }
 
        bool IDisabilityDescriptorSynchronizationSourceSupport.IsDescriptionSupported             { get { return true; } set { } }
 
        bool IDisabilityDescriptorSynchronizationSourceSupport.IsDisabilityCategoryTypeSupported  { get { return true; } set { } }
 
        bool IDisabilityDescriptorSynchronizationSourceSupport.IsDisabilityTypeSupported          { get { return true; } set { } }
 
        bool IDisabilityDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported      { get { return true; } set { } }
 
        bool IDisabilityDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported        { get { return true; } set { } }
 
        bool IDisabilityDescriptorSynchronizationSourceSupport.IsNamespaceSupported               { get { return true; } set { } }
 
        bool IDisabilityDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported       { get { return true; } set { } }
 
        bool IDisabilityDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported        { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: DisabilityDeterminationSourceType

namespace EdFi.Ods.Api.Models.Resources.V2.DisabilityDeterminationSourceType
{
    /// <summary>
    /// A class which represents the edfi.DisabilityDeterminationSourceType table of the DisabilityDeterminationSourceType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class DisabilityDeterminationSourceType : IDisabilityDeterminationSourceType, IHasETag, IDisabilityDeterminationSourceTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the DisabilityDeterminationSourceType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for DisabilityDeterminationSource
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="disabilityDeterminationSourceTypeId"), NaturalKeyMember]
        public int DisabilityDeterminationSourceTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IDisabilityDeterminationSourceType).DisabilityDeterminationSourceTypeId != null) 
                    hash = hash * 23 + (this as IDisabilityDeterminationSourceType).DisabilityDeterminationSourceTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the DisabilityDeterminationSource type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the DisabilityDeterminationSource type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IDisabilityDeterminationSourceType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IDisabilityDeterminationSourceType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IDisabilityDeterminationSourceTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IDisabilityDeterminationSourceTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IDisabilityDeterminationSourceTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: DisabilityType

namespace EdFi.Ods.Api.Models.Resources.V2.DisabilityType
{
    /// <summary>
    /// A class which represents the edfi.DisabilityType table of the DisabilityType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class DisabilityType : IDisabilityType, IHasETag, IDisabilityTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the DisabilityType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Disability
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="disabilityTypeId"), NaturalKeyMember]
        public int DisabilityTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IDisabilityType).DisabilityTypeId != null) 
                    hash = hash * 23 + (this as IDisabilityType).DisabilityTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Disability type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Disability type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IDisabilityType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IDisabilityType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IDisabilityTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IDisabilityTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IDisabilityTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: DisciplineAction

namespace EdFi.Ods.Api.Models.Resources.V2.DisciplineAction
{
    /// <summary>
    /// Represents a reference to the DisciplineAction resource.
    /// </summary>
    [DataContract]
    public class DisciplineActionReference
    {
        [DataMember(Name="identifier"), NaturalKeyMember]
        public string DisciplineActionIdentifier { get; set; }

        [DataMember(Name="disciplineDate"), NaturalKeyMember]
        public DateTime DisciplineDate { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "DisciplineAction",
                            Href = "/disciplineActions"
                                    + "?identifier=" + WebUtility.UrlEncode(DisciplineActionIdentifier)            
                                    + "&disciplineDate=" + JsonConvert.SerializeObject(DisciplineDate).Replace("\"", string.Empty)            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return DisciplineActionIdentifier != default(string)
                && DisciplineDate != default(DateTime)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.DisciplineAction table of the DisciplineAction aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class DisciplineAction : IDisciplineAction, IHasETag, IDisciplineActionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public DisciplineAction()
        {
            DisciplineActionDisciplines = new List<DisciplineActionDiscipline>();
            DisciplineActionDisciplineIncidents = new List<DisciplineActionDisciplineIncident>();
            DisciplineActionStaffs = new List<DisciplineActionStaff>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the DisciplineAction resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _assignmentSchoolReferenceExplicitlyAssigned;
        private School.SchoolReference _assignmentSchoolReference;
        private School.SchoolReference ImplicitAssignmentSchoolReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_assignmentSchoolReference == null && !_assignmentSchoolReferenceExplicitlyAssigned)
                    _assignmentSchoolReference = new School.SchoolReference();

                return _assignmentSchoolReference;
            }
        }

        [DataMember(Name="assignmentSchoolReference")]
        public School.SchoolReference AssignmentSchoolReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitAssignmentSchoolReference != null
                    && (_assignmentSchoolReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitAssignmentSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitAssignmentSchoolReference;

                return null;
            }
            set 
            { 
                _assignmentSchoolReferenceExplicitlyAssigned = true;
                _assignmentSchoolReference = value;
            }
        }
        private bool _responsibilitySchoolReferenceExplicitlyAssigned;
        private School.SchoolReference _responsibilitySchoolReference;
        private School.SchoolReference ImplicitResponsibilitySchoolReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_responsibilitySchoolReference == null && !_responsibilitySchoolReferenceExplicitlyAssigned)
                    _responsibilitySchoolReference = new School.SchoolReference();

                return _responsibilitySchoolReference;
            }
        }

        [DataMember(Name="responsibilitySchoolReference")]
        public School.SchoolReference ResponsibilitySchoolReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitResponsibilitySchoolReference != null
                    && (_responsibilitySchoolReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitResponsibilitySchoolReference.IsReferenceFullyDefined()))
                    return ImplicitResponsibilitySchoolReference;

                return null;
            }
            set 
            { 
                _responsibilitySchoolReferenceExplicitlyAssigned = true;
                _responsibilitySchoolReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Identifier assigned by the education organization to the DisciplineAction.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identifier"), NaturalKeyMember]
        public string DisciplineActionIdentifier { get; set; }

        /// <summary>
        /// The date of the DisciplineAction.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="disciplineDate"), NaturalKeyMember]
        public DateTime DisciplineDate { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IDisciplineAction.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IDisciplineAction).DisciplineActionIdentifier != null) 
                    hash = hash * 23 + (this as IDisciplineAction).DisciplineActionIdentifier.GetHashCode();
 
                // Standard Property
                if ((this as IDisciplineAction).DisciplineDate != null) 
                    hash = hash * 23 + (this as IDisciplineAction).DisciplineDate.GetHashCode();
 
                //Referenced Property
                if ((this as IDisciplineAction).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IDisciplineAction).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Indicates the actual length in school days of a student's disciplinary assignment.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="actualDisciplineActionLength")]
        public int? ActualDisciplineActionLength { get; set; }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? IDisciplineAction.AssignmentSchoolId
        {
            get
            {
                if (ImplicitAssignmentSchoolReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAssignmentSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitAssignmentSchoolReference.SchoolId;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // AssignmentSchool
                _assignmentSchoolReferenceExplicitlyAssigned = false;
                ImplicitAssignmentSchoolReference.SchoolId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The length of time in school days for the DisciplineAction (e.g. removal, detention), if applicable.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="length")]
        public int? DisciplineActionLength { get; set; }

        /// <summary>
        /// Indicates the reason for the difference, if any, between the official and actual lengths of a student's disciplinary assignment.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="lengthDifferenceReasonType")]
        public string DisciplineActionLengthDifferenceReasonType { get; set; }

        /// <summary>
        /// An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="relatedToZeroTolerancePolicy")]
        public bool? RelatedToZeroTolerancePolicy { get; set; }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IDisciplineAction.ResponsibilitySchoolId
        {
            get
            {
                if (ImplicitResponsibilitySchoolReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitResponsibilitySchoolReference.IsReferenceFullyDefined()))
                    return ImplicitResponsibilitySchoolReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ResponsibilitySchool
                _responsibilitySchoolReferenceExplicitlyAssigned = false;
                ImplicitResponsibilitySchoolReference.SchoolId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<DisciplineActionDisciplineIncident> _disciplineActionDisciplineIncidents;
        private IList<IDisciplineActionDisciplineIncident> _disciplineActionDisciplineIncidentsCovariant;

        [DataMember(Name="disciplineIncidents")]
        public IList<DisciplineActionDisciplineIncident> DisciplineActionDisciplineIncidents 
        { 
            get { return _disciplineActionDisciplineIncidents; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<DisciplineActionDisciplineIncident>(value,
                    (s, e) => ((IDisciplineActionDisciplineIncident)e.Item).DisciplineAction = this);
                _disciplineActionDisciplineIncidents = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IDisciplineActionDisciplineIncident, DisciplineActionDisciplineIncident>(value);
                covariantList.ItemAdded += (s, e) => ((IDisciplineActionDisciplineIncident)e.Item).DisciplineAction = this;
                _disciplineActionDisciplineIncidentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IDisciplineActionDisciplineIncident> IDisciplineAction.DisciplineActionDisciplineIncidents
        {
            get { return _disciplineActionDisciplineIncidentsCovariant; }
            set { DisciplineActionDisciplineIncidents = new List<DisciplineActionDisciplineIncident>(value.Cast<DisciplineActionDisciplineIncident>()); }
        }

        private IList<DisciplineActionDiscipline> _disciplineActionDisciplines;
        private IList<IDisciplineActionDiscipline> _disciplineActionDisciplinesCovariant;

        [DataMember(Name="disciplines")]
        public IList<DisciplineActionDiscipline> DisciplineActionDisciplines 
        { 
            get { return _disciplineActionDisciplines; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<DisciplineActionDiscipline>(value,
                    (s, e) => ((IDisciplineActionDiscipline)e.Item).DisciplineAction = this);
                _disciplineActionDisciplines = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IDisciplineActionDiscipline, DisciplineActionDiscipline>(value);
                covariantList.ItemAdded += (s, e) => ((IDisciplineActionDiscipline)e.Item).DisciplineAction = this;
                _disciplineActionDisciplinesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IDisciplineActionDiscipline> IDisciplineAction.DisciplineActionDisciplines
        {
            get { return _disciplineActionDisciplinesCovariant; }
            set { DisciplineActionDisciplines = new List<DisciplineActionDiscipline>(value.Cast<DisciplineActionDiscipline>()); }
        }

        private IList<DisciplineActionStaff> _disciplineActionStaffs;
        private IList<IDisciplineActionStaff> _disciplineActionStaffsCovariant;

        [DataMember(Name="staffs")]
        public IList<DisciplineActionStaff> DisciplineActionStaffs 
        { 
            get { return _disciplineActionStaffs; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<DisciplineActionStaff>(value,
                    (s, e) => ((IDisciplineActionStaff)e.Item).DisciplineAction = this);
                _disciplineActionStaffs = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IDisciplineActionStaff, DisciplineActionStaff>(value);
                covariantList.ItemAdded += (s, e) => ((IDisciplineActionStaff)e.Item).DisciplineAction = this;
                _disciplineActionStaffsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IDisciplineActionStaff> IDisciplineAction.DisciplineActionStaffs
        {
            get { return _disciplineActionStaffsCovariant; }
            set { DisciplineActionStaffs = new List<DisciplineActionStaff>(value.Cast<DisciplineActionStaff>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_disciplineActionDisciplineIncidents != null) foreach (var item in _disciplineActionDisciplineIncidents)
            {
                item.DisciplineAction = this;
            }
            
            if (_disciplineActionDisciplines != null) foreach (var item in _disciplineActionDisciplines)
            {
                item.DisciplineAction = this;
            }
            
            if (_disciplineActionStaffs != null) foreach (var item in _disciplineActionStaffs)
            {
                item.DisciplineAction = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IDisciplineAction)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IDisciplineAction) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IDisciplineActionSynchronizationSourceSupport.IsActualDisciplineActionLengthSupported                { get { return true; } set { } }
 
        bool IDisciplineActionSynchronizationSourceSupport.IsAssignmentSchoolIdSupported                          { get { return true; } set { } }
 
        bool IDisciplineActionSynchronizationSourceSupport.IsDisciplineActionDisciplineIncidentsSupported         { get { return true; } set { } }
 
        bool IDisciplineActionSynchronizationSourceSupport.IsDisciplineActionDisciplinesSupported                 { get { return true; } set { } }
 
        bool IDisciplineActionSynchronizationSourceSupport.IsDisciplineActionLengthSupported                      { get { return true; } set { } }
 
        bool IDisciplineActionSynchronizationSourceSupport.IsDisciplineActionLengthDifferenceReasonTypeSupported  { get { return true; } set { } }
 
        bool IDisciplineActionSynchronizationSourceSupport.IsDisciplineActionStaffsSupported                      { get { return true; } set { } }
 
        bool IDisciplineActionSynchronizationSourceSupport.IsRelatedToZeroTolerancePolicySupported                { get { return true; } set { } }
 
        bool IDisciplineActionSynchronizationSourceSupport.IsResponsibilitySchoolIdSupported                      { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IDisciplineActionDisciplineIncident, bool> IDisciplineActionSynchronizationSourceSupport.IsDisciplineActionDisciplineIncidentIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IDisciplineActionDiscipline, bool> IDisciplineActionSynchronizationSourceSupport.IsDisciplineActionDisciplineIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IDisciplineActionStaff, bool> IDisciplineActionSynchronizationSourceSupport.IsDisciplineActionStaffIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.DisciplineActionDiscipline table of the DisciplineAction aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class DisciplineActionDiscipline : IDisciplineActionDiscipline, IDisciplineActionDisciplineSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IDisciplineAction _disciplineAction;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IDisciplineAction IDisciplineActionDiscipline.DisciplineAction
        {
            get { return _disciplineAction; }
            set { _disciplineAction = value; }
        }

        internal IDisciplineAction DisciplineAction
        {
            set { _disciplineAction = value; }
        }

        /// <summary>
        /// Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="disciplineDescriptor"), NaturalKeyMember]
        public string DisciplineDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_disciplineAction != null) 
                    hash = hash * 23 + _disciplineAction.GetHashCode();
 
                // Standard Property
                if ((this as IDisciplineActionDiscipline).DisciplineDescriptor != null) 
                    hash = hash * 23 + (this as IDisciplineActionDiscipline).DisciplineDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IDisciplineActionDiscipline)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IDisciplineActionDiscipline) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.DisciplineActionDisciplineIncident table of the DisciplineAction aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class DisciplineActionDisciplineIncident : IDisciplineActionDisciplineIncident, IDisciplineActionDisciplineIncidentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _disciplineIncidentReferenceExplicitlyAssigned;
        private DisciplineIncident.DisciplineIncidentReference _disciplineIncidentReference;
        private DisciplineIncident.DisciplineIncidentReference ImplicitDisciplineIncidentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_disciplineIncidentReference == null && !_disciplineIncidentReferenceExplicitlyAssigned)
                    _disciplineIncidentReference = new DisciplineIncident.DisciplineIncidentReference();

                return _disciplineIncidentReference;
            }
        }

        [DataMember(Name="disciplineIncidentReference")][NaturalKeyMember]
        public DisciplineIncident.DisciplineIncidentReference DisciplineIncidentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitDisciplineIncidentReference != null
                    && (_disciplineIncidentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitDisciplineIncidentReference.IsReferenceFullyDefined()))
                    return ImplicitDisciplineIncidentReference;

                return null;
            }
            set 
            { 
                _disciplineIncidentReferenceExplicitlyAssigned = true;
                _disciplineIncidentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IDisciplineAction _disciplineAction;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IDisciplineAction IDisciplineActionDisciplineIncident.DisciplineAction
        {
            get { return _disciplineAction; }
            set { _disciplineAction = value; }
        }

        internal IDisciplineAction DisciplineAction
        {
            set { _disciplineAction = value; }
        }

        /// <summary>
        /// A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IDisciplineActionDisciplineIncident.IncidentIdentifier
        {
            get
            {
                if (ImplicitDisciplineIncidentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitDisciplineIncidentReference.IsReferenceFullyDefined()))
                    return ImplicitDisciplineIncidentReference.IncidentIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // DisciplineIncident
                _disciplineIncidentReferenceExplicitlyAssigned = false;
                ImplicitDisciplineIncidentReference.IncidentIdentifier = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IDisciplineActionDisciplineIncident.SchoolId
        {
            get
            {
                if (ImplicitDisciplineIncidentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitDisciplineIncidentReference.IsReferenceFullyDefined()))
                    return ImplicitDisciplineIncidentReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // DisciplineIncident
                _disciplineIncidentReferenceExplicitlyAssigned = false;
                ImplicitDisciplineIncidentReference.SchoolId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_disciplineAction != null) 
                    hash = hash * 23 + _disciplineAction.GetHashCode();
 
                //Referenced Property
                if ((this as IDisciplineActionDisciplineIncident).IncidentIdentifier != null) 
                    hash = hash * 23 + (this as IDisciplineActionDisciplineIncident).IncidentIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as IDisciplineActionDisciplineIncident).SchoolId != null) 
                    hash = hash * 23 + (this as IDisciplineActionDisciplineIncident).SchoolId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IDisciplineActionDisciplineIncident)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IDisciplineActionDisciplineIncident) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.DisciplineActionStaff table of the DisciplineAction aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class DisciplineActionStaff : IDisciplineActionStaff, IDisciplineActionStaffSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _staffReferenceExplicitlyAssigned;
        private Staff.StaffReference _staffReference;
        private Staff.StaffReference ImplicitStaffReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_staffReference == null && !_staffReferenceExplicitlyAssigned)
                    _staffReference = new Staff.StaffReference();

                return _staffReference;
            }
        }

        [DataMember(Name="staffReference")][NaturalKeyMember]
        public Staff.StaffReference StaffReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStaffReference != null
                    && (_staffReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference;

                return null;
            }
            set 
            { 
                _staffReferenceExplicitlyAssigned = true;
                _staffReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IDisciplineAction _disciplineAction;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IDisciplineAction IDisciplineActionStaff.DisciplineAction
        {
            get { return _disciplineAction; }
            set { _disciplineAction = value; }
        }

        internal IDisciplineAction DisciplineAction
        {
            set { _disciplineAction = value; }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IDisciplineActionStaff.StaffUniqueId
        {
            get
            {
                if (ImplicitStaffReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference.StaffUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Staff
                _staffReferenceExplicitlyAssigned = false;
                ImplicitStaffReference.StaffUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_disciplineAction != null) 
                    hash = hash * 23 + _disciplineAction.GetHashCode();
 
                //Referenced Property
                if ((this as IDisciplineActionStaff).StaffUniqueId != null) 
                    hash = hash * 23 + (this as IDisciplineActionStaff).StaffUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IDisciplineActionStaff)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IDisciplineActionStaff) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: DisciplineActionLengthDifferenceReasonType

namespace EdFi.Ods.Api.Models.Resources.V2.DisciplineActionLengthDifferenceReasonType
{
    /// <summary>
    /// A class which represents the edfi.DisciplineActionLengthDifferenceReasonType table of the DisciplineActionLengthDifferenceReasonType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class DisciplineActionLengthDifferenceReasonType : IDisciplineActionLengthDifferenceReasonType, IHasETag, IDisciplineActionLengthDifferenceReasonTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the DisciplineActionLengthDifferenceReasonType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for DisciplineActionLengthDifferenceReason
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="disciplineActionLengthDifferenceReasonTypeId"), NaturalKeyMember]
        public int DisciplineActionLengthDifferenceReasonTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IDisciplineActionLengthDifferenceReasonType).DisciplineActionLengthDifferenceReasonTypeId != null) 
                    hash = hash * 23 + (this as IDisciplineActionLengthDifferenceReasonType).DisciplineActionLengthDifferenceReasonTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the DisciplineActionLengthDifferenceReason type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the DisciplineActionLengthDifferenceReason type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IDisciplineActionLengthDifferenceReasonType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IDisciplineActionLengthDifferenceReasonType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IDisciplineActionLengthDifferenceReasonTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IDisciplineActionLengthDifferenceReasonTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IDisciplineActionLengthDifferenceReasonTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: DisciplineDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.DisciplineDescriptor
{
    /// <summary>
    /// A class which represents the edfi.DisciplineDescriptor table of the DisciplineDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class DisciplineDescriptor : IDisciplineDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IDisciplineDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the DisciplineDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="disciplineDescriptorId"), NaturalKeyMember]
        public int DisciplineDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return DisciplineDescriptorId; }
            set { DisciplineDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IDisciplineDescriptor).DisciplineDescriptorId != null) 
                    hash = hash * 23 + (this as IDisciplineDescriptor).DisciplineDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="disciplineType")]
        public string DisciplineType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IDisciplineDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IDisciplineDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IDisciplineDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
 
        bool IDisciplineDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
 
        bool IDisciplineDescriptorSynchronizationSourceSupport.IsDisciplineTypeSupported      { get { return true; } set { } }
 
        bool IDisciplineDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
 
        bool IDisciplineDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
 
        bool IDisciplineDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
 
        bool IDisciplineDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
 
        bool IDisciplineDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: DisciplineIncident

namespace EdFi.Ods.Api.Models.Resources.V2.DisciplineIncident
{
    /// <summary>
    /// Represents a reference to the DisciplineIncident resource.
    /// </summary>
    [DataContract]
    public class DisciplineIncidentReference
    {
        [DataMember(Name="incidentIdentifier"), NaturalKeyMember]
        public string IncidentIdentifier { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "DisciplineIncident",
                            Href = "/disciplineIncidents"
                                    + "?incidentIdentifier=" + WebUtility.UrlEncode(IncidentIdentifier)            
                                    + "&schoolId=" + SchoolId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return IncidentIdentifier != default(string)
                && SchoolId != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.DisciplineIncident table of the DisciplineIncident aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class DisciplineIncident : IDisciplineIncident, IHasETag, IDisciplineIncidentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public DisciplineIncident()
        {
            DisciplineIncidentBehaviors = new List<DisciplineIncidentBehavior>();
            DisciplineIncidentWeapons = new List<DisciplineIncidentWeapon>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the DisciplineIncident resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _schoolReferenceExplicitlyAssigned;
        private School.SchoolReference _schoolReference;
        private School.SchoolReference ImplicitSchoolReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolReference == null && !_schoolReferenceExplicitlyAssigned)
                    _schoolReference = new School.SchoolReference();

                return _schoolReference;
            }
        }

        [DataMember(Name="schoolReference")][NaturalKeyMember]
        public School.SchoolReference SchoolReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolReference != null
                    && (_schoolReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference;

                return null;
            }
            set 
            { 
                _schoolReferenceExplicitlyAssigned = true;
                _schoolReference = value;
            }
        }
        private bool _staffReferenceExplicitlyAssigned;
        private Staff.StaffReference _staffReference;
        private Staff.StaffReference ImplicitStaffReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_staffReference == null && !_staffReferenceExplicitlyAssigned)
                    _staffReference = new Staff.StaffReference();

                return _staffReference;
            }
        }

        [DataMember(Name="staffReference")]
        public Staff.StaffReference StaffReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStaffReference != null
                    && (_staffReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference;

                return null;
            }
            set 
            { 
                _staffReferenceExplicitlyAssigned = true;
                _staffReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="incidentIdentifier"), NaturalKeyMember]
        public string IncidentIdentifier { get; set; }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IDisciplineIncident.SchoolId
        {
            get
            {
                if (ImplicitSchoolReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // School
                _schoolReferenceExplicitlyAssigned = false;
                ImplicitSchoolReference.SchoolId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IDisciplineIncident).IncidentIdentifier != null) 
                    hash = hash * 23 + (this as IDisciplineIncident).IncidentIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as IDisciplineIncident).SchoolId != null) 
                    hash = hash * 23 + (this as IDisciplineIncident).SchoolId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The case number assigned to the DisciplineIncident by law enforcement or other organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="caseNumber")]
        public string CaseNumber { get; set; }

        /// <summary>
        /// The value of any quantifiable monetary loss directly resulting from the DisciplineIncident. Examples include the value of repairs necessitated by vandalism of a school facility, or the value of personnel resources used for repairs or consumed by the incident.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="incidentCost")][Range(typeof(decimal), "-922337203685477.5808", "922337203685477.5807")]
        public decimal? IncidentCost { get; set; }

        /// <summary>
        /// The month, day, and year on which the DisciplineIncident occurred.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="incidentDate")]
        public DateTime IncidentDate { get; set; }

        /// <summary>
        /// The description for an incident.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="incidentDescription")]
        public string IncidentDescription { get; set; }

        /// <summary>
        /// Identifies where the DisciplineIncident occurred and whether or not it occurred on school, for example:          On school          Administrative offices area          Cafeteria area          Classroom          Hallway or stairs          ...
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="incidentLocationType")]
        public string IncidentLocationType { get; set; }

        /// <summary>
        /// An indication of the time of day the incident took place.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="incidentTime")][JsonConverter(typeof(UtcTimeConverter))]
        public TimeSpan? IncidentTime { get; set; }

        /// <summary>
        /// Indicator of whether the incident was reported to law enforcement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="reportedToLawEnforcement")]
        public bool? ReportedToLawEnforcement { get; set; }

        /// <summary>
        /// Information on the type of individual who reported the DisciplineIncident. When known and/or if useful, use a more specific option code (e.g., \"Counselor\" rather than \"Professional Staff\"); for example:          Student          Parent/guardian          Law enforcement officer          Nonschool personnel          Representative of visiting school          ...
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="reporterDescriptionDescriptor")]
        public string ReporterDescriptionDescriptor { get; set; }

        /// <summary>
        /// Identifies the reporter of the DisciplineIncident by name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="reporterName")]
        public string ReporterName { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IDisciplineIncident.StaffUniqueId
        {
            get
            {
                if (ImplicitStaffReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference.StaffUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Staff
                _staffReferenceExplicitlyAssigned = false;
                ImplicitStaffReference.StaffUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<DisciplineIncidentBehavior> _disciplineIncidentBehaviors;
        private IList<IDisciplineIncidentBehavior> _disciplineIncidentBehaviorsCovariant;

        [DataMember(Name="behaviors")]
        public IList<DisciplineIncidentBehavior> DisciplineIncidentBehaviors 
        { 
            get { return _disciplineIncidentBehaviors; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<DisciplineIncidentBehavior>(value,
                    (s, e) => ((IDisciplineIncidentBehavior)e.Item).DisciplineIncident = this);
                _disciplineIncidentBehaviors = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IDisciplineIncidentBehavior, DisciplineIncidentBehavior>(value);
                covariantList.ItemAdded += (s, e) => ((IDisciplineIncidentBehavior)e.Item).DisciplineIncident = this;
                _disciplineIncidentBehaviorsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IDisciplineIncidentBehavior> IDisciplineIncident.DisciplineIncidentBehaviors
        {
            get { return _disciplineIncidentBehaviorsCovariant; }
            set { DisciplineIncidentBehaviors = new List<DisciplineIncidentBehavior>(value.Cast<DisciplineIncidentBehavior>()); }
        }

        private IList<DisciplineIncidentWeapon> _disciplineIncidentWeapons;
        private IList<IDisciplineIncidentWeapon> _disciplineIncidentWeaponsCovariant;

        [DataMember(Name="weapons")]
        public IList<DisciplineIncidentWeapon> DisciplineIncidentWeapons 
        { 
            get { return _disciplineIncidentWeapons; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<DisciplineIncidentWeapon>(value,
                    (s, e) => ((IDisciplineIncidentWeapon)e.Item).DisciplineIncident = this);
                _disciplineIncidentWeapons = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IDisciplineIncidentWeapon, DisciplineIncidentWeapon>(value);
                covariantList.ItemAdded += (s, e) => ((IDisciplineIncidentWeapon)e.Item).DisciplineIncident = this;
                _disciplineIncidentWeaponsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IDisciplineIncidentWeapon> IDisciplineIncident.DisciplineIncidentWeapons
        {
            get { return _disciplineIncidentWeaponsCovariant; }
            set { DisciplineIncidentWeapons = new List<DisciplineIncidentWeapon>(value.Cast<DisciplineIncidentWeapon>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_disciplineIncidentBehaviors != null) foreach (var item in _disciplineIncidentBehaviors)
            {
                item.DisciplineIncident = this;
            }
            
            if (_disciplineIncidentWeapons != null) foreach (var item in _disciplineIncidentWeapons)
            {
                item.DisciplineIncident = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IDisciplineIncident)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IDisciplineIncident) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IDisciplineIncidentSynchronizationSourceSupport.IsCaseNumberSupported                     { get { return true; } set { } }
 
        bool IDisciplineIncidentSynchronizationSourceSupport.IsDisciplineIncidentBehaviorsSupported    { get { return true; } set { } }
 
        bool IDisciplineIncidentSynchronizationSourceSupport.IsDisciplineIncidentWeaponsSupported      { get { return true; } set { } }
 
        bool IDisciplineIncidentSynchronizationSourceSupport.IsIncidentCostSupported                   { get { return true; } set { } }
 
        bool IDisciplineIncidentSynchronizationSourceSupport.IsIncidentDateSupported                   { get { return true; } set { } }
 
        bool IDisciplineIncidentSynchronizationSourceSupport.IsIncidentDescriptionSupported            { get { return true; } set { } }
 
        bool IDisciplineIncidentSynchronizationSourceSupport.IsIncidentLocationTypeSupported           { get { return true; } set { } }
 
        bool IDisciplineIncidentSynchronizationSourceSupport.IsIncidentTimeSupported                   { get { return true; } set { } }
 
        bool IDisciplineIncidentSynchronizationSourceSupport.IsReportedToLawEnforcementSupported       { get { return true; } set { } }
 
        bool IDisciplineIncidentSynchronizationSourceSupport.IsReporterDescriptionDescriptorSupported  { get { return true; } set { } }
 
        bool IDisciplineIncidentSynchronizationSourceSupport.IsReporterNameSupported                   { get { return true; } set { } }
 
        bool IDisciplineIncidentSynchronizationSourceSupport.IsStaffUniqueIdSupported                  { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IDisciplineIncidentBehavior, bool> IDisciplineIncidentSynchronizationSourceSupport.IsDisciplineIncidentBehaviorIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IDisciplineIncidentWeapon, bool> IDisciplineIncidentSynchronizationSourceSupport.IsDisciplineIncidentWeaponIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.DisciplineIncidentBehavior table of the DisciplineIncident aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class DisciplineIncidentBehavior : IDisciplineIncidentBehavior, IDisciplineIncidentBehaviorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IDisciplineIncident _disciplineIncident;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IDisciplineIncident IDisciplineIncidentBehavior.DisciplineIncident
        {
            get { return _disciplineIncident; }
            set { _disciplineIncident = value; }
        }

        internal IDisciplineIncident DisciplineIncident
        {
            set { _disciplineIncident = value; }
        }

        /// <summary>
        /// Describes behavior by category and provides a detailed description.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="behaviorDescriptor"), NaturalKeyMember]
        public string BehaviorDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_disciplineIncident != null) 
                    hash = hash * 23 + _disciplineIncident.GetHashCode();
 
                // Standard Property
                if ((this as IDisciplineIncidentBehavior).BehaviorDescriptor != null) 
                    hash = hash * 23 + (this as IDisciplineIncidentBehavior).BehaviorDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Specifies a more granular level of detail of a behavior involved in the incident.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="behaviorDetailedDescription")]
        public string BehaviorDetailedDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IDisciplineIncidentBehavior)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IDisciplineIncidentBehavior) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IDisciplineIncidentBehaviorSynchronizationSourceSupport.IsBehaviorDetailedDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.DisciplineIncidentWeapon table of the DisciplineIncident aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class DisciplineIncidentWeapon : IDisciplineIncidentWeapon, IDisciplineIncidentWeaponSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IDisciplineIncident _disciplineIncident;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IDisciplineIncident IDisciplineIncidentWeapon.DisciplineIncident
        {
            get { return _disciplineIncident; }
            set { _disciplineIncident = value; }
        }

        internal IDisciplineIncident DisciplineIncident
        {
            set { _disciplineIncident = value; }
        }

        /// <summary>
        /// Identifies the type of weapon used during an incident. The Federal Gun-Free Schools Act requires states to report the number of students expelled for bringing firearms to school by type of firearm.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="weaponDescriptor"), NaturalKeyMember]
        public string WeaponDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_disciplineIncident != null) 
                    hash = hash * 23 + _disciplineIncident.GetHashCode();
 
                // Standard Property
                if ((this as IDisciplineIncidentWeapon).WeaponDescriptor != null) 
                    hash = hash * 23 + (this as IDisciplineIncidentWeapon).WeaponDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IDisciplineIncidentWeapon)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IDisciplineIncidentWeapon) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: DisciplineType

namespace EdFi.Ods.Api.Models.Resources.V2.DisciplineType
{
    /// <summary>
    /// A class which represents the edfi.DisciplineType table of the DisciplineType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class DisciplineType : IDisciplineType, IHasETag, IDisciplineTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the DisciplineType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Discipline
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="disciplineTypeId"), NaturalKeyMember]
        public int DisciplineTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IDisciplineType).DisciplineTypeId != null) 
                    hash = hash * 23 + (this as IDisciplineType).DisciplineTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Discipline type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Discipline type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IDisciplineType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IDisciplineType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IDisciplineTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IDisciplineTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IDisciplineTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: EducationalEnvironmentType

namespace EdFi.Ods.Api.Models.Resources.V2.EducationalEnvironmentType
{
    /// <summary>
    /// A class which represents the edfi.EducationalEnvironmentType table of the EducationalEnvironmentType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationalEnvironmentType : IEducationalEnvironmentType, IHasETag, IEducationalEnvironmentTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the EducationalEnvironmentType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for EducationalEnvironment
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="educationalEnvironmentTypeId"), NaturalKeyMember]
        public int EducationalEnvironmentTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IEducationalEnvironmentType).EducationalEnvironmentTypeId != null) 
                    hash = hash * 23 + (this as IEducationalEnvironmentType).EducationalEnvironmentTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the EducationalEnvironment type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the EducationalEnvironment type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationalEnvironmentType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationalEnvironmentType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEducationalEnvironmentTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IEducationalEnvironmentTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IEducationalEnvironmentTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: EducationContent

namespace EdFi.Ods.Api.Models.Resources.V2.EducationContent
{
    /// <summary>
    /// Represents a reference to the EducationContent resource.
    /// </summary>
    [DataContract]
    public class EducationContentReference
    {
        [DataMember(Name="contentIdentifier"), NaturalKeyMember]
        public string ContentIdentifier { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "EducationContent",
                            Href = "/educationContents"
                                    + "?contentIdentifier=" + WebUtility.UrlEncode(ContentIdentifier)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ContentIdentifier != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.EducationContent table of the EducationContent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationContent : IEducationContent, IHasETag, IEducationContentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public EducationContent()
        {
            EducationContentAppropriateGradeLevels = new List<EducationContentAppropriateGradeLevel>();
            EducationContentAppropriateSexes = new List<EducationContentAppropriateSex>();
            EducationContentAuthors = new List<EducationContentAuthor>();
            EducationContentDerivativeSourceEducationContents = new List<EducationContentDerivativeSourceEducationContent>();
            EducationContentDerivativeSourceLearningResourceMetadataURIs = new List<EducationContentDerivativeSourceLearningResourceMetadataURI>();
            EducationContentDerivativeSourceURIs = new List<EducationContentDerivativeSourceURI>();
            EducationContentLanguages = new List<EducationContentLanguage>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EducationContent resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _learningStandardReferenceExplicitlyAssigned;
        private LearningStandard.LearningStandardReference _learningStandardReference;
        private LearningStandard.LearningStandardReference ImplicitLearningStandardReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_learningStandardReference == null && !_learningStandardReferenceExplicitlyAssigned)
                    _learningStandardReference = new LearningStandard.LearningStandardReference();

                return _learningStandardReference;
            }
        }

        [DataMember(Name="learningStandardReference")]
        public LearningStandard.LearningStandardReference LearningStandardReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitLearningStandardReference != null
                    && (_learningStandardReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitLearningStandardReference.IsReferenceFullyDefined()))
                    return ImplicitLearningStandardReference;

                return null;
            }
            set 
            { 
                _learningStandardReferenceExplicitlyAssigned = true;
                _learningStandardReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier for the EducationContent.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="contentIdentifier"), NaturalKeyMember]
        public string ContentIdentifier { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IEducationContent).ContentIdentifier != null) 
                    hash = hash * 23 + (this as IEducationContent).ContentIdentifier.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation \"et al\".
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="additionalAuthorsIndicator")]
        public bool? AdditionalAuthorsIndicator { get; set; }

        /// <summary>
        /// The predominate type or kind characterizing the learning resource.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="contentClassType")]
        public string ContentClassType { get; set; }

        /// <summary>
        /// An amount that has to be paid or spent to buy or obtain the EducationContent.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="cost")][Range(typeof(decimal), "-922337203685477.5808", "922337203685477.5807")]
        public decimal? Cost { get; set; }

        /// <summary>
        /// The rate by which the cost applies.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="costRateType")]
        public string CostRateType { get; set; }

        /// <summary>
        /// An extended written representation of the education content.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="interactivityStyleType")]
        public string InteractivityStyleType { get; set; }

        /// <summary>
        /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="learningResourceMetadataURI")]
        public string LearningResourceMetadataURI { get; set; }

        /// <summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IEducationContent.LearningStandardId
        {
            get
            {
                if (ImplicitLearningStandardReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitLearningStandardReference.IsReferenceFullyDefined()))
                    return ImplicitLearningStandardReference.LearningStandardId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // LearningStandard
                _learningStandardReferenceExplicitlyAssigned = false;
                ImplicitLearningStandardReference.LearningStandardId = value;
            }
        }

        /// <summary>
        /// Namespace for the EducationContent.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// The date on which this content was first published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="publicationDate")]
        public DateTime? PublicationDate { get; set; }

        /// <summary>
        /// The year at which this content was first published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="publicationYear")]
        public short? PublicationYear { get; set; }

        /// <summary>
        /// The organization credited with publishing the resource.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="publisher")]
        public string Publisher { get; set; }

        /// <summary>
        /// A short description or name of the entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }

        /// <summary>
        /// Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="timeRequired")]
        public string TimeRequired { get; set; }

        /// <summary>
        /// The URL where the owner specifies permissions for using the resource.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="useRightsURL")]
        public string UseRightsURL { get; set; }

        /// <summary>
        /// The version identifier for the content.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="version")]
        public string Version { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<EducationContentAppropriateGradeLevel> _educationContentAppropriateGradeLevels;
        private IList<IEducationContentAppropriateGradeLevel> _educationContentAppropriateGradeLevelsCovariant;

        [DataMember(Name="appropriateGradeLevels")]
        public IList<EducationContentAppropriateGradeLevel> EducationContentAppropriateGradeLevels 
        { 
            get { return _educationContentAppropriateGradeLevels; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<EducationContentAppropriateGradeLevel>(value,
                    (s, e) => ((IEducationContentAppropriateGradeLevel)e.Item).EducationContent = this);
                _educationContentAppropriateGradeLevels = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IEducationContentAppropriateGradeLevel, EducationContentAppropriateGradeLevel>(value);
                covariantList.ItemAdded += (s, e) => ((IEducationContentAppropriateGradeLevel)e.Item).EducationContent = this;
                _educationContentAppropriateGradeLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationContentAppropriateGradeLevel> IEducationContent.EducationContentAppropriateGradeLevels
        {
            get { return _educationContentAppropriateGradeLevelsCovariant; }
            set { EducationContentAppropriateGradeLevels = new List<EducationContentAppropriateGradeLevel>(value.Cast<EducationContentAppropriateGradeLevel>()); }
        }

        private IList<EducationContentAppropriateSex> _educationContentAppropriateSexes;
        private IList<IEducationContentAppropriateSex> _educationContentAppropriateSexesCovariant;

        [DataMember(Name="appropriateSexes")]
        public IList<EducationContentAppropriateSex> EducationContentAppropriateSexes 
        { 
            get { return _educationContentAppropriateSexes; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<EducationContentAppropriateSex>(value,
                    (s, e) => ((IEducationContentAppropriateSex)e.Item).EducationContent = this);
                _educationContentAppropriateSexes = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IEducationContentAppropriateSex, EducationContentAppropriateSex>(value);
                covariantList.ItemAdded += (s, e) => ((IEducationContentAppropriateSex)e.Item).EducationContent = this;
                _educationContentAppropriateSexesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationContentAppropriateSex> IEducationContent.EducationContentAppropriateSexes
        {
            get { return _educationContentAppropriateSexesCovariant; }
            set { EducationContentAppropriateSexes = new List<EducationContentAppropriateSex>(value.Cast<EducationContentAppropriateSex>()); }
        }

        private IList<EducationContentAuthor> _educationContentAuthors;
        private IList<IEducationContentAuthor> _educationContentAuthorsCovariant;

        [DataMember(Name="authors")]
        public IList<EducationContentAuthor> EducationContentAuthors 
        { 
            get { return _educationContentAuthors; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<EducationContentAuthor>(value,
                    (s, e) => ((IEducationContentAuthor)e.Item).EducationContent = this);
                _educationContentAuthors = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IEducationContentAuthor, EducationContentAuthor>(value);
                covariantList.ItemAdded += (s, e) => ((IEducationContentAuthor)e.Item).EducationContent = this;
                _educationContentAuthorsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationContentAuthor> IEducationContent.EducationContentAuthors
        {
            get { return _educationContentAuthorsCovariant; }
            set { EducationContentAuthors = new List<EducationContentAuthor>(value.Cast<EducationContentAuthor>()); }
        }

        private IList<EducationContentDerivativeSourceEducationContent> _educationContentDerivativeSourceEducationContents;
        private IList<IEducationContentDerivativeSourceEducationContent> _educationContentDerivativeSourceEducationContentsCovariant;

        [DataMember(Name="derivativeSourceEducationContents")]
        public IList<EducationContentDerivativeSourceEducationContent> EducationContentDerivativeSourceEducationContents 
        { 
            get { return _educationContentDerivativeSourceEducationContents; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<EducationContentDerivativeSourceEducationContent>(value,
                    (s, e) => ((IEducationContentDerivativeSourceEducationContent)e.Item).EducationContent = this);
                _educationContentDerivativeSourceEducationContents = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IEducationContentDerivativeSourceEducationContent, EducationContentDerivativeSourceEducationContent>(value);
                covariantList.ItemAdded += (s, e) => ((IEducationContentDerivativeSourceEducationContent)e.Item).EducationContent = this;
                _educationContentDerivativeSourceEducationContentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationContentDerivativeSourceEducationContent> IEducationContent.EducationContentDerivativeSourceEducationContents
        {
            get { return _educationContentDerivativeSourceEducationContentsCovariant; }
            set { EducationContentDerivativeSourceEducationContents = new List<EducationContentDerivativeSourceEducationContent>(value.Cast<EducationContentDerivativeSourceEducationContent>()); }
        }

        private IList<EducationContentDerivativeSourceLearningResourceMetadataURI> _educationContentDerivativeSourceLearningResourceMetadataURIs;
        private IList<IEducationContentDerivativeSourceLearningResourceMetadataURI> _educationContentDerivativeSourceLearningResourceMetadataURIsCovariant;

        [DataMember(Name="derivativeSourceLearningResourceMetadataURIs")]
        public IList<EducationContentDerivativeSourceLearningResourceMetadataURI> EducationContentDerivativeSourceLearningResourceMetadataURIs 
        { 
            get { return _educationContentDerivativeSourceLearningResourceMetadataURIs; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<EducationContentDerivativeSourceLearningResourceMetadataURI>(value,
                    (s, e) => ((IEducationContentDerivativeSourceLearningResourceMetadataURI)e.Item).EducationContent = this);
                _educationContentDerivativeSourceLearningResourceMetadataURIs = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IEducationContentDerivativeSourceLearningResourceMetadataURI, EducationContentDerivativeSourceLearningResourceMetadataURI>(value);
                covariantList.ItemAdded += (s, e) => ((IEducationContentDerivativeSourceLearningResourceMetadataURI)e.Item).EducationContent = this;
                _educationContentDerivativeSourceLearningResourceMetadataURIsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationContentDerivativeSourceLearningResourceMetadataURI> IEducationContent.EducationContentDerivativeSourceLearningResourceMetadataURIs
        {
            get { return _educationContentDerivativeSourceLearningResourceMetadataURIsCovariant; }
            set { EducationContentDerivativeSourceLearningResourceMetadataURIs = new List<EducationContentDerivativeSourceLearningResourceMetadataURI>(value.Cast<EducationContentDerivativeSourceLearningResourceMetadataURI>()); }
        }

        private IList<EducationContentDerivativeSourceURI> _educationContentDerivativeSourceURIs;
        private IList<IEducationContentDerivativeSourceURI> _educationContentDerivativeSourceURIsCovariant;

        [DataMember(Name="derivativeSourceURIs")]
        public IList<EducationContentDerivativeSourceURI> EducationContentDerivativeSourceURIs 
        { 
            get { return _educationContentDerivativeSourceURIs; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<EducationContentDerivativeSourceURI>(value,
                    (s, e) => ((IEducationContentDerivativeSourceURI)e.Item).EducationContent = this);
                _educationContentDerivativeSourceURIs = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IEducationContentDerivativeSourceURI, EducationContentDerivativeSourceURI>(value);
                covariantList.ItemAdded += (s, e) => ((IEducationContentDerivativeSourceURI)e.Item).EducationContent = this;
                _educationContentDerivativeSourceURIsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationContentDerivativeSourceURI> IEducationContent.EducationContentDerivativeSourceURIs
        {
            get { return _educationContentDerivativeSourceURIsCovariant; }
            set { EducationContentDerivativeSourceURIs = new List<EducationContentDerivativeSourceURI>(value.Cast<EducationContentDerivativeSourceURI>()); }
        }

        private IList<EducationContentLanguage> _educationContentLanguages;
        private IList<IEducationContentLanguage> _educationContentLanguagesCovariant;

        [DataMember(Name="languages")]
        public IList<EducationContentLanguage> EducationContentLanguages 
        { 
            get { return _educationContentLanguages; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<EducationContentLanguage>(value,
                    (s, e) => ((IEducationContentLanguage)e.Item).EducationContent = this);
                _educationContentLanguages = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IEducationContentLanguage, EducationContentLanguage>(value);
                covariantList.ItemAdded += (s, e) => ((IEducationContentLanguage)e.Item).EducationContent = this;
                _educationContentLanguagesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationContentLanguage> IEducationContent.EducationContentLanguages
        {
            get { return _educationContentLanguagesCovariant; }
            set { EducationContentLanguages = new List<EducationContentLanguage>(value.Cast<EducationContentLanguage>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_educationContentAppropriateGradeLevels != null) foreach (var item in _educationContentAppropriateGradeLevels)
            {
                item.EducationContent = this;
            }
            
            if (_educationContentAppropriateSexes != null) foreach (var item in _educationContentAppropriateSexes)
            {
                item.EducationContent = this;
            }
            
            if (_educationContentAuthors != null) foreach (var item in _educationContentAuthors)
            {
                item.EducationContent = this;
            }
            
            if (_educationContentDerivativeSourceEducationContents != null) foreach (var item in _educationContentDerivativeSourceEducationContents)
            {
                item.EducationContent = this;
            }
            
            if (_educationContentDerivativeSourceLearningResourceMetadataURIs != null) foreach (var item in _educationContentDerivativeSourceLearningResourceMetadataURIs)
            {
                item.EducationContent = this;
            }
            
            if (_educationContentDerivativeSourceURIs != null) foreach (var item in _educationContentDerivativeSourceURIs)
            {
                item.EducationContent = this;
            }
            
            if (_educationContentLanguages != null) foreach (var item in _educationContentLanguages)
            {
                item.EducationContent = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationContent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationContent) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEducationContentSynchronizationSourceSupport.IsAdditionalAuthorsIndicatorSupported                                    { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsContentClassTypeSupported                                              { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsCostSupported                                                          { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsCostRateTypeSupported                                                  { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsDescriptionSupported                                                   { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsEducationContentAppropriateGradeLevelsSupported                        { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsEducationContentAppropriateSexesSupported                              { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsEducationContentAuthorsSupported                                       { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsEducationContentDerivativeSourceEducationContentsSupported             { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsEducationContentDerivativeSourceLearningResourceMetadataURIsSupported  { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsEducationContentDerivativeSourceURIsSupported                          { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsEducationContentLanguagesSupported                                     { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsInteractivityStyleTypeSupported                                        { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsLearningResourceMetadataURISupported                                   { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsLearningStandardIdSupported                                            { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsNamespaceSupported                                                     { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsPublicationDateSupported                                               { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsPublicationYearSupported                                               { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsPublisherSupported                                                     { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsShortDescriptionSupported                                              { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsTimeRequiredSupported                                                  { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsUseRightsURLSupported                                                  { get { return true; } set { } }
 
        bool IEducationContentSynchronizationSourceSupport.IsVersionSupported                                                       { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IEducationContentAppropriateGradeLevel, bool> IEducationContentSynchronizationSourceSupport.IsEducationContentAppropriateGradeLevelIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationContentAppropriateSex, bool> IEducationContentSynchronizationSourceSupport.IsEducationContentAppropriateSexIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationContentAuthor, bool> IEducationContentSynchronizationSourceSupport.IsEducationContentAuthorIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationContentDerivativeSourceEducationContent, bool> IEducationContentSynchronizationSourceSupport.IsEducationContentDerivativeSourceEducationContentIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationContentDerivativeSourceLearningResourceMetadataURI, bool> IEducationContentSynchronizationSourceSupport.IsEducationContentDerivativeSourceLearningResourceMetadataURIIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationContentDerivativeSourceURI, bool> IEducationContentSynchronizationSourceSupport.IsEducationContentDerivativeSourceURIIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationContentLanguage, bool> IEducationContentSynchronizationSourceSupport.IsEducationContentLanguageIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.EducationContentAppropriateGradeLevel table of the EducationContent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationContentAppropriateGradeLevel : IEducationContentAppropriateGradeLevel, IEducationContentAppropriateGradeLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IEducationContent _educationContent;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IEducationContent IEducationContentAppropriateGradeLevel.EducationContent
        {
            get { return _educationContent; }
            set { _educationContent = value; }
        }

        internal IEducationContent EducationContent
        {
            set { _educationContent = value; }
        }

        /// <summary>
        /// Grade levels for which this education content is applicable-if omitted, considered generally applicable.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_educationContent != null) 
                    hash = hash * 23 + _educationContent.GetHashCode();
 
                // Standard Property
                if ((this as IEducationContentAppropriateGradeLevel).GradeLevelDescriptor != null) 
                    hash = hash * 23 + (this as IEducationContentAppropriateGradeLevel).GradeLevelDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationContentAppropriateGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationContentAppropriateGradeLevel) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.EducationContentAppropriateSex table of the EducationContent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationContentAppropriateSex : IEducationContentAppropriateSex, IEducationContentAppropriateSexSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IEducationContent _educationContent;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IEducationContent IEducationContentAppropriateSex.EducationContent
        {
            get { return _educationContent; }
            set { _educationContent = value; }
        }

        internal IEducationContent EducationContent
        {
            set { _educationContent = value; }
        }

        /// <summary>
        /// Sexes for which this education content is applicable. If omitted, considered generally applicable.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexType"), NaturalKeyMember]
        public string SexType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_educationContent != null) 
                    hash = hash * 23 + _educationContent.GetHashCode();
 
                // Standard Property
                if ((this as IEducationContentAppropriateSex).SexType != null) 
                    hash = hash * 23 + (this as IEducationContentAppropriateSex).SexType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationContentAppropriateSex)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationContentAppropriateSex) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.EducationContentAuthor table of the EducationContent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationContentAuthor : IEducationContentAuthor, IEducationContentAuthorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IEducationContent _educationContent;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IEducationContent IEducationContentAuthor.EducationContent
        {
            get { return _educationContent; }
            set { _educationContent = value; }
        }

        internal IEducationContent EducationContent
        {
            set { _educationContent = value; }
        }

        /// <summary>
        /// The individual credited with the creation of the resource.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="author"), NaturalKeyMember]
        public string Author { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_educationContent != null) 
                    hash = hash * 23 + _educationContent.GetHashCode();
 
                // Standard Property
                if ((this as IEducationContentAuthor).Author != null) 
                    hash = hash * 23 + (this as IEducationContentAuthor).Author.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationContentAuthor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationContentAuthor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.EducationContentDerivativeSourceEducationContent table of the EducationContent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationContentDerivativeSourceEducationContent : IEducationContentDerivativeSourceEducationContent, IEducationContentDerivativeSourceEducationContentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _derivativeSourceEducationContentReferenceExplicitlyAssigned;
        private EducationContentReference _derivativeSourceEducationContentReference;
        private EducationContentReference ImplicitDerivativeSourceEducationContentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_derivativeSourceEducationContentReference == null && !_derivativeSourceEducationContentReferenceExplicitlyAssigned)
                    _derivativeSourceEducationContentReference = new EducationContentReference();

                return _derivativeSourceEducationContentReference;
            }
        }

        [DataMember(Name="derivativeSourceEducationContentReference")][NaturalKeyMember]
        public EducationContentReference DerivativeSourceEducationContentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitDerivativeSourceEducationContentReference != null
                    && (_derivativeSourceEducationContentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitDerivativeSourceEducationContentReference.IsReferenceFullyDefined()))
                    return ImplicitDerivativeSourceEducationContentReference;

                return null;
            }
            set 
            { 
                _derivativeSourceEducationContentReferenceExplicitlyAssigned = true;
                _derivativeSourceEducationContentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IEducationContent _educationContent;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IEducationContent IEducationContentDerivativeSourceEducationContent.EducationContent
        {
            get { return _educationContent; }
            set { _educationContent = value; }
        }

        internal IEducationContent EducationContent
        {
            set { _educationContent = value; }
        }

        /// <summary>
        /// A unique identifier for the EducationContent.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IEducationContentDerivativeSourceEducationContent.DerivativeSourceContentIdentifier
        {
            get
            {
                if (ImplicitDerivativeSourceEducationContentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitDerivativeSourceEducationContentReference.IsReferenceFullyDefined()))
                    return ImplicitDerivativeSourceEducationContentReference.ContentIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // DerivativeSourceEducationContent
                _derivativeSourceEducationContentReferenceExplicitlyAssigned = false;
                ImplicitDerivativeSourceEducationContentReference.ContentIdentifier = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_educationContent != null) 
                    hash = hash * 23 + _educationContent.GetHashCode();
 
                //Referenced Property
                if ((this as IEducationContentDerivativeSourceEducationContent).DerivativeSourceContentIdentifier != null) 
                    hash = hash * 23 + (this as IEducationContentDerivativeSourceEducationContent).DerivativeSourceContentIdentifier.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationContentDerivativeSourceEducationContent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationContentDerivativeSourceEducationContent) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.EducationContentDerivativeSourceLearningResourceMetadataURI table of the EducationContent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationContentDerivativeSourceLearningResourceMetadataURI : IEducationContentDerivativeSourceLearningResourceMetadataURI, IEducationContentDerivativeSourceLearningResourceMetadataURISynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IEducationContent _educationContent;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IEducationContent IEducationContentDerivativeSourceLearningResourceMetadataURI.EducationContent
        {
            get { return _educationContent; }
            set { _educationContent = value; }
        }

        internal IEducationContent EducationContent
        {
            set { _educationContent = value; }
        }

        /// <summary>
        /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="learningResourceMetadataURI"), NaturalKeyMember]
        public string LearningResourceMetadataURI { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_educationContent != null) 
                    hash = hash * 23 + _educationContent.GetHashCode();
 
                // Standard Property
                if ((this as IEducationContentDerivativeSourceLearningResourceMetadataURI).LearningResourceMetadataURI != null) 
                    hash = hash * 23 + (this as IEducationContentDerivativeSourceLearningResourceMetadataURI).LearningResourceMetadataURI.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationContentDerivativeSourceLearningResourceMetadataURI)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationContentDerivativeSourceLearningResourceMetadataURI) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.EducationContentDerivativeSourceURI table of the EducationContent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationContentDerivativeSourceURI : IEducationContentDerivativeSourceURI, IEducationContentDerivativeSourceURISynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IEducationContent _educationContent;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IEducationContent IEducationContentDerivativeSourceURI.EducationContent
        {
            get { return _educationContent; }
            set { _educationContent = value; }
        }

        internal IEducationContent EducationContent
        {
            set { _educationContent = value; }
        }

        /// <summary>
        /// The URI (typical a URL) pointing to an education content item.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="uri"), NaturalKeyMember]
        public string URI { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_educationContent != null) 
                    hash = hash * 23 + _educationContent.GetHashCode();
 
                // Standard Property
                if ((this as IEducationContentDerivativeSourceURI).URI != null) 
                    hash = hash * 23 + (this as IEducationContentDerivativeSourceURI).URI.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationContentDerivativeSourceURI)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationContentDerivativeSourceURI) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.EducationContentLanguage table of the EducationContent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationContentLanguage : IEducationContentLanguage, IEducationContentLanguageSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IEducationContent _educationContent;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IEducationContent IEducationContentLanguage.EducationContent
        {
            get { return _educationContent; }
            set { _educationContent = value; }
        }

        internal IEducationContent EducationContent
        {
            set { _educationContent = value; }
        }

        /// <summary>
        /// An indication of the languages in which the Education Content is designed.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageDescriptor"), NaturalKeyMember]
        public string LanguageDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_educationContent != null) 
                    hash = hash * 23 + _educationContent.GetHashCode();
 
                // Standard Property
                if ((this as IEducationContentLanguage).LanguageDescriptor != null) 
                    hash = hash * 23 + (this as IEducationContentLanguage).LanguageDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationContentLanguage)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationContentLanguage) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: EducationOrganization

namespace EdFi.Ods.Api.Models.Resources.V2.EducationOrganization
{
    /// <summary>
    /// Represents a reference to the EducationOrganization resource.
    /// </summary>
    [DataContract]
    public class EducationOrganizationReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "EducationOrganization",
                            Href = "/educationOrganizations"
                                    + "?educationOrganizationId=" + EducationOrganizationId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.EducationOrganizationAddress table of the EducationOrganization aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationOrganizationAddress : IEducationOrganizationAddress, IEducationOrganizationAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IEducationOrganization _educationOrganization;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IEducationOrganization IEducationOrganizationAddress.EducationOrganization
        {
            get { return _educationOrganization; }
            set { _educationOrganization = value; }
        }

        internal IEducationOrganization EducationOrganization
        {
            set { _educationOrganization = value; }
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressType"), NaturalKeyMember]
        public string AddressType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_educationOrganization != null) 
                    hash = hash * 23 + _educationOrganization.GetHashCode();
 
                // Standard Property
                if ((this as IEducationOrganizationAddress).AddressType != null) 
                    hash = hash * 23 + (this as IEducationOrganizationAddress).AddressType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                         'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationType")]
        public string StateAbbreviationType { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName")]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationOrganizationAddress)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationOrganizationAddress) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEducationOrganizationAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported  { get { return true; } set { } }
 
        bool IEducationOrganizationAddressSynchronizationSourceSupport.IsBeginDateSupported                 { get { return true; } set { } }
 
        bool IEducationOrganizationAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported        { get { return true; } set { } }
 
        bool IEducationOrganizationAddressSynchronizationSourceSupport.IsCitySupported                      { get { return true; } set { } }
 
        bool IEducationOrganizationAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported            { get { return true; } set { } }
 
        bool IEducationOrganizationAddressSynchronizationSourceSupport.IsEndDateSupported                   { get { return true; } set { } }
 
        bool IEducationOrganizationAddressSynchronizationSourceSupport.IsLatitudeSupported                  { get { return true; } set { } }
 
        bool IEducationOrganizationAddressSynchronizationSourceSupport.IsLongitudeSupported                 { get { return true; } set { } }
 
        bool IEducationOrganizationAddressSynchronizationSourceSupport.IsNameOfCountySupported              { get { return true; } set { } }
 
        bool IEducationOrganizationAddressSynchronizationSourceSupport.IsPostalCodeSupported                { get { return true; } set { } }
 
        bool IEducationOrganizationAddressSynchronizationSourceSupport.IsStateAbbreviationTypeSupported     { get { return true; } set { } }
 
        bool IEducationOrganizationAddressSynchronizationSourceSupport.IsStreetNumberNameSupported          { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.EducationOrganizationCategory table of the EducationOrganization aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationOrganizationCategory : IEducationOrganizationCategory, IEducationOrganizationCategorySynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IEducationOrganization _educationOrganization;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IEducationOrganization IEducationOrganizationCategory.EducationOrganization
        {
            get { return _educationOrganization; }
            set { _educationOrganization = value; }
        }

        internal IEducationOrganization EducationOrganization
        {
            set { _educationOrganization = value; }
        }

        /// <summary>
        /// The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="type"), NaturalKeyMember]
        public string EducationOrganizationCategoryType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_educationOrganization != null) 
                    hash = hash * 23 + _educationOrganization.GetHashCode();
 
                // Standard Property
                if ((this as IEducationOrganizationCategory).EducationOrganizationCategoryType != null) 
                    hash = hash * 23 + (this as IEducationOrganizationCategory).EducationOrganizationCategoryType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationOrganizationCategory)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationOrganizationCategory) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.EducationOrganizationIdentificationCode table of the EducationOrganization aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationOrganizationIdentificationCode : IEducationOrganizationIdentificationCode, IEducationOrganizationIdentificationCodeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IEducationOrganization _educationOrganization;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IEducationOrganization IEducationOrganizationIdentificationCode.EducationOrganization
        {
            get { return _educationOrganization; }
            set { _educationOrganization = value; }
        }

        internal IEducationOrganization EducationOrganization
        {
            set { _educationOrganization = value; }
        }

        /// <summary>
        /// The school system, state, or agency assigning the identification code.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="educationOrganizationIdentificationSystemDescriptor"), NaturalKeyMember]
        public string EducationOrganizationIdentificationSystemDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_educationOrganization != null) 
                    hash = hash * 23 + _educationOrganization.GetHashCode();
 
                // Standard Property
                if ((this as IEducationOrganizationIdentificationCode).EducationOrganizationIdentificationSystemDescriptor != null) 
                    hash = hash * 23 + (this as IEducationOrganizationIdentificationCode).EducationOrganizationIdentificationSystemDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode")]
        public string IdentificationCode { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationOrganizationIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationOrganizationIdentificationCode) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEducationOrganizationIdentificationCodeSynchronizationSourceSupport.IsIdentificationCodeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.EducationOrganizationInstitutionTelephone table of the EducationOrganization aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationOrganizationInstitutionTelephone : IEducationOrganizationInstitutionTelephone, IEducationOrganizationInstitutionTelephoneSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IEducationOrganization _educationOrganization;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IEducationOrganization IEducationOrganizationInstitutionTelephone.EducationOrganization
        {
            get { return _educationOrganization; }
            set { _educationOrganization = value; }
        }

        internal IEducationOrganization EducationOrganization
        {
            set { _educationOrganization = value; }
        }

        /// <summary>
        /// The type of communication number listed for an individual or organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="institutionTelephoneNumberType"), NaturalKeyMember]
        public string InstitutionTelephoneNumberType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_educationOrganization != null) 
                    hash = hash * 23 + _educationOrganization.GetHashCode();
 
                // Standard Property
                if ((this as IEducationOrganizationInstitutionTelephone).InstitutionTelephoneNumberType != null) 
                    hash = hash * 23 + (this as IEducationOrganizationInstitutionTelephone).InstitutionTelephoneNumberType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The telephone number including the area code, and extension, if applicable.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="telephoneNumber")]
        public string TelephoneNumber { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationOrganizationInstitutionTelephone)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationOrganizationInstitutionTelephone) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEducationOrganizationInstitutionTelephoneSynchronizationSourceSupport.IsTelephoneNumberSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.EducationOrganizationInternationalAddress table of the EducationOrganization aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationOrganizationInternationalAddress : IEducationOrganizationInternationalAddress, IEducationOrganizationInternationalAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IEducationOrganization _educationOrganization;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IEducationOrganization IEducationOrganizationInternationalAddress.EducationOrganization
        {
            get { return _educationOrganization; }
            set { _educationOrganization = value; }
        }

        internal IEducationOrganization EducationOrganization
        {
            set { _educationOrganization = value; }
        }

        /// <summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressType"), NaturalKeyMember]
        public string AddressType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_educationOrganization != null) 
                    hash = hash * 23 + _educationOrganization.GetHashCode();
 
                // Standard Property
                if ((this as IEducationOrganizationInternationalAddress).AddressType != null) 
                    hash = hash * 23 + (this as IEducationOrganizationInternationalAddress).AddressType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The first line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine1")]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine2")]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine3")]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The fourth line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine4")]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The name of the country.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="countryDescriptor")]
        public string CountryDescriptor { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationOrganizationInternationalAddress)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationOrganizationInternationalAddress) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEducationOrganizationInternationalAddressSynchronizationSourceSupport.IsAddressLine1Supported       { get { return true; } set { } }
 
        bool IEducationOrganizationInternationalAddressSynchronizationSourceSupport.IsAddressLine2Supported       { get { return true; } set { } }
 
        bool IEducationOrganizationInternationalAddressSynchronizationSourceSupport.IsAddressLine3Supported       { get { return true; } set { } }
 
        bool IEducationOrganizationInternationalAddressSynchronizationSourceSupport.IsAddressLine4Supported       { get { return true; } set { } }
 
        bool IEducationOrganizationInternationalAddressSynchronizationSourceSupport.IsBeginDateSupported          { get { return true; } set { } }
 
        bool IEducationOrganizationInternationalAddressSynchronizationSourceSupport.IsCountryDescriptorSupported  { get { return true; } set { } }
 
        bool IEducationOrganizationInternationalAddressSynchronizationSourceSupport.IsEndDateSupported            { get { return true; } set { } }
 
        bool IEducationOrganizationInternationalAddressSynchronizationSourceSupport.IsLatitudeSupported           { get { return true; } set { } }
 
        bool IEducationOrganizationInternationalAddressSynchronizationSourceSupport.IsLongitudeSupported          { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: EducationOrganizationCategoryType

namespace EdFi.Ods.Api.Models.Resources.V2.EducationOrganizationCategoryType
{
    /// <summary>
    /// A class which represents the edfi.EducationOrganizationCategoryType table of the EducationOrganizationCategoryType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationOrganizationCategoryType : IEducationOrganizationCategoryType, IHasETag, IEducationOrganizationCategoryTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the EducationOrganizationCategoryType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for EducationOrganizationCategory
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="educationOrganizationCategoryTypeId"), NaturalKeyMember]
        public int EducationOrganizationCategoryTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IEducationOrganizationCategoryType).EducationOrganizationCategoryTypeId != null) 
                    hash = hash * 23 + (this as IEducationOrganizationCategoryType).EducationOrganizationCategoryTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the EducationOrganizationCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the EducationOrganizationCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationOrganizationCategoryType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationOrganizationCategoryType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEducationOrganizationCategoryTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IEducationOrganizationCategoryTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IEducationOrganizationCategoryTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: EducationOrganizationIdentificationSystemDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.EducationOrganizationIdentificationSystemDescriptor
{
    /// <summary>
    /// A class which represents the edfi.EducationOrganizationIdentificationSystemDescriptor table of the EducationOrganizationIdentificationSystemDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationOrganizationIdentificationSystemDescriptor : IEducationOrganizationIdentificationSystemDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IEducationOrganizationIdentificationSystemDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the EducationOrganizationIdentificationSystemDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="educationOrganizationIdentificationSystemDescriptorId"), NaturalKeyMember]
        public int EducationOrganizationIdentificationSystemDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EducationOrganizationIdentificationSystemDescriptorId; }
            set { EducationOrganizationIdentificationSystemDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IEducationOrganizationIdentificationSystemDescriptor).EducationOrganizationIdentificationSystemDescriptorId != null) 
                    hash = hash * 23 + (this as IEducationOrganizationIdentificationSystemDescriptor).EducationOrganizationIdentificationSystemDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="educationOrganizationIdentificationSystemType")]
        public string EducationOrganizationIdentificationSystemType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationOrganizationIdentificationSystemDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationOrganizationIdentificationSystemDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEducationOrganizationIdentificationSystemDescriptorSynchronizationSourceSupport.IsCodeValueSupported                                      { get { return true; } set { } }
 
        bool IEducationOrganizationIdentificationSystemDescriptorSynchronizationSourceSupport.IsDescriptionSupported                                    { get { return true; } set { } }
 
        bool IEducationOrganizationIdentificationSystemDescriptorSynchronizationSourceSupport.IsEducationOrganizationIdentificationSystemTypeSupported  { get { return true; } set { } }
 
        bool IEducationOrganizationIdentificationSystemDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported                             { get { return true; } set { } }
 
        bool IEducationOrganizationIdentificationSystemDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported                               { get { return true; } set { } }
 
        bool IEducationOrganizationIdentificationSystemDescriptorSynchronizationSourceSupport.IsNamespaceSupported                                      { get { return true; } set { } }
 
        bool IEducationOrganizationIdentificationSystemDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported                              { get { return true; } set { } }
 
        bool IEducationOrganizationIdentificationSystemDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported                               { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: EducationOrganizationIdentificationSystemType

namespace EdFi.Ods.Api.Models.Resources.V2.EducationOrganizationIdentificationSystemType
{
    /// <summary>
    /// A class which represents the edfi.EducationOrganizationIdentificationSystemType table of the EducationOrganizationIdentificationSystemType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationOrganizationIdentificationSystemType : IEducationOrganizationIdentificationSystemType, IHasETag, IEducationOrganizationIdentificationSystemTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the EducationOrganizationIdentificationSystemType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for EducationOrganizationIdentificationSystem
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="educationOrganizationIdentificationSystemTypeId"), NaturalKeyMember]
        public int EducationOrganizationIdentificationSystemTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IEducationOrganizationIdentificationSystemType).EducationOrganizationIdentificationSystemTypeId != null) 
                    hash = hash * 23 + (this as IEducationOrganizationIdentificationSystemType).EducationOrganizationIdentificationSystemTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the EducationOrganizationIdentificationSystem type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the EducationOrganizationIdentificationSystem type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationOrganizationIdentificationSystemType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationOrganizationIdentificationSystemType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEducationOrganizationIdentificationSystemTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IEducationOrganizationIdentificationSystemTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IEducationOrganizationIdentificationSystemTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: EducationOrganizationInterventionPrescriptionAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.EducationOrganizationInterventionPrescriptionAssociation
{
    /// <summary>
    /// Represents a reference to the EducationOrganizationInterventionPrescriptionAssociation resource.
    /// </summary>
    [DataContract]
    public class EducationOrganizationInterventionPrescriptionAssociationReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="interventionPrescriptionEducationOrganizationId"), NaturalKeyMember]
        public int InterventionPrescriptionEducationOrganizationId { get; set; }

        [DataMember(Name="interventionPrescriptionIdentificationCode"), NaturalKeyMember]
        public string InterventionPrescriptionIdentificationCode { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "EducationOrganizationInterventionPrescriptionAssociation",
                            Href = "/educationOrganizationInterventionPrescriptionAssociations"
                                    + "?educationOrganizationId=" + EducationOrganizationId            
                                    + "&interventionPrescriptionEducationOrganizationId=" + InterventionPrescriptionEducationOrganizationId            
                                    + "&interventionPrescriptionIdentificationCode=" + WebUtility.UrlEncode(InterventionPrescriptionIdentificationCode)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int)
                && InterventionPrescriptionEducationOrganizationId != default(int)
                && InterventionPrescriptionIdentificationCode != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.EducationOrganizationInterventionPrescriptionAssociation table of the EducationOrganizationInterventionPrescriptionAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationOrganizationInterventionPrescriptionAssociation : IEducationOrganizationInterventionPrescriptionAssociation, IHasETag, IEducationOrganizationInterventionPrescriptionAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the EducationOrganizationInterventionPrescriptionAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        private bool _interventionPrescriptionReferenceExplicitlyAssigned;
        private InterventionPrescription.InterventionPrescriptionReference _interventionPrescriptionReference;
        private InterventionPrescription.InterventionPrescriptionReference ImplicitInterventionPrescriptionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_interventionPrescriptionReference == null && !_interventionPrescriptionReferenceExplicitlyAssigned)
                    _interventionPrescriptionReference = new InterventionPrescription.InterventionPrescriptionReference();

                return _interventionPrescriptionReference;
            }
        }

        [DataMember(Name="interventionPrescriptionReference")][NaturalKeyMember]
        public InterventionPrescription.InterventionPrescriptionReference InterventionPrescriptionReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitInterventionPrescriptionReference != null
                    && (_interventionPrescriptionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitInterventionPrescriptionReference.IsReferenceFullyDefined()))
                    return ImplicitInterventionPrescriptionReference;

                return null;
            }
            set 
            { 
                _interventionPrescriptionReferenceExplicitlyAssigned = true;
                _interventionPrescriptionReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IEducationOrganizationInterventionPrescriptionAssociation.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IEducationOrganizationInterventionPrescriptionAssociation.InterventionPrescriptionEducationOrganizationId
        {
            get
            {
                if (ImplicitInterventionPrescriptionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitInterventionPrescriptionReference.IsReferenceFullyDefined()))
                    return ImplicitInterventionPrescriptionReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // InterventionPrescription
                _interventionPrescriptionReferenceExplicitlyAssigned = false;
                ImplicitInterventionPrescriptionReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IEducationOrganizationInterventionPrescriptionAssociation.InterventionPrescriptionIdentificationCode
        {
            get
            {
                if (ImplicitInterventionPrescriptionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitInterventionPrescriptionReference.IsReferenceFullyDefined()))
                    return ImplicitInterventionPrescriptionReference.InterventionPrescriptionIdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // InterventionPrescription
                _interventionPrescriptionReferenceExplicitlyAssigned = false;
                ImplicitInterventionPrescriptionReference.InterventionPrescriptionIdentificationCode = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IEducationOrganizationInterventionPrescriptionAssociation).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IEducationOrganizationInterventionPrescriptionAssociation).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IEducationOrganizationInterventionPrescriptionAssociation).InterventionPrescriptionEducationOrganizationId != null) 
                    hash = hash * 23 + (this as IEducationOrganizationInterventionPrescriptionAssociation).InterventionPrescriptionEducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IEducationOrganizationInterventionPrescriptionAssociation).InterventionPrescriptionIdentificationCode != null) 
                    hash = hash * 23 + (this as IEducationOrganizationInterventionPrescriptionAssociation).InterventionPrescriptionIdentificationCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The begin date of the period during which the InterventionPrescription is available.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The end date of the period during which the InterventionPrescription is available.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationOrganizationInterventionPrescriptionAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationOrganizationInterventionPrescriptionAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEducationOrganizationInterventionPrescriptionAssociationSynchronizationSourceSupport.IsBeginDateSupported  { get { return true; } set { } }
 
        bool IEducationOrganizationInterventionPrescriptionAssociationSynchronizationSourceSupport.IsEndDateSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: EducationOrganizationNetwork

namespace EdFi.Ods.Api.Models.Resources.V2.EducationOrganizationNetwork
{
    /// <summary>
    /// Represents a reference to the EducationOrganizationNetwork resource.
    /// </summary>
    [DataContract]
    public class EducationOrganizationNetworkReference
    {
        [DataMember(Name="educationOrganizationNetworkId"), NaturalKeyMember]
        public int EducationOrganizationNetworkId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "EducationOrganizationNetwork",
                            Href = "/educationOrganizationNetworks"
                                    + "?educationOrganizationNetworkId=" + EducationOrganizationNetworkId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationNetworkId != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.EducationOrganizationNetwork table of the EducationOrganizationNetwork aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationOrganizationNetwork : IEducationOrganizationNetwork, EdFi.Ods.Entities.Common.IEducationOrganization, IHasETag, IEducationOrganizationNetworkSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public EducationOrganizationNetwork()
        {

            // Inherited lists
            EducationOrganizationAddresses = new List<EducationOrganization.EducationOrganizationAddress>();
            EducationOrganizationCategories = new List<EducationOrganization.EducationOrganizationCategory>();
            EducationOrganizationIdentificationCodes = new List<EducationOrganization.EducationOrganizationIdentificationCode>();
            EducationOrganizationInstitutionTelephones = new List<EducationOrganization.EducationOrganizationInstitutionTelephone>();
            EducationOrganizationInternationalAddresses = new List<EducationOrganization.EducationOrganizationInternationalAddress>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EducationOrganizationNetwork resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique number or alphanumeric code assigned to a network of education organizations.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="educationOrganizationNetworkId"), NaturalKeyMember]
        public int EducationOrganizationNetworkId { get; set; }

        int IEducationOrganization.EducationOrganizationId
        {
            get { return EducationOrganizationNetworkId; }
            set { EducationOrganizationNetworkId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IEducationOrganizationNetwork).EducationOrganizationNetworkId != null) 
                    hash = hash * 23 + (this as IEducationOrganizationNetwork).EducationOrganizationNetworkId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The full, legally accepted name of the institution.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfInstitution")]
        public string NameOfInstitution { get; set; }

        /// <summary>
        /// The current operational status of the EducationOrganization (e.g., active, inactive).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="operationalStatusType")]
        public string OperationalStatusType { get; set; }

        /// <summary>
        /// A short name for the institution.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortNameOfInstitution")]
        public string ShortNameOfInstitution { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization by the StateEducationAgency (SEA).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="stateOrganizationId")]
        public string StateOrganizationId { get; set; }

        /// <summary>
        /// The public web site address (URL) for the EducationOrganization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="webSite")]
        public string WebSite { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The purpose(s) of the network (e.g., shared services, collective procurement).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="networkPurposeType")]
        public string NetworkPurposeType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        private IList<EducationOrganization.EducationOrganizationAddress> _educationOrganizationAddresses;
        private IList<IEducationOrganizationAddress> _educationOrganizationAddressesCovariant;

        [DataMember(Name="addresses")]
        public IList<EducationOrganization.EducationOrganizationAddress> EducationOrganizationAddresses 
        {
            get { return _educationOrganizationAddresses; }
            set 
            {
                _educationOrganizationAddresses = value;
                _educationOrganizationAddressesCovariant = new CovariantIListAdapter<IEducationOrganizationAddress, EducationOrganization.EducationOrganizationAddress>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationAddress> IEducationOrganization.EducationOrganizationAddresses
        {
            get { return _educationOrganizationAddressesCovariant; }
            set { EducationOrganizationAddresses = new List<EducationOrganization.EducationOrganizationAddress>(value.Cast<EducationOrganization.EducationOrganizationAddress>()); }
        }
        private IList<EducationOrganization.EducationOrganizationCategory> _educationOrganizationCategories;
        private IList<IEducationOrganizationCategory> _educationOrganizationCategoriesCovariant;

        [DataMember(Name="educationOrganizationCategories")]
        public IList<EducationOrganization.EducationOrganizationCategory> EducationOrganizationCategories 
        {
            get { return _educationOrganizationCategories; }
            set 
            {
                _educationOrganizationCategories = value;
                _educationOrganizationCategoriesCovariant = new CovariantIListAdapter<IEducationOrganizationCategory, EducationOrganization.EducationOrganizationCategory>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationCategory> IEducationOrganization.EducationOrganizationCategories
        {
            get { return _educationOrganizationCategoriesCovariant; }
            set { EducationOrganizationCategories = new List<EducationOrganization.EducationOrganizationCategory>(value.Cast<EducationOrganization.EducationOrganizationCategory>()); }
        }
        private IList<EducationOrganization.EducationOrganizationIdentificationCode> _educationOrganizationIdentificationCodes;
        private IList<IEducationOrganizationIdentificationCode> _educationOrganizationIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes")]
        public IList<EducationOrganization.EducationOrganizationIdentificationCode> EducationOrganizationIdentificationCodes 
        {
            get { return _educationOrganizationIdentificationCodes; }
            set 
            {
                _educationOrganizationIdentificationCodes = value;
                _educationOrganizationIdentificationCodesCovariant = new CovariantIListAdapter<IEducationOrganizationIdentificationCode, EducationOrganization.EducationOrganizationIdentificationCode>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationIdentificationCode> IEducationOrganization.EducationOrganizationIdentificationCodes
        {
            get { return _educationOrganizationIdentificationCodesCovariant; }
            set { EducationOrganizationIdentificationCodes = new List<EducationOrganization.EducationOrganizationIdentificationCode>(value.Cast<EducationOrganization.EducationOrganizationIdentificationCode>()); }
        }
        private IList<EducationOrganization.EducationOrganizationInstitutionTelephone> _educationOrganizationInstitutionTelephones;
        private IList<IEducationOrganizationInstitutionTelephone> _educationOrganizationInstitutionTelephonesCovariant;

        [DataMember(Name="institutionTelephones")]
        public IList<EducationOrganization.EducationOrganizationInstitutionTelephone> EducationOrganizationInstitutionTelephones 
        {
            get { return _educationOrganizationInstitutionTelephones; }
            set 
            {
                _educationOrganizationInstitutionTelephones = value;
                _educationOrganizationInstitutionTelephonesCovariant = new CovariantIListAdapter<IEducationOrganizationInstitutionTelephone, EducationOrganization.EducationOrganizationInstitutionTelephone>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationInstitutionTelephone> IEducationOrganization.EducationOrganizationInstitutionTelephones
        {
            get { return _educationOrganizationInstitutionTelephonesCovariant; }
            set { EducationOrganizationInstitutionTelephones = new List<EducationOrganization.EducationOrganizationInstitutionTelephone>(value.Cast<EducationOrganization.EducationOrganizationInstitutionTelephone>()); }
        }
        private IList<EducationOrganization.EducationOrganizationInternationalAddress> _educationOrganizationInternationalAddresses;
        private IList<IEducationOrganizationInternationalAddress> _educationOrganizationInternationalAddressesCovariant;

        [DataMember(Name="internationalAddresses")]
        public IList<EducationOrganization.EducationOrganizationInternationalAddress> EducationOrganizationInternationalAddresses 
        {
            get { return _educationOrganizationInternationalAddresses; }
            set 
            {
                _educationOrganizationInternationalAddresses = value;
                _educationOrganizationInternationalAddressesCovariant = new CovariantIListAdapter<IEducationOrganizationInternationalAddress, EducationOrganization.EducationOrganizationInternationalAddress>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationInternationalAddress> IEducationOrganization.EducationOrganizationInternationalAddresses
        {
            get { return _educationOrganizationInternationalAddressesCovariant; }
            set { EducationOrganizationInternationalAddresses = new List<EducationOrganization.EducationOrganizationInternationalAddress>(value.Cast<EducationOrganization.EducationOrganizationInternationalAddress>()); }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            // _educationOrganizationAddresses
            // _educationOrganizationCategories
            // _educationOrganizationIdentificationCodes
            // _educationOrganizationInstitutionTelephones
            // _educationOrganizationInternationalAddresses
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationOrganizationNetwork)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationOrganizationNetwork) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEducationOrganizationNetworkSynchronizationSourceSupport.IsEducationOrganizationAddressesSupported               { get { return true; } set { } }
 
        bool IEducationOrganizationNetworkSynchronizationSourceSupport.IsEducationOrganizationCategoriesSupported              { get { return true; } set { } }
 
        bool IEducationOrganizationNetworkSynchronizationSourceSupport.IsEducationOrganizationIdentificationCodesSupported     { get { return true; } set { } }
 
        bool IEducationOrganizationNetworkSynchronizationSourceSupport.IsEducationOrganizationInstitutionTelephonesSupported   { get { return true; } set { } }
 
        bool IEducationOrganizationNetworkSynchronizationSourceSupport.IsEducationOrganizationInternationalAddressesSupported  { get { return true; } set { } }
 
        bool IEducationOrganizationNetworkSynchronizationSourceSupport.IsNameOfInstitutionSupported                            { get { return true; } set { } }
 
        bool IEducationOrganizationNetworkSynchronizationSourceSupport.IsNetworkPurposeTypeSupported                           { get { return true; } set { } }
 
        bool IEducationOrganizationNetworkSynchronizationSourceSupport.IsOperationalStatusTypeSupported                        { get { return true; } set { } }
 
        bool IEducationOrganizationNetworkSynchronizationSourceSupport.IsShortNameOfInstitutionSupported                       { get { return true; } set { } }
 
        bool IEducationOrganizationNetworkSynchronizationSourceSupport.IsStateOrganizationIdSupported                          { get { return true; } set { } }
 
        bool IEducationOrganizationNetworkSynchronizationSourceSupport.IsWebSiteSupported                                      { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IEducationOrganizationAddress, bool> IEducationOrganizationNetworkSynchronizationSourceSupport.IsEducationOrganizationAddressIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationCategory, bool> IEducationOrganizationNetworkSynchronizationSourceSupport.IsEducationOrganizationCategoryIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationIdentificationCode, bool> IEducationOrganizationNetworkSynchronizationSourceSupport.IsEducationOrganizationIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationInstitutionTelephone, bool> IEducationOrganizationNetworkSynchronizationSourceSupport.IsEducationOrganizationInstitutionTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationInternationalAddress, bool> IEducationOrganizationNetworkSynchronizationSourceSupport.IsEducationOrganizationInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
}
// Aggregate: EducationOrganizationNetworkAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.EducationOrganizationNetworkAssociation
{
    /// <summary>
    /// Represents a reference to the EducationOrganizationNetworkAssociation resource.
    /// </summary>
    [DataContract]
    public class EducationOrganizationNetworkAssociationReference
    {
        [DataMember(Name="educationOrganizationNetworkId"), NaturalKeyMember]
        public int EducationOrganizationNetworkId { get; set; }

        [DataMember(Name="memberEducationOrganizationId"), NaturalKeyMember]
        public int MemberEducationOrganizationId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "EducationOrganizationNetworkAssociation",
                            Href = "/educationOrganizationNetworkAssociations"
                                    + "?educationOrganizationNetworkId=" + EducationOrganizationNetworkId            
                                    + "&memberEducationOrganizationId=" + MemberEducationOrganizationId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationNetworkId != default(int)
                && MemberEducationOrganizationId != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.EducationOrganizationNetworkAssociation table of the EducationOrganizationNetworkAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationOrganizationNetworkAssociation : IEducationOrganizationNetworkAssociation, IHasETag, IEducationOrganizationNetworkAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the EducationOrganizationNetworkAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationNetworkReferenceExplicitlyAssigned;
        private EducationOrganizationNetwork.EducationOrganizationNetworkReference _educationOrganizationNetworkReference;
        private EducationOrganizationNetwork.EducationOrganizationNetworkReference ImplicitEducationOrganizationNetworkReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationNetworkReference == null && !_educationOrganizationNetworkReferenceExplicitlyAssigned)
                    _educationOrganizationNetworkReference = new EducationOrganizationNetwork.EducationOrganizationNetworkReference();

                return _educationOrganizationNetworkReference;
            }
        }

        [DataMember(Name="educationOrganizationNetworkReference")][NaturalKeyMember]
        public EducationOrganizationNetwork.EducationOrganizationNetworkReference EducationOrganizationNetworkReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationNetworkReference != null
                    && (_educationOrganizationNetworkReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationNetworkReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationNetworkReference;

                return null;
            }
            set 
            { 
                _educationOrganizationNetworkReferenceExplicitlyAssigned = true;
                _educationOrganizationNetworkReference = value;
            }
        }
        private bool _memberEducationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _memberEducationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitMemberEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_memberEducationOrganizationReference == null && !_memberEducationOrganizationReferenceExplicitlyAssigned)
                    _memberEducationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _memberEducationOrganizationReference;
            }
        }

        [DataMember(Name="memberEducationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference MemberEducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitMemberEducationOrganizationReference != null
                    && (_memberEducationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitMemberEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitMemberEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _memberEducationOrganizationReferenceExplicitlyAssigned = true;
                _memberEducationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique number or alphanumeric code assigned to a network of education organizations.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IEducationOrganizationNetworkAssociation.EducationOrganizationNetworkId
        {
            get
            {
                if (ImplicitEducationOrganizationNetworkReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationNetworkReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationNetworkReference.EducationOrganizationNetworkId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganizationNetwork
                _educationOrganizationNetworkReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationNetworkReference.EducationOrganizationNetworkId = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IEducationOrganizationNetworkAssociation.MemberEducationOrganizationId
        {
            get
            {
                if (ImplicitMemberEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitMemberEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitMemberEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // MemberEducationOrganization
                _memberEducationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitMemberEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IEducationOrganizationNetworkAssociation).EducationOrganizationNetworkId != null) 
                    hash = hash * 23 + (this as IEducationOrganizationNetworkAssociation).EducationOrganizationNetworkId.GetHashCode();
 
                //Referenced Property
                if ((this as IEducationOrganizationNetworkAssociation).MemberEducationOrganizationId != null) 
                    hash = hash * 23 + (this as IEducationOrganizationNetworkAssociation).MemberEducationOrganizationId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date on which the EducationOrganization joined this network.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The date on which the EducationOrganization left this network.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationOrganizationNetworkAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationOrganizationNetworkAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEducationOrganizationNetworkAssociationSynchronizationSourceSupport.IsBeginDateSupported  { get { return true; } set { } }
 
        bool IEducationOrganizationNetworkAssociationSynchronizationSourceSupport.IsEndDateSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: EducationOrganizationPeerAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.EducationOrganizationPeerAssociation
{
    /// <summary>
    /// Represents a reference to the EducationOrganizationPeerAssociation resource.
    /// </summary>
    [DataContract]
    public class EducationOrganizationPeerAssociationReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="peerEducationOrganizationId"), NaturalKeyMember]
        public int PeerEducationOrganizationId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "EducationOrganizationPeerAssociation",
                            Href = "/educationOrganizationPeerAssociations"
                                    + "?educationOrganizationId=" + EducationOrganizationId            
                                    + "&peerEducationOrganizationId=" + PeerEducationOrganizationId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int)
                && PeerEducationOrganizationId != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.EducationOrganizationPeerAssociation table of the EducationOrganizationPeerAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationOrganizationPeerAssociation : IEducationOrganizationPeerAssociation, IHasETag, IEducationOrganizationPeerAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the EducationOrganizationPeerAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        private bool _peerEducationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _peerEducationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitPeerEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_peerEducationOrganizationReference == null && !_peerEducationOrganizationReferenceExplicitlyAssigned)
                    _peerEducationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _peerEducationOrganizationReference;
            }
        }

        [DataMember(Name="peerEducationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference PeerEducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitPeerEducationOrganizationReference != null
                    && (_peerEducationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPeerEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitPeerEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _peerEducationOrganizationReferenceExplicitlyAssigned = true;
                _peerEducationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IEducationOrganizationPeerAssociation.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IEducationOrganizationPeerAssociation.PeerEducationOrganizationId
        {
            get
            {
                if (ImplicitPeerEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPeerEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitPeerEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // PeerEducationOrganization
                _peerEducationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitPeerEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IEducationOrganizationPeerAssociation).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IEducationOrganizationPeerAssociation).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IEducationOrganizationPeerAssociation).PeerEducationOrganizationId != null) 
                    hash = hash * 23 + (this as IEducationOrganizationPeerAssociation).PeerEducationOrganizationId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationOrganizationPeerAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationOrganizationPeerAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: EducationPlanType

namespace EdFi.Ods.Api.Models.Resources.V2.EducationPlanType
{
    /// <summary>
    /// A class which represents the edfi.EducationPlanType table of the EducationPlanType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationPlanType : IEducationPlanType, IHasETag, IEducationPlanTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the EducationPlanType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for EducationPlan
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="educationPlanTypeId"), NaturalKeyMember]
        public int EducationPlanTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IEducationPlanType).EducationPlanTypeId != null) 
                    hash = hash * 23 + (this as IEducationPlanType).EducationPlanTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the EducationPlan type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the EducationPlan type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationPlanType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationPlanType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEducationPlanTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IEducationPlanTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IEducationPlanTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: EducationServiceCenter

namespace EdFi.Ods.Api.Models.Resources.V2.EducationServiceCenter
{
    /// <summary>
    /// Represents a reference to the EducationServiceCenter resource.
    /// </summary>
    [DataContract]
    public class EducationServiceCenterReference
    {
        [DataMember(Name="educationServiceCenterId"), NaturalKeyMember]
        public int EducationServiceCenterId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "EducationServiceCenter",
                            Href = "/educationServiceCenters"
                                    + "?educationServiceCenterId=" + EducationServiceCenterId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationServiceCenterId != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.EducationServiceCenter table of the EducationServiceCenter aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EducationServiceCenter : IEducationServiceCenter, EdFi.Ods.Entities.Common.IEducationOrganization, IHasETag, IEducationServiceCenterSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public EducationServiceCenter()
        {

            // Inherited lists
            EducationOrganizationAddresses = new List<EducationOrganization.EducationOrganizationAddress>();
            EducationOrganizationCategories = new List<EducationOrganization.EducationOrganizationCategory>();
            EducationOrganizationIdentificationCodes = new List<EducationOrganization.EducationOrganizationIdentificationCode>();
            EducationOrganizationInstitutionTelephones = new List<EducationOrganization.EducationOrganizationInstitutionTelephone>();
            EducationOrganizationInternationalAddresses = new List<EducationOrganization.EducationOrganizationInternationalAddress>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EducationServiceCenter resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _stateEducationAgencyReferenceExplicitlyAssigned;
        private StateEducationAgency.StateEducationAgencyReference _stateEducationAgencyReference;
        private StateEducationAgency.StateEducationAgencyReference ImplicitStateEducationAgencyReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_stateEducationAgencyReference == null && !_stateEducationAgencyReferenceExplicitlyAssigned)
                    _stateEducationAgencyReference = new StateEducationAgency.StateEducationAgencyReference();

                return _stateEducationAgencyReference;
            }
        }

        [DataMember(Name="stateEducationAgencyReference")]
        public StateEducationAgency.StateEducationAgencyReference StateEducationAgencyReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStateEducationAgencyReference != null
                    && (_stateEducationAgencyReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStateEducationAgencyReference.IsReferenceFullyDefined()))
                    return ImplicitStateEducationAgencyReference;

                return null;
            }
            set 
            { 
                _stateEducationAgencyReferenceExplicitlyAssigned = true;
                _stateEducationAgencyReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education service center by the State Education Agency (SEA).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="educationServiceCenterId"), NaturalKeyMember]
        public int EducationServiceCenterId { get; set; }

        int IEducationOrganization.EducationOrganizationId
        {
            get { return EducationServiceCenterId; }
            set { EducationServiceCenterId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IEducationServiceCenter).EducationServiceCenterId != null) 
                    hash = hash * 23 + (this as IEducationServiceCenter).EducationServiceCenterId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The full, legally accepted name of the institution.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfInstitution")]
        public string NameOfInstitution { get; set; }

        /// <summary>
        /// The current operational status of the EducationOrganization (e.g., active, inactive).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="operationalStatusType")]
        public string OperationalStatusType { get; set; }

        /// <summary>
        /// A short name for the institution.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortNameOfInstitution")]
        public string ShortNameOfInstitution { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization by the StateEducationAgency (SEA).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="stateOrganizationId")]
        public string StateOrganizationId { get; set; }

        /// <summary>
        /// The public web site address (URL) for the EducationOrganization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="webSite")]
        public string WebSite { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to a state education agency by the StateEducationAgency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? IEducationServiceCenter.StateEducationAgencyId
        {
            get
            {
                if (ImplicitStateEducationAgencyReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStateEducationAgencyReference.IsReferenceFullyDefined()))
                    return ImplicitStateEducationAgencyReference.StateEducationAgencyId;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StateEducationAgency
                _stateEducationAgencyReferenceExplicitlyAssigned = false;
                ImplicitStateEducationAgencyReference.StateEducationAgencyId = value.GetValueOrDefault();
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        private IList<EducationOrganization.EducationOrganizationAddress> _educationOrganizationAddresses;
        private IList<IEducationOrganizationAddress> _educationOrganizationAddressesCovariant;

        [DataMember(Name="addresses")]
        public IList<EducationOrganization.EducationOrganizationAddress> EducationOrganizationAddresses 
        {
            get { return _educationOrganizationAddresses; }
            set 
            {
                _educationOrganizationAddresses = value;
                _educationOrganizationAddressesCovariant = new CovariantIListAdapter<IEducationOrganizationAddress, EducationOrganization.EducationOrganizationAddress>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationAddress> IEducationOrganization.EducationOrganizationAddresses
        {
            get { return _educationOrganizationAddressesCovariant; }
            set { EducationOrganizationAddresses = new List<EducationOrganization.EducationOrganizationAddress>(value.Cast<EducationOrganization.EducationOrganizationAddress>()); }
        }
        private IList<EducationOrganization.EducationOrganizationCategory> _educationOrganizationCategories;
        private IList<IEducationOrganizationCategory> _educationOrganizationCategoriesCovariant;

        [DataMember(Name="educationOrganizationCategories")]
        public IList<EducationOrganization.EducationOrganizationCategory> EducationOrganizationCategories 
        {
            get { return _educationOrganizationCategories; }
            set 
            {
                _educationOrganizationCategories = value;
                _educationOrganizationCategoriesCovariant = new CovariantIListAdapter<IEducationOrganizationCategory, EducationOrganization.EducationOrganizationCategory>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationCategory> IEducationOrganization.EducationOrganizationCategories
        {
            get { return _educationOrganizationCategoriesCovariant; }
            set { EducationOrganizationCategories = new List<EducationOrganization.EducationOrganizationCategory>(value.Cast<EducationOrganization.EducationOrganizationCategory>()); }
        }
        private IList<EducationOrganization.EducationOrganizationIdentificationCode> _educationOrganizationIdentificationCodes;
        private IList<IEducationOrganizationIdentificationCode> _educationOrganizationIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes")]
        public IList<EducationOrganization.EducationOrganizationIdentificationCode> EducationOrganizationIdentificationCodes 
        {
            get { return _educationOrganizationIdentificationCodes; }
            set 
            {
                _educationOrganizationIdentificationCodes = value;
                _educationOrganizationIdentificationCodesCovariant = new CovariantIListAdapter<IEducationOrganizationIdentificationCode, EducationOrganization.EducationOrganizationIdentificationCode>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationIdentificationCode> IEducationOrganization.EducationOrganizationIdentificationCodes
        {
            get { return _educationOrganizationIdentificationCodesCovariant; }
            set { EducationOrganizationIdentificationCodes = new List<EducationOrganization.EducationOrganizationIdentificationCode>(value.Cast<EducationOrganization.EducationOrganizationIdentificationCode>()); }
        }
        private IList<EducationOrganization.EducationOrganizationInstitutionTelephone> _educationOrganizationInstitutionTelephones;
        private IList<IEducationOrganizationInstitutionTelephone> _educationOrganizationInstitutionTelephonesCovariant;

        [DataMember(Name="institutionTelephones")]
        public IList<EducationOrganization.EducationOrganizationInstitutionTelephone> EducationOrganizationInstitutionTelephones 
        {
            get { return _educationOrganizationInstitutionTelephones; }
            set 
            {
                _educationOrganizationInstitutionTelephones = value;
                _educationOrganizationInstitutionTelephonesCovariant = new CovariantIListAdapter<IEducationOrganizationInstitutionTelephone, EducationOrganization.EducationOrganizationInstitutionTelephone>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationInstitutionTelephone> IEducationOrganization.EducationOrganizationInstitutionTelephones
        {
            get { return _educationOrganizationInstitutionTelephonesCovariant; }
            set { EducationOrganizationInstitutionTelephones = new List<EducationOrganization.EducationOrganizationInstitutionTelephone>(value.Cast<EducationOrganization.EducationOrganizationInstitutionTelephone>()); }
        }
        private IList<EducationOrganization.EducationOrganizationInternationalAddress> _educationOrganizationInternationalAddresses;
        private IList<IEducationOrganizationInternationalAddress> _educationOrganizationInternationalAddressesCovariant;

        [DataMember(Name="internationalAddresses")]
        public IList<EducationOrganization.EducationOrganizationInternationalAddress> EducationOrganizationInternationalAddresses 
        {
            get { return _educationOrganizationInternationalAddresses; }
            set 
            {
                _educationOrganizationInternationalAddresses = value;
                _educationOrganizationInternationalAddressesCovariant = new CovariantIListAdapter<IEducationOrganizationInternationalAddress, EducationOrganization.EducationOrganizationInternationalAddress>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationInternationalAddress> IEducationOrganization.EducationOrganizationInternationalAddresses
        {
            get { return _educationOrganizationInternationalAddressesCovariant; }
            set { EducationOrganizationInternationalAddresses = new List<EducationOrganization.EducationOrganizationInternationalAddress>(value.Cast<EducationOrganization.EducationOrganizationInternationalAddress>()); }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            // _educationOrganizationAddresses
            // _educationOrganizationCategories
            // _educationOrganizationIdentificationCodes
            // _educationOrganizationInstitutionTelephones
            // _educationOrganizationInternationalAddresses
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEducationServiceCenter)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEducationServiceCenter) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEducationServiceCenterSynchronizationSourceSupport.IsEducationOrganizationAddressesSupported               { get { return true; } set { } }
 
        bool IEducationServiceCenterSynchronizationSourceSupport.IsEducationOrganizationCategoriesSupported              { get { return true; } set { } }
 
        bool IEducationServiceCenterSynchronizationSourceSupport.IsEducationOrganizationIdentificationCodesSupported     { get { return true; } set { } }
 
        bool IEducationServiceCenterSynchronizationSourceSupport.IsEducationOrganizationInstitutionTelephonesSupported   { get { return true; } set { } }
 
        bool IEducationServiceCenterSynchronizationSourceSupport.IsEducationOrganizationInternationalAddressesSupported  { get { return true; } set { } }
 
        bool IEducationServiceCenterSynchronizationSourceSupport.IsNameOfInstitutionSupported                            { get { return true; } set { } }
 
        bool IEducationServiceCenterSynchronizationSourceSupport.IsOperationalStatusTypeSupported                        { get { return true; } set { } }
 
        bool IEducationServiceCenterSynchronizationSourceSupport.IsShortNameOfInstitutionSupported                       { get { return true; } set { } }
 
        bool IEducationServiceCenterSynchronizationSourceSupport.IsStateEducationAgencyIdSupported                       { get { return true; } set { } }
 
        bool IEducationServiceCenterSynchronizationSourceSupport.IsStateOrganizationIdSupported                          { get { return true; } set { } }
 
        bool IEducationServiceCenterSynchronizationSourceSupport.IsWebSiteSupported                                      { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IEducationOrganizationAddress, bool> IEducationServiceCenterSynchronizationSourceSupport.IsEducationOrganizationAddressIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationCategory, bool> IEducationServiceCenterSynchronizationSourceSupport.IsEducationOrganizationCategoryIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationIdentificationCode, bool> IEducationServiceCenterSynchronizationSourceSupport.IsEducationOrganizationIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationInstitutionTelephone, bool> IEducationServiceCenterSynchronizationSourceSupport.IsEducationOrganizationInstitutionTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationInternationalAddress, bool> IEducationServiceCenterSynchronizationSourceSupport.IsEducationOrganizationInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
}
// Aggregate: ElectronicMailType

namespace EdFi.Ods.Api.Models.Resources.V2.ElectronicMailType
{
    /// <summary>
    /// A class which represents the edfi.ElectronicMailType table of the ElectronicMailType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ElectronicMailType : IElectronicMailType, IHasETag, IElectronicMailTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ElectronicMailType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for ElectronicMail
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="electronicMailTypeId"), NaturalKeyMember]
        public int ElectronicMailTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IElectronicMailType).ElectronicMailTypeId != null) 
                    hash = hash * 23 + (this as IElectronicMailType).ElectronicMailTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the ElectronicMail type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the ElectronicMail type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IElectronicMailType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IElectronicMailType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IElectronicMailTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IElectronicMailTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IElectronicMailTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: EmploymentStatusDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.EmploymentStatusDescriptor
{
    /// <summary>
    /// A class which represents the edfi.EmploymentStatusDescriptor table of the EmploymentStatusDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EmploymentStatusDescriptor : IEmploymentStatusDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IEmploymentStatusDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the EmploymentStatusDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="employmentStatusDescriptorId"), NaturalKeyMember]
        public int EmploymentStatusDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EmploymentStatusDescriptorId; }
            set { EmploymentStatusDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IEmploymentStatusDescriptor).EmploymentStatusDescriptorId != null) 
                    hash = hash * 23 + (this as IEmploymentStatusDescriptor).EmploymentStatusDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="employmentStatusType")]
        public string EmploymentStatusType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEmploymentStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEmploymentStatusDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEmploymentStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported             { get { return true; } set { } }
 
        bool IEmploymentStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported           { get { return true; } set { } }
 
        bool IEmploymentStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported    { get { return true; } set { } }
 
        bool IEmploymentStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported      { get { return true; } set { } }
 
        bool IEmploymentStatusDescriptorSynchronizationSourceSupport.IsEmploymentStatusTypeSupported  { get { return true; } set { } }
 
        bool IEmploymentStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported             { get { return true; } set { } }
 
        bool IEmploymentStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported     { get { return true; } set { } }
 
        bool IEmploymentStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported      { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: EmploymentStatusType

namespace EdFi.Ods.Api.Models.Resources.V2.EmploymentStatusType
{
    /// <summary>
    /// A class which represents the edfi.EmploymentStatusType table of the EmploymentStatusType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EmploymentStatusType : IEmploymentStatusType, IHasETag, IEmploymentStatusTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the EmploymentStatusType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for EmploymentStatus
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="employmentStatusTypeId"), NaturalKeyMember]
        public int EmploymentStatusTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IEmploymentStatusType).EmploymentStatusTypeId != null) 
                    hash = hash * 23 + (this as IEmploymentStatusType).EmploymentStatusTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the EmploymentStatus type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the EmploymentStatus type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEmploymentStatusType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEmploymentStatusType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEmploymentStatusTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IEmploymentStatusTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IEmploymentStatusTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: EntryGradeLevelReasonType

namespace EdFi.Ods.Api.Models.Resources.V2.EntryGradeLevelReasonType
{
    /// <summary>
    /// A class which represents the edfi.EntryGradeLevelReasonType table of the EntryGradeLevelReasonType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EntryGradeLevelReasonType : IEntryGradeLevelReasonType, IHasETag, IEntryGradeLevelReasonTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the EntryGradeLevelReasonType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for EntryGradeLevelReason
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="entryGradeLevelReasonTypeId"), NaturalKeyMember]
        public int EntryGradeLevelReasonTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IEntryGradeLevelReasonType).EntryGradeLevelReasonTypeId != null) 
                    hash = hash * 23 + (this as IEntryGradeLevelReasonType).EntryGradeLevelReasonTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the EntryGradeLevelReason type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the EntryGradeLevelReason type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEntryGradeLevelReasonType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEntryGradeLevelReasonType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEntryGradeLevelReasonTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IEntryGradeLevelReasonTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IEntryGradeLevelReasonTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: EntryType

namespace EdFi.Ods.Api.Models.Resources.V2.EntryType
{
    /// <summary>
    /// A class which represents the edfi.EntryType table of the EntryType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EntryType : IEntryType, IHasETag, IEntryTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the EntryType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Entry
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="entryTypeId"), NaturalKeyMember]
        public int EntryTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IEntryType).EntryTypeId != null) 
                    hash = hash * 23 + (this as IEntryType).EntryTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Entry type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Entry type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEntryType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEntryType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEntryTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IEntryTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IEntryTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: EntryTypeDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.EntryTypeDescriptor
{
    /// <summary>
    /// A class which represents the edfi.EntryTypeDescriptor table of the EntryTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EntryTypeDescriptor : IEntryTypeDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IEntryTypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the EntryTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="entryTypeDescriptorId"), NaturalKeyMember]
        public int EntryTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EntryTypeDescriptorId; }
            set { EntryTypeDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IEntryTypeDescriptor).EntryTypeDescriptorId != null) 
                    hash = hash * 23 + (this as IEntryTypeDescriptor).EntryTypeDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="entryType")]
        public string EntryType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEntryTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEntryTypeDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEntryTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
 
        bool IEntryTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
 
        bool IEntryTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
 
        bool IEntryTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
 
        bool IEntryTypeDescriptorSynchronizationSourceSupport.IsEntryTypeSupported           { get { return true; } set { } }
 
        bool IEntryTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
 
        bool IEntryTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
 
        bool IEntryTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: EventCircumstanceType

namespace EdFi.Ods.Api.Models.Resources.V2.EventCircumstanceType
{
    /// <summary>
    /// A class which represents the edfi.EventCircumstanceType table of the EventCircumstanceType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class EventCircumstanceType : IEventCircumstanceType, IHasETag, IEventCircumstanceTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the EventCircumstanceType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for EventCircumstance
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eventCircumstanceTypeId"), NaturalKeyMember]
        public int EventCircumstanceTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IEventCircumstanceType).EventCircumstanceTypeId != null) 
                    hash = hash * 23 + (this as IEventCircumstanceType).EventCircumstanceTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the EventCircumstance type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the EventCircumstance type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IEventCircumstanceType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IEventCircumstanceType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IEventCircumstanceTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IEventCircumstanceTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IEventCircumstanceTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ExitWithdrawType

namespace EdFi.Ods.Api.Models.Resources.V2.ExitWithdrawType
{
    /// <summary>
    /// A class which represents the edfi.ExitWithdrawType table of the ExitWithdrawType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ExitWithdrawType : IExitWithdrawType, IHasETag, IExitWithdrawTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ExitWithdrawType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for ExitWithdraw
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="exitWithdrawTypeId"), NaturalKeyMember]
        public int ExitWithdrawTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IExitWithdrawType).ExitWithdrawTypeId != null) 
                    hash = hash * 23 + (this as IExitWithdrawType).ExitWithdrawTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the ExitWithdraw type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the ExitWithdraw type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IExitWithdrawType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IExitWithdrawType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IExitWithdrawTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IExitWithdrawTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IExitWithdrawTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ExitWithdrawTypeDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.ExitWithdrawTypeDescriptor
{
    /// <summary>
    /// A class which represents the edfi.ExitWithdrawTypeDescriptor table of the ExitWithdrawTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ExitWithdrawTypeDescriptor : IExitWithdrawTypeDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IExitWithdrawTypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ExitWithdrawTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="exitWithdrawTypeDescriptorId"), NaturalKeyMember]
        public int ExitWithdrawTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return ExitWithdrawTypeDescriptorId; }
            set { ExitWithdrawTypeDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IExitWithdrawTypeDescriptor).ExitWithdrawTypeDescriptorId != null) 
                    hash = hash * 23 + (this as IExitWithdrawTypeDescriptor).ExitWithdrawTypeDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="exitWithdrawType")]
        public string ExitWithdrawType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IExitWithdrawTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IExitWithdrawTypeDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IExitWithdrawTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
 
        bool IExitWithdrawTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
 
        bool IExitWithdrawTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
 
        bool IExitWithdrawTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
 
        bool IExitWithdrawTypeDescriptorSynchronizationSourceSupport.IsExitWithdrawTypeSupported    { get { return true; } set { } }
 
        bool IExitWithdrawTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
 
        bool IExitWithdrawTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
 
        bool IExitWithdrawTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: FeederSchoolAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.FeederSchoolAssociation
{
    /// <summary>
    /// Represents a reference to the FeederSchoolAssociation resource.
    /// </summary>
    [DataContract]
    public class FeederSchoolAssociationReference
    {
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="feederSchoolId"), NaturalKeyMember]
        public int FeederSchoolId { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "FeederSchoolAssociation",
                            Href = "/feederSchoolAssociations"
                                    + "?beginDate=" + JsonConvert.SerializeObject(BeginDate).Replace("\"", string.Empty)            
                                    + "&feederSchoolId=" + FeederSchoolId            
                                    + "&schoolId=" + SchoolId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime)
                && FeederSchoolId != default(int)
                && SchoolId != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.FeederSchoolAssociation table of the FeederSchoolAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class FeederSchoolAssociation : IFeederSchoolAssociation, IHasETag, IFeederSchoolAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the FeederSchoolAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _feederSchoolReferenceExplicitlyAssigned;
        private School.SchoolReference _feederSchoolReference;
        private School.SchoolReference ImplicitFeederSchoolReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_feederSchoolReference == null && !_feederSchoolReferenceExplicitlyAssigned)
                    _feederSchoolReference = new School.SchoolReference();

                return _feederSchoolReference;
            }
        }

        [DataMember(Name="feederSchoolReference")][NaturalKeyMember]
        public School.SchoolReference FeederSchoolReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitFeederSchoolReference != null
                    && (_feederSchoolReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitFeederSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitFeederSchoolReference;

                return null;
            }
            set 
            { 
                _feederSchoolReferenceExplicitlyAssigned = true;
                _feederSchoolReference = value;
            }
        }
        private bool _schoolReferenceExplicitlyAssigned;
        private School.SchoolReference _schoolReference;
        private School.SchoolReference ImplicitSchoolReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolReference == null && !_schoolReferenceExplicitlyAssigned)
                    _schoolReference = new School.SchoolReference();

                return _schoolReference;
            }
        }

        [DataMember(Name="schoolReference")][NaturalKeyMember]
        public School.SchoolReference SchoolReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolReference != null
                    && (_schoolReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference;

                return null;
            }
            set 
            { 
                _schoolReferenceExplicitlyAssigned = true;
                _schoolReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year of the first day of the feeder school association.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IFeederSchoolAssociation.FeederSchoolId
        {
            get
            {
                if (ImplicitFeederSchoolReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitFeederSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitFeederSchoolReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // FeederSchool
                _feederSchoolReferenceExplicitlyAssigned = false;
                ImplicitFeederSchoolReference.SchoolId = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IFeederSchoolAssociation.SchoolId
        {
            get
            {
                if (ImplicitSchoolReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // School
                _schoolReferenceExplicitlyAssigned = false;
                ImplicitSchoolReference.SchoolId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IFeederSchoolAssociation).BeginDate != null) 
                    hash = hash * 23 + (this as IFeederSchoolAssociation).BeginDate.GetHashCode();
 
                //Referenced Property
                if ((this as IFeederSchoolAssociation).FeederSchoolId != null) 
                    hash = hash * 23 + (this as IFeederSchoolAssociation).FeederSchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as IFeederSchoolAssociation).SchoolId != null) 
                    hash = hash * 23 + (this as IFeederSchoolAssociation).SchoolId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year of the last day of the feeder school association.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Describes the relationship from the feeder school to the receiving school, for example by program emphasis, such as special education, language immersion, science, or performing art.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="feederRelationshipDescription")]
        public string FeederRelationshipDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IFeederSchoolAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IFeederSchoolAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IFeederSchoolAssociationSynchronizationSourceSupport.IsEndDateSupported                        { get { return true; } set { } }
 
        bool IFeederSchoolAssociationSynchronizationSourceSupport.IsFeederRelationshipDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: Grade

namespace EdFi.Ods.Api.Models.Resources.V2.Grade
{
    /// <summary>
    /// Represents a reference to the Grade resource.
    /// </summary>
    [DataContract]
    public class GradeReference
    {
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="classPeriodName"), NaturalKeyMember]
        public string ClassPeriodName { get; set; }

        [DataMember(Name="classroomIdentificationCode"), NaturalKeyMember]
        public string ClassroomIdentificationCode { get; set; }

        [DataMember(Name="type"), NaturalKeyMember]
        public string GradeType { get; set; }

        [DataMember(Name="gradingPeriodBeginDate"), NaturalKeyMember]
        public DateTime GradingPeriodBeginDate { get; set; }

        [DataMember(Name="gradingPeriodDescriptor"), NaturalKeyMember]
        public string GradingPeriodDescriptor { get; set; }

        [DataMember(Name="localCourseCode"), NaturalKeyMember]
        public string LocalCourseCode { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sequenceOfCourse"), NaturalKeyMember]
        public int SequenceOfCourse { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        [DataMember(Name="uniqueSectionCode"), NaturalKeyMember]
        public string UniqueSectionCode { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "Grade",
                            Href = "/grades"
                                    + "?beginDate=" + JsonConvert.SerializeObject(BeginDate).Replace("\"", string.Empty)            
                                    + "&classPeriodName=" + WebUtility.UrlEncode(ClassPeriodName)            
                                    + "&classroomIdentificationCode=" + WebUtility.UrlEncode(ClassroomIdentificationCode)            
                                    + "&type=" + WebUtility.UrlEncode(GradeType)            
                                    + "&gradingPeriodBeginDate=" + JsonConvert.SerializeObject(GradingPeriodBeginDate).Replace("\"", string.Empty)            
                                    + "&gradingPeriodDescriptor=" + WebUtility.UrlEncode(GradingPeriodDescriptor)            
                                    + "&localCourseCode=" + WebUtility.UrlEncode(LocalCourseCode)            
                                    + "&schoolId=" + SchoolId            
                                    + "&schoolYear=" + SchoolYear            
                                    + "&sequenceOfCourse=" + SequenceOfCourse            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                                    + "&termDescriptor=" + WebUtility.UrlEncode(TermDescriptor)            
                                    + "&uniqueSectionCode=" + WebUtility.UrlEncode(UniqueSectionCode)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime)
                && ClassPeriodName != default(string)
                && ClassroomIdentificationCode != default(string)
                && GradeType != default(string)
                && GradingPeriodBeginDate != default(DateTime)
                && GradingPeriodDescriptor != default(string)
                && LocalCourseCode != default(string)
                && SchoolId != default(int)
                && SchoolYear != default(short)
                && SequenceOfCourse != default(int)
                && StudentUniqueId != default(string)
                && TermDescriptor != default(string)
                && UniqueSectionCode != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Grade table of the Grade aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class Grade : IGrade, IHasETag, IGradeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the Grade resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _gradingPeriodReferenceExplicitlyAssigned;
        private GradingPeriod.GradingPeriodReference _gradingPeriodReference;
        private GradingPeriod.GradingPeriodReference ImplicitGradingPeriodReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_gradingPeriodReference == null && !_gradingPeriodReferenceExplicitlyAssigned)
                    _gradingPeriodReference = new GradingPeriod.GradingPeriodReference();

                return _gradingPeriodReference;
            }
        }

        [DataMember(Name="gradingPeriodReference")][NaturalKeyMember]
        public GradingPeriod.GradingPeriodReference GradingPeriodReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitGradingPeriodReference != null
                    && (_gradingPeriodReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference;

                return null;
            }
            set 
            { 
                _gradingPeriodReferenceExplicitlyAssigned = true;
                _gradingPeriodReference = value;
            }
        }
        private bool _studentSectionAssociationReferenceExplicitlyAssigned;
        private StudentSectionAssociation.StudentSectionAssociationReference _studentSectionAssociationReference;
        private StudentSectionAssociation.StudentSectionAssociationReference ImplicitStudentSectionAssociationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentSectionAssociationReference == null && !_studentSectionAssociationReferenceExplicitlyAssigned)
                    _studentSectionAssociationReference = new StudentSectionAssociation.StudentSectionAssociationReference();

                return _studentSectionAssociationReference;
            }
        }

        [DataMember(Name="studentSectionAssociationReference")][NaturalKeyMember]
        public StudentSectionAssociation.StudentSectionAssociationReference StudentSectionAssociationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentSectionAssociationReference != null
                    && (_studentSectionAssociationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference;

                return null;
            }
            set 
            { 
                _studentSectionAssociationReferenceExplicitlyAssigned = true;
                _studentSectionAssociationReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Month, day, and year of the Student's entry or assignment to the Section.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime IGrade.BeginDate
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.BeginDate;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.BeginDate = value;
            }
        }

        /// <summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IGrade.ClassPeriodName
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.ClassPeriodName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.ClassPeriodName = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IGrade.ClassroomIdentificationCode
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.ClassroomIdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.ClassroomIdentificationCode = value;
            }
        }

        /// <summary>
        /// The type of grade reported (e.g., Exam, Final, Grading Period).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="type"), NaturalKeyMember]
        public string GradeType { get; set; }

        /// <summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime IGrade.GradingPeriodBeginDate
        {
            get
            {
                if (ImplicitGradingPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference.BeginDate;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradingPeriod
                _gradingPeriodReferenceExplicitlyAssigned = false;
                ImplicitGradingPeriodReference.BeginDate = value;
            }
        }

        /// <summary>
        /// The name of the period for which grades are reported.
        /// </summary>

        // IS in a reference (Grade.GradingPeriodDescriptorId), IS a lookup column 
        string IGrade.GradingPeriodDescriptor
        {
            get
            {
                if (ImplicitGradingPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference.GradingPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitGradingPeriodReference.GradingPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IGrade.LocalCourseCode
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.LocalCourseCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.LocalCourseCode = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IGrade.SchoolId
        {
            get
            {
                if (ImplicitGradingPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradingPeriod
                _gradingPeriodReferenceExplicitlyAssigned = false;
                ImplicitGradingPeriodReference.SchoolId = value;

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.SchoolId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short IGrade.SchoolYear
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IGrade.SequenceOfCourse
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.SequenceOfCourse;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.SequenceOfCourse = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IGrade.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// The term for the Session during the school year.
        /// </summary>

        // IS in a reference (Grade.TermDescriptorId), IS a lookup column 
        string IGrade.TermDescriptor
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitStudentSectionAssociationReference.TermDescriptor = value;
            }
        }

        /// <summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IGrade.UniqueSectionCode
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.UniqueSectionCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.UniqueSectionCode = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IGrade).BeginDate != null) 
                    hash = hash * 23 + (this as IGrade).BeginDate.GetHashCode();
 
                //Referenced Property
                if ((this as IGrade).ClassPeriodName != null) 
                    hash = hash * 23 + (this as IGrade).ClassPeriodName.GetHashCode();
 
                //Referenced Property
                if ((this as IGrade).ClassroomIdentificationCode != null) 
                    hash = hash * 23 + (this as IGrade).ClassroomIdentificationCode.GetHashCode();
 
                // Standard Property
                if ((this as IGrade).GradeType != null) 
                    hash = hash * 23 + (this as IGrade).GradeType.GetHashCode();
 
                //Referenced Property
                if ((this as IGrade).GradingPeriodBeginDate != null) 
                    hash = hash * 23 + (this as IGrade).GradingPeriodBeginDate.GetHashCode();
 
                //Unified Type Property
                if ((this as IGrade).GradingPeriodDescriptor != null) 
                    hash = hash * 23 + (this as IGrade).GradingPeriodDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IGrade).LocalCourseCode != null) 
                    hash = hash * 23 + (this as IGrade).LocalCourseCode.GetHashCode();
 
                //Referenced Property
                if ((this as IGrade).SchoolId != null) 
                    hash = hash * 23 + (this as IGrade).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as IGrade).SchoolYear != null) 
                    hash = hash * 23 + (this as IGrade).SchoolYear.GetHashCode();
 
                //Referenced Property
                if ((this as IGrade).SequenceOfCourse != null) 
                    hash = hash * 23 + (this as IGrade).SequenceOfCourse.GetHashCode();
 
                //Referenced Property
                if ((this as IGrade).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IGrade).StudentUniqueId.GetHashCode();
 
                //Unified Type Property
                if ((this as IGrade).TermDescriptor != null) 
                    hash = hash * 23 + (this as IGrade).TermDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IGrade).UniqueSectionCode != null) 
                    hash = hash * 23 + (this as IGrade).UniqueSectionCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="diagnosticStatement")]
        public string DiagnosticStatement { get; set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="letterGradeEarned")]
        public string LetterGradeEarned { get; set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="numericGradeEarned")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? NumericGradeEarned { get; set; }

        /// <summary>
        /// A conversion of the level to a standard set of performance levels.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="performanceBaseConversionType")]
        public string PerformanceBaseConversionType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGrade)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGrade) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IGradeSynchronizationSourceSupport.IsDiagnosticStatementSupported            { get { return true; } set { } }
 
        bool IGradeSynchronizationSourceSupport.IsLetterGradeEarnedSupported              { get { return true; } set { } }
 
        bool IGradeSynchronizationSourceSupport.IsNumericGradeEarnedSupported             { get { return true; } set { } }
 
        bool IGradeSynchronizationSourceSupport.IsPerformanceBaseConversionTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: GradebookEntry

namespace EdFi.Ods.Api.Models.Resources.V2.GradebookEntry
{
    /// <summary>
    /// Represents a reference to the GradebookEntry resource.
    /// </summary>
    [DataContract]
    public class GradebookEntryReference
    {
        [DataMember(Name="classPeriodName"), NaturalKeyMember]
        public string ClassPeriodName { get; set; }

        [DataMember(Name="classroomIdentificationCode"), NaturalKeyMember]
        public string ClassroomIdentificationCode { get; set; }

        [DataMember(Name="dateAssigned"), NaturalKeyMember]
        public DateTime DateAssigned { get; set; }

        [DataMember(Name="title"), NaturalKeyMember]
        public string GradebookEntryTitle { get; set; }

        [DataMember(Name="localCourseCode"), NaturalKeyMember]
        public string LocalCourseCode { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sequenceOfCourse"), NaturalKeyMember]
        public int SequenceOfCourse { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        [DataMember(Name="uniqueSectionCode"), NaturalKeyMember]
        public string UniqueSectionCode { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "GradebookEntry",
                            Href = "/gradebookEntries"
                                    + "?classPeriodName=" + WebUtility.UrlEncode(ClassPeriodName)            
                                    + "&classroomIdentificationCode=" + WebUtility.UrlEncode(ClassroomIdentificationCode)            
                                    + "&dateAssigned=" + JsonConvert.SerializeObject(DateAssigned).Replace("\"", string.Empty)            
                                    + "&title=" + WebUtility.UrlEncode(GradebookEntryTitle)            
                                    + "&localCourseCode=" + WebUtility.UrlEncode(LocalCourseCode)            
                                    + "&schoolId=" + SchoolId            
                                    + "&schoolYear=" + SchoolYear            
                                    + "&sequenceOfCourse=" + SequenceOfCourse            
                                    + "&termDescriptor=" + WebUtility.UrlEncode(TermDescriptor)            
                                    + "&uniqueSectionCode=" + WebUtility.UrlEncode(UniqueSectionCode)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ClassPeriodName != default(string)
                && ClassroomIdentificationCode != default(string)
                && DateAssigned != default(DateTime)
                && GradebookEntryTitle != default(string)
                && LocalCourseCode != default(string)
                && SchoolId != default(int)
                && SchoolYear != default(short)
                && SequenceOfCourse != default(int)
                && TermDescriptor != default(string)
                && UniqueSectionCode != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.GradebookEntry table of the GradebookEntry aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GradebookEntry : IGradebookEntry, IHasETag, IGradebookEntrySynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public GradebookEntry()
        {
            GradebookEntryLearningObjectives = new List<GradebookEntryLearningObjective>();
            GradebookEntryLearningStandards = new List<GradebookEntryLearningStandard>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the GradebookEntry resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _gradingPeriodReferenceExplicitlyAssigned;
        private GradingPeriod.GradingPeriodReference _gradingPeriodReference;
        private GradingPeriod.GradingPeriodReference ImplicitGradingPeriodReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_gradingPeriodReference == null && !_gradingPeriodReferenceExplicitlyAssigned)
                    _gradingPeriodReference = new GradingPeriod.GradingPeriodReference();

                return _gradingPeriodReference;
            }
        }

        [DataMember(Name="gradingPeriodReference")]
        public GradingPeriod.GradingPeriodReference GradingPeriodReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitGradingPeriodReference != null
                    && (_gradingPeriodReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference;

                return null;
            }
            set 
            { 
                _gradingPeriodReferenceExplicitlyAssigned = true;
                _gradingPeriodReference = value;
            }
        }
        private bool _sectionReferenceExplicitlyAssigned;
        private Section.SectionReference _sectionReference;
        private Section.SectionReference ImplicitSectionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_sectionReference == null && !_sectionReferenceExplicitlyAssigned)
                    _sectionReference = new Section.SectionReference();

                return _sectionReference;
            }
        }

        [DataMember(Name="sectionReference")][NaturalKeyMember]
        public Section.SectionReference SectionReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSectionReference != null
                    && (_sectionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference;

                return null;
            }
            set 
            { 
                _sectionReferenceExplicitlyAssigned = true;
                _sectionReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IGradebookEntry.ClassPeriodName
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.ClassPeriodName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.ClassPeriodName = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IGradebookEntry.ClassroomIdentificationCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.ClassroomIdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.ClassroomIdentificationCode = value;
            }
        }

        /// <summary>
        /// The date the assignment, homework, or assessment was assigned or executed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="dateAssigned"), NaturalKeyMember]
        public DateTime DateAssigned { get; set; }

        /// <summary>
        /// The name or title of the activity to be recorded in the GradebookEntry.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="title"), NaturalKeyMember]
        public string GradebookEntryTitle { get; set; }

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IGradebookEntry.LocalCourseCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.LocalCourseCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.LocalCourseCode = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IGradebookEntry.SchoolId
        {
            get
            {
                if (ImplicitGradingPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradingPeriod
                _gradingPeriodReferenceExplicitlyAssigned = false;
                ImplicitGradingPeriodReference.SchoolId = value;

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short IGradebookEntry.SchoolYear
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IGradebookEntry.SequenceOfCourse
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SequenceOfCourse;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SequenceOfCourse = value;
            }
        }

        /// <summary>
        /// The term for the Session during the school year.
        /// </summary>

        // IS in a reference (GradebookEntry.TermDescriptorId), IS a lookup column 
        string IGradebookEntry.TermDescriptor
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitSectionReference.TermDescriptor = value;
            }
        }

        /// <summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IGradebookEntry.UniqueSectionCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.UniqueSectionCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.UniqueSectionCode = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IGradebookEntry).ClassPeriodName != null) 
                    hash = hash * 23 + (this as IGradebookEntry).ClassPeriodName.GetHashCode();
 
                //Referenced Property
                if ((this as IGradebookEntry).ClassroomIdentificationCode != null) 
                    hash = hash * 23 + (this as IGradebookEntry).ClassroomIdentificationCode.GetHashCode();
 
                // Standard Property
                if ((this as IGradebookEntry).DateAssigned != null) 
                    hash = hash * 23 + (this as IGradebookEntry).DateAssigned.GetHashCode();
 
                // Standard Property
                if ((this as IGradebookEntry).GradebookEntryTitle != null) 
                    hash = hash * 23 + (this as IGradebookEntry).GradebookEntryTitle.GetHashCode();
 
                //Referenced Property
                if ((this as IGradebookEntry).LocalCourseCode != null) 
                    hash = hash * 23 + (this as IGradebookEntry).LocalCourseCode.GetHashCode();
 
                //Referenced Property
                if ((this as IGradebookEntry).SchoolId != null) 
                    hash = hash * 23 + (this as IGradebookEntry).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as IGradebookEntry).SchoolYear != null) 
                    hash = hash * 23 + (this as IGradebookEntry).SchoolYear.GetHashCode();
 
                //Referenced Property
                if ((this as IGradebookEntry).SequenceOfCourse != null) 
                    hash = hash * 23 + (this as IGradebookEntry).SequenceOfCourse.GetHashCode();
 
                //Unified Type Property
                if ((this as IGradebookEntry).TermDescriptor != null) 
                    hash = hash * 23 + (this as IGradebookEntry).TermDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IGradebookEntry).UniqueSectionCode != null) 
                    hash = hash * 23 + (this as IGradebookEntry).UniqueSectionCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime? IGradebookEntry.BeginDate
        {
            get
            {
                if (ImplicitGradingPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference.BeginDate;

                return default(DateTime?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradingPeriod
                _gradingPeriodReferenceExplicitlyAssigned = false;
                ImplicitGradingPeriodReference.BeginDate = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// A description of the assignment, homework, or classroom assessment.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The type of the GradebookEntry; for example, homework, assignment, quiz, unit test, oral presentation, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="type")]
        public string GradebookEntryType { get; set; }

        /// <summary>
        /// The name of the period for which grades are reported.
        /// </summary>

        // IS in a reference (GradebookEntry.GradingPeriodDescriptorId), IS a lookup column 
        string IGradebookEntry.GradingPeriodDescriptor
        {
            get
            {
                if (ImplicitGradingPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference.GradingPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitGradingPeriodReference.GradingPeriodDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<GradebookEntryLearningObjective> _gradebookEntryLearningObjectives;
        private IList<IGradebookEntryLearningObjective> _gradebookEntryLearningObjectivesCovariant;

        [DataMember(Name="learningObjectives")]
        public IList<GradebookEntryLearningObjective> GradebookEntryLearningObjectives 
        { 
            get { return _gradebookEntryLearningObjectives; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<GradebookEntryLearningObjective>(value,
                    (s, e) => ((IGradebookEntryLearningObjective)e.Item).GradebookEntry = this);
                _gradebookEntryLearningObjectives = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IGradebookEntryLearningObjective, GradebookEntryLearningObjective>(value);
                covariantList.ItemAdded += (s, e) => ((IGradebookEntryLearningObjective)e.Item).GradebookEntry = this;
                _gradebookEntryLearningObjectivesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IGradebookEntryLearningObjective> IGradebookEntry.GradebookEntryLearningObjectives
        {
            get { return _gradebookEntryLearningObjectivesCovariant; }
            set { GradebookEntryLearningObjectives = new List<GradebookEntryLearningObjective>(value.Cast<GradebookEntryLearningObjective>()); }
        }

        private IList<GradebookEntryLearningStandard> _gradebookEntryLearningStandards;
        private IList<IGradebookEntryLearningStandard> _gradebookEntryLearningStandardsCovariant;

        [DataMember(Name="learningStandards")]
        public IList<GradebookEntryLearningStandard> GradebookEntryLearningStandards 
        { 
            get { return _gradebookEntryLearningStandards; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<GradebookEntryLearningStandard>(value,
                    (s, e) => ((IGradebookEntryLearningStandard)e.Item).GradebookEntry = this);
                _gradebookEntryLearningStandards = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IGradebookEntryLearningStandard, GradebookEntryLearningStandard>(value);
                covariantList.ItemAdded += (s, e) => ((IGradebookEntryLearningStandard)e.Item).GradebookEntry = this;
                _gradebookEntryLearningStandardsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IGradebookEntryLearningStandard> IGradebookEntry.GradebookEntryLearningStandards
        {
            get { return _gradebookEntryLearningStandardsCovariant; }
            set { GradebookEntryLearningStandards = new List<GradebookEntryLearningStandard>(value.Cast<GradebookEntryLearningStandard>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_gradebookEntryLearningObjectives != null) foreach (var item in _gradebookEntryLearningObjectives)
            {
                item.GradebookEntry = this;
            }
            
            if (_gradebookEntryLearningStandards != null) foreach (var item in _gradebookEntryLearningStandards)
            {
                item.GradebookEntry = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGradebookEntry)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGradebookEntry) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IGradebookEntrySynchronizationSourceSupport.IsBeginDateSupported                         { get { return true; } set { } }
 
        bool IGradebookEntrySynchronizationSourceSupport.IsDescriptionSupported                       { get { return true; } set { } }
 
        bool IGradebookEntrySynchronizationSourceSupport.IsGradebookEntryLearningObjectivesSupported  { get { return true; } set { } }
 
        bool IGradebookEntrySynchronizationSourceSupport.IsGradebookEntryLearningStandardsSupported   { get { return true; } set { } }
 
        bool IGradebookEntrySynchronizationSourceSupport.IsGradebookEntryTypeSupported                { get { return true; } set { } }
 
        bool IGradebookEntrySynchronizationSourceSupport.IsGradingPeriodDescriptorSupported           { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IGradebookEntryLearningObjective, bool> IGradebookEntrySynchronizationSourceSupport.IsGradebookEntryLearningObjectiveIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IGradebookEntryLearningStandard, bool> IGradebookEntrySynchronizationSourceSupport.IsGradebookEntryLearningStandardIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.GradebookEntryLearningObjective table of the GradebookEntry aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GradebookEntryLearningObjective : IGradebookEntryLearningObjective, IGradebookEntryLearningObjectiveSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _learningObjectiveReferenceExplicitlyAssigned;
        private LearningObjective.LearningObjectiveReference _learningObjectiveReference;
        private LearningObjective.LearningObjectiveReference ImplicitLearningObjectiveReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_learningObjectiveReference == null && !_learningObjectiveReferenceExplicitlyAssigned)
                    _learningObjectiveReference = new LearningObjective.LearningObjectiveReference();

                return _learningObjectiveReference;
            }
        }

        [DataMember(Name="learningObjectiveReference")][NaturalKeyMember]
        public LearningObjective.LearningObjectiveReference LearningObjectiveReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitLearningObjectiveReference != null
                    && (_learningObjectiveReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitLearningObjectiveReference;

                return null;
            }
            set 
            { 
                _learningObjectiveReferenceExplicitlyAssigned = true;
                _learningObjectiveReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IGradebookEntry _gradebookEntry;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IGradebookEntry IGradebookEntryLearningObjective.GradebookEntry
        {
            get { return _gradebookEntry; }
            set { _gradebookEntry = value; }
        }

        internal IGradebookEntry GradebookEntry
        {
            set { _gradebookEntry = value; }
        }

        /// <summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IGradebookEntryLearningObjective.LearningObjectiveId
        {
            get
            {
                if (ImplicitLearningObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitLearningObjectiveReference.LearningObjectiveId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // LearningObjective
                _learningObjectiveReferenceExplicitlyAssigned = false;
                ImplicitLearningObjectiveReference.LearningObjectiveId = value;
            }
        }

        /// <summary>
        /// Namespace for the LearningObjective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IGradebookEntryLearningObjective.Namespace
        {
            get
            {
                if (ImplicitLearningObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitLearningObjectiveReference.Namespace;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // LearningObjective
                _learningObjectiveReferenceExplicitlyAssigned = false;
                ImplicitLearningObjectiveReference.Namespace = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_gradebookEntry != null) 
                    hash = hash * 23 + _gradebookEntry.GetHashCode();
 
                //Referenced Property
                if ((this as IGradebookEntryLearningObjective).LearningObjectiveId != null) 
                    hash = hash * 23 + (this as IGradebookEntryLearningObjective).LearningObjectiveId.GetHashCode();
 
                //Referenced Property
                if ((this as IGradebookEntryLearningObjective).Namespace != null) 
                    hash = hash * 23 + (this as IGradebookEntryLearningObjective).Namespace.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGradebookEntryLearningObjective)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGradebookEntryLearningObjective) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.GradebookEntryLearningStandard table of the GradebookEntry aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GradebookEntryLearningStandard : IGradebookEntryLearningStandard, IGradebookEntryLearningStandardSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _learningStandardReferenceExplicitlyAssigned;
        private LearningStandard.LearningStandardReference _learningStandardReference;
        private LearningStandard.LearningStandardReference ImplicitLearningStandardReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_learningStandardReference == null && !_learningStandardReferenceExplicitlyAssigned)
                    _learningStandardReference = new LearningStandard.LearningStandardReference();

                return _learningStandardReference;
            }
        }

        [DataMember(Name="learningStandardReference")][NaturalKeyMember]
        public LearningStandard.LearningStandardReference LearningStandardReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitLearningStandardReference != null
                    && (_learningStandardReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitLearningStandardReference.IsReferenceFullyDefined()))
                    return ImplicitLearningStandardReference;

                return null;
            }
            set 
            { 
                _learningStandardReferenceExplicitlyAssigned = true;
                _learningStandardReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IGradebookEntry _gradebookEntry;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IGradebookEntry IGradebookEntryLearningStandard.GradebookEntry
        {
            get { return _gradebookEntry; }
            set { _gradebookEntry = value; }
        }

        internal IGradebookEntry GradebookEntry
        {
            set { _gradebookEntry = value; }
        }

        /// <summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IGradebookEntryLearningStandard.LearningStandardId
        {
            get
            {
                if (ImplicitLearningStandardReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitLearningStandardReference.IsReferenceFullyDefined()))
                    return ImplicitLearningStandardReference.LearningStandardId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // LearningStandard
                _learningStandardReferenceExplicitlyAssigned = false;
                ImplicitLearningStandardReference.LearningStandardId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_gradebookEntry != null) 
                    hash = hash * 23 + _gradebookEntry.GetHashCode();
 
                //Referenced Property
                if ((this as IGradebookEntryLearningStandard).LearningStandardId != null) 
                    hash = hash * 23 + (this as IGradebookEntryLearningStandard).LearningStandardId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGradebookEntryLearningStandard)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGradebookEntryLearningStandard) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: GradebookEntryType

namespace EdFi.Ods.Api.Models.Resources.V2.GradebookEntryType
{
    /// <summary>
    /// A class which represents the edfi.GradebookEntryType table of the GradebookEntryType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GradebookEntryType : IGradebookEntryType, IHasETag, IGradebookEntryTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the GradebookEntryType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for GradebookEntry
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="gradebookEntryTypeId"), NaturalKeyMember]
        public int GradebookEntryTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IGradebookEntryType).GradebookEntryTypeId != null) 
                    hash = hash * 23 + (this as IGradebookEntryType).GradebookEntryTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the GradebookEntry type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the GradebookEntry type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGradebookEntryType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGradebookEntryType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IGradebookEntryTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IGradebookEntryTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IGradebookEntryTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: GradeLevelDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.GradeLevelDescriptor
{
    /// <summary>
    /// A class which represents the edfi.GradeLevelDescriptor table of the GradeLevelDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GradeLevelDescriptor : IGradeLevelDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IGradeLevelDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the GradeLevelDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="gradeLevelDescriptorId"), NaturalKeyMember]
        public int GradeLevelDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return GradeLevelDescriptorId; }
            set { GradeLevelDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IGradeLevelDescriptor).GradeLevelDescriptorId != null) 
                    hash = hash * 23 + (this as IGradeLevelDescriptor).GradeLevelDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelType")]
        public string GradeLevelType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGradeLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGradeLevelDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IGradeLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
 
        bool IGradeLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
 
        bool IGradeLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
 
        bool IGradeLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
 
        bool IGradeLevelDescriptorSynchronizationSourceSupport.IsGradeLevelTypeSupported      { get { return true; } set { } }
 
        bool IGradeLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
 
        bool IGradeLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
 
        bool IGradeLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: GradeLevelType

namespace EdFi.Ods.Api.Models.Resources.V2.GradeLevelType
{
    /// <summary>
    /// A class which represents the edfi.GradeLevelType table of the GradeLevelType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GradeLevelType : IGradeLevelType, IHasETag, IGradeLevelTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the GradeLevelType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for GradeLevel
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="gradeLevelTypeId"), NaturalKeyMember]
        public int GradeLevelTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IGradeLevelType).GradeLevelTypeId != null) 
                    hash = hash * 23 + (this as IGradeLevelType).GradeLevelTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the GradeLevel type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the GradeLevel type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGradeLevelType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGradeLevelType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IGradeLevelTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IGradeLevelTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IGradeLevelTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: GradeType

namespace EdFi.Ods.Api.Models.Resources.V2.GradeType
{
    /// <summary>
    /// A class which represents the edfi.GradeType table of the GradeType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GradeType : IGradeType, IHasETag, IGradeTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the GradeType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Grade
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="gradeTypeId"), NaturalKeyMember]
        public int GradeTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IGradeType).GradeTypeId != null) 
                    hash = hash * 23 + (this as IGradeType).GradeTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Grade type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Grade type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGradeType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGradeType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IGradeTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IGradeTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IGradeTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: GradingPeriod

namespace EdFi.Ods.Api.Models.Resources.V2.GradingPeriod
{
    /// <summary>
    /// Represents a reference to the GradingPeriod resource.
    /// </summary>
    [DataContract]
    public class GradingPeriodReference
    {
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="descriptor"), NaturalKeyMember]
        public string GradingPeriodDescriptor { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "GradingPeriod",
                            Href = "/gradingPeriods"
                                    + "?beginDate=" + JsonConvert.SerializeObject(BeginDate).Replace("\"", string.Empty)            
                                    + "&descriptor=" + WebUtility.UrlEncode(GradingPeriodDescriptor)            
                                    + "&schoolId=" + SchoolId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime)
                && GradingPeriodDescriptor != default(string)
                && SchoolId != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.GradingPeriod table of the GradingPeriod aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GradingPeriod : IGradingPeriod, IHasETag, IGradingPeriodSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the GradingPeriod resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _schoolReferenceExplicitlyAssigned;
        private School.SchoolReference _schoolReference;
        private School.SchoolReference ImplicitSchoolReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolReference == null && !_schoolReferenceExplicitlyAssigned)
                    _schoolReference = new School.SchoolReference();

                return _schoolReference;
            }
        }

        [DataMember(Name="schoolReference")][NaturalKeyMember]
        public School.SchoolReference SchoolReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolReference != null
                    && (_schoolReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference;

                return null;
            }
            set 
            { 
                _schoolReferenceExplicitlyAssigned = true;
                _schoolReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// The name of the period for which grades are reported.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="descriptor"), NaturalKeyMember]
        public string GradingPeriodDescriptor { get; set; }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IGradingPeriod.SchoolId
        {
            get
            {
                if (ImplicitSchoolReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // School
                _schoolReferenceExplicitlyAssigned = false;
                ImplicitSchoolReference.SchoolId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IGradingPeriod).BeginDate != null) 
                    hash = hash * 23 + (this as IGradingPeriod).BeginDate.GetHashCode();
 
                // Standard Property
                if ((this as IGradingPeriod).GradingPeriodDescriptor != null) 
                    hash = hash * 23 + (this as IGradingPeriod).GradingPeriodDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IGradingPeriod).SchoolId != null) 
                    hash = hash * 23 + (this as IGradingPeriod).SchoolId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Month, day, and year of the last day of the GradingPeriod.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// The sequential order of this period relative to other periods.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="periodSequence")]
        public int? PeriodSequence { get; set; }

        /// <summary>
        /// Total days available for educational instruction during the GradingPeriod.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="totalInstructionalDays")]
        public int TotalInstructionalDays { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGradingPeriod)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGradingPeriod) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IGradingPeriodSynchronizationSourceSupport.IsEndDateSupported                 { get { return true; } set { } }
 
        bool IGradingPeriodSynchronizationSourceSupport.IsPeriodSequenceSupported          { get { return true; } set { } }
 
        bool IGradingPeriodSynchronizationSourceSupport.IsTotalInstructionalDaysSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: GradingPeriodDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.GradingPeriodDescriptor
{
    /// <summary>
    /// A class which represents the edfi.GradingPeriodDescriptor table of the GradingPeriodDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GradingPeriodDescriptor : IGradingPeriodDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IGradingPeriodDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the GradingPeriodDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="gradingPeriodDescriptorId"), NaturalKeyMember]
        public int GradingPeriodDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return GradingPeriodDescriptorId; }
            set { GradingPeriodDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IGradingPeriodDescriptor).GradingPeriodDescriptorId != null) 
                    hash = hash * 23 + (this as IGradingPeriodDescriptor).GradingPeriodDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradingPeriodType")]
        public string GradingPeriodType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGradingPeriodDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGradingPeriodDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IGradingPeriodDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
 
        bool IGradingPeriodDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
 
        bool IGradingPeriodDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
 
        bool IGradingPeriodDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
 
        bool IGradingPeriodDescriptorSynchronizationSourceSupport.IsGradingPeriodTypeSupported   { get { return true; } set { } }
 
        bool IGradingPeriodDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
 
        bool IGradingPeriodDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
 
        bool IGradingPeriodDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: GradingPeriodType

namespace EdFi.Ods.Api.Models.Resources.V2.GradingPeriodType
{
    /// <summary>
    /// A class which represents the edfi.GradingPeriodType table of the GradingPeriodType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GradingPeriodType : IGradingPeriodType, IHasETag, IGradingPeriodTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the GradingPeriodType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for GradingPeriod
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="gradingPeriodTypeId"), NaturalKeyMember]
        public int GradingPeriodTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IGradingPeriodType).GradingPeriodTypeId != null) 
                    hash = hash * 23 + (this as IGradingPeriodType).GradingPeriodTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the GradingPeriod type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// 
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="periodSequence")]
        public int? PeriodSequence { get; set; }

        /// <summary>
        /// The value for the GradingPeriod type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGradingPeriodType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGradingPeriodType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IGradingPeriodTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IGradingPeriodTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IGradingPeriodTypeSynchronizationSourceSupport.IsPeriodSequenceSupported    { get { return true; } set { } }
 
        bool IGradingPeriodTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: GraduationPlan

namespace EdFi.Ods.Api.Models.Resources.V2.GraduationPlan
{
    /// <summary>
    /// Represents a reference to the GraduationPlan resource.
    /// </summary>
    [DataContract]
    public class GraduationPlanReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="typeDescriptor"), NaturalKeyMember]
        public string GraduationPlanTypeDescriptor { get; set; }

        [DataMember(Name="graduationSchoolYear"), NaturalKeyMember]
        public short GraduationSchoolYear { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "GraduationPlan",
                            Href = "/graduationPlans"
                                    + "?educationOrganizationId=" + EducationOrganizationId            
                                    + "&typeDescriptor=" + WebUtility.UrlEncode(GraduationPlanTypeDescriptor)            
                                    + "&graduationSchoolYear=" + GraduationSchoolYear            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int)
                && GraduationPlanTypeDescriptor != default(string)
                && GraduationSchoolYear != default(short)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.GraduationPlan table of the GraduationPlan aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GraduationPlan : IGraduationPlan, IHasETag, IGraduationPlanSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public GraduationPlan()
        {
            GraduationPlanCreditsByCourses = new List<GraduationPlanCreditsByCourse>();
            GraduationPlanCreditsBySubjects = new List<GraduationPlanCreditsBySubject>();
            GraduationPlanRequiredAssessments = new List<GraduationPlanRequiredAssessment>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the GraduationPlan resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        private bool _graduationSchoolYearTypeReferenceExplicitlyAssigned;
        private SchoolYearType.SchoolYearTypeReference _graduationSchoolYearTypeReference;
        private SchoolYearType.SchoolYearTypeReference ImplicitGraduationSchoolYearTypeReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_graduationSchoolYearTypeReference == null && !_graduationSchoolYearTypeReferenceExplicitlyAssigned)
                    _graduationSchoolYearTypeReference = new SchoolYearType.SchoolYearTypeReference();

                return _graduationSchoolYearTypeReference;
            }
        }

        [DataMember(Name="graduationSchoolYearTypeReference")][NaturalKeyMember]
        public SchoolYearType.SchoolYearTypeReference GraduationSchoolYearTypeReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitGraduationSchoolYearTypeReference != null
                    && (_graduationSchoolYearTypeReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitGraduationSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitGraduationSchoolYearTypeReference;

                return null;
            }
            set 
            { 
                _graduationSchoolYearTypeReferenceExplicitlyAssigned = true;
                _graduationSchoolYearTypeReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IGraduationPlan.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="typeDescriptor"), NaturalKeyMember]
        public string GraduationPlanTypeDescriptor { get; set; }

        /// <summary>
        /// The school year the student is expected to graduate.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short IGraduationPlan.GraduationSchoolYear
        {
            get
            {
                if (ImplicitGraduationSchoolYearTypeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGraduationSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitGraduationSchoolYearTypeReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GraduationSchoolYearType
                _graduationSchoolYearTypeReferenceExplicitlyAssigned = false;
                ImplicitGraduationSchoolYearTypeReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IGraduationPlan).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IGraduationPlan).EducationOrganizationId.GetHashCode();
 
                // Standard Property
                if ((this as IGraduationPlan).GraduationPlanTypeDescriptor != null) 
                    hash = hash * 23 + (this as IGraduationPlan).GraduationPlanTypeDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IGraduationPlan).GraduationSchoolYear != null) 
                    hash = hash * 23 + (this as IGraduationPlan).GraduationSchoolYear.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indicator of whether the GraduationPlan is tailored for an individual.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="individualPlan")]
        public bool? IndividualPlan { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="totalRequiredCreditConversion")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? TotalRequiredCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="totalRequiredCredits")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal TotalRequiredCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="totalRequiredCreditType")]
        public string TotalRequiredCreditType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<GraduationPlanCreditsByCourse> _graduationPlanCreditsByCourses;
        private IList<IGraduationPlanCreditsByCourse> _graduationPlanCreditsByCoursesCovariant;

        [DataMember(Name="creditsByCourses")]
        public IList<GraduationPlanCreditsByCourse> GraduationPlanCreditsByCourses 
        { 
            get { return _graduationPlanCreditsByCourses; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<GraduationPlanCreditsByCourse>(value,
                    (s, e) => ((IGraduationPlanCreditsByCourse)e.Item).GraduationPlan = this);
                _graduationPlanCreditsByCourses = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IGraduationPlanCreditsByCourse, GraduationPlanCreditsByCourse>(value);
                covariantList.ItemAdded += (s, e) => ((IGraduationPlanCreditsByCourse)e.Item).GraduationPlan = this;
                _graduationPlanCreditsByCoursesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IGraduationPlanCreditsByCourse> IGraduationPlan.GraduationPlanCreditsByCourses
        {
            get { return _graduationPlanCreditsByCoursesCovariant; }
            set { GraduationPlanCreditsByCourses = new List<GraduationPlanCreditsByCourse>(value.Cast<GraduationPlanCreditsByCourse>()); }
        }

        private IList<GraduationPlanCreditsBySubject> _graduationPlanCreditsBySubjects;
        private IList<IGraduationPlanCreditsBySubject> _graduationPlanCreditsBySubjectsCovariant;

        [DataMember(Name="creditsBySubjects")]
        public IList<GraduationPlanCreditsBySubject> GraduationPlanCreditsBySubjects 
        { 
            get { return _graduationPlanCreditsBySubjects; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<GraduationPlanCreditsBySubject>(value,
                    (s, e) => ((IGraduationPlanCreditsBySubject)e.Item).GraduationPlan = this);
                _graduationPlanCreditsBySubjects = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IGraduationPlanCreditsBySubject, GraduationPlanCreditsBySubject>(value);
                covariantList.ItemAdded += (s, e) => ((IGraduationPlanCreditsBySubject)e.Item).GraduationPlan = this;
                _graduationPlanCreditsBySubjectsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IGraduationPlanCreditsBySubject> IGraduationPlan.GraduationPlanCreditsBySubjects
        {
            get { return _graduationPlanCreditsBySubjectsCovariant; }
            set { GraduationPlanCreditsBySubjects = new List<GraduationPlanCreditsBySubject>(value.Cast<GraduationPlanCreditsBySubject>()); }
        }

        private IList<GraduationPlanRequiredAssessment> _graduationPlanRequiredAssessments;
        private IList<IGraduationPlanRequiredAssessment> _graduationPlanRequiredAssessmentsCovariant;

        [DataMember(Name="requiredAssessments")]
        public IList<GraduationPlanRequiredAssessment> GraduationPlanRequiredAssessments 
        { 
            get { return _graduationPlanRequiredAssessments; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<GraduationPlanRequiredAssessment>(value,
                    (s, e) => ((IGraduationPlanRequiredAssessment)e.Item).GraduationPlan = this);
                _graduationPlanRequiredAssessments = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IGraduationPlanRequiredAssessment, GraduationPlanRequiredAssessment>(value);
                covariantList.ItemAdded += (s, e) => ((IGraduationPlanRequiredAssessment)e.Item).GraduationPlan = this;
                _graduationPlanRequiredAssessmentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IGraduationPlanRequiredAssessment> IGraduationPlan.GraduationPlanRequiredAssessments
        {
            get { return _graduationPlanRequiredAssessmentsCovariant; }
            set { GraduationPlanRequiredAssessments = new List<GraduationPlanRequiredAssessment>(value.Cast<GraduationPlanRequiredAssessment>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_graduationPlanCreditsByCourses != null) foreach (var item in _graduationPlanCreditsByCourses)
            {
                item.GraduationPlan = this;
            }
            
            if (_graduationPlanCreditsBySubjects != null) foreach (var item in _graduationPlanCreditsBySubjects)
            {
                item.GraduationPlan = this;
            }
            
            if (_graduationPlanRequiredAssessments != null) foreach (var item in _graduationPlanRequiredAssessments)
            {
                item.GraduationPlan = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGraduationPlan)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGraduationPlan) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IGraduationPlanSynchronizationSourceSupport.IsGraduationPlanCreditsByCoursesSupported     { get { return true; } set { } }
 
        bool IGraduationPlanSynchronizationSourceSupport.IsGraduationPlanCreditsBySubjectsSupported    { get { return true; } set { } }
 
        bool IGraduationPlanSynchronizationSourceSupport.IsGraduationPlanRequiredAssessmentsSupported  { get { return true; } set { } }
 
        bool IGraduationPlanSynchronizationSourceSupport.IsIndividualPlanSupported                     { get { return true; } set { } }
 
        bool IGraduationPlanSynchronizationSourceSupport.IsTotalRequiredCreditConversionSupported      { get { return true; } set { } }
 
        bool IGraduationPlanSynchronizationSourceSupport.IsTotalRequiredCreditsSupported               { get { return true; } set { } }
 
        bool IGraduationPlanSynchronizationSourceSupport.IsTotalRequiredCreditTypeSupported            { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IGraduationPlanCreditsByCourse, bool> IGraduationPlanSynchronizationSourceSupport.IsGraduationPlanCreditsByCourseIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IGraduationPlanCreditsBySubject, bool> IGraduationPlanSynchronizationSourceSupport.IsGraduationPlanCreditsBySubjectIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IGraduationPlanRequiredAssessment, bool> IGraduationPlanSynchronizationSourceSupport.IsGraduationPlanRequiredAssessmentIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.GraduationPlanCreditsByCourse table of the GraduationPlan aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GraduationPlanCreditsByCourse : IGraduationPlanCreditsByCourse, IGraduationPlanCreditsByCourseSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public GraduationPlanCreditsByCourse()
        {
            GraduationPlanCreditsByCourseCourses = new List<GraduationPlanCreditsByCourseCourse>();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IGraduationPlan _graduationPlan;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IGraduationPlan IGraduationPlanCreditsByCourse.GraduationPlan
        {
            get { return _graduationPlan; }
            set { _graduationPlan = value; }
        }

        internal IGraduationPlan GraduationPlan
        {
            set { _graduationPlan = value; }
        }

        /// <summary>
        /// Identifying name given to a collection of courses.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="courseSetName"), NaturalKeyMember]
        public string CourseSetName { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_graduationPlan != null) 
                    hash = hash * 23 + _graduationPlan.GetHashCode();
 
                // Standard Property
                if ((this as IGraduationPlanCreditsByCourse).CourseSetName != null) 
                    hash = hash * 23 + (this as IGraduationPlanCreditsByCourse).CourseSetName.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="creditConversion")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? CreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="credits")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal Credits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="creditType")]
        public string CreditType { get; set; }

        /// <summary>
        /// The grade level when the student is planned to take the course.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="whenTakenGradeLevelDescriptor")]
        public string WhenTakenGradeLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<GraduationPlanCreditsByCourseCourse> _graduationPlanCreditsByCourseCourses;
        private IList<IGraduationPlanCreditsByCourseCourse> _graduationPlanCreditsByCourseCoursesCovariant;

        [DataMember(Name="courses")]
        public IList<GraduationPlanCreditsByCourseCourse> GraduationPlanCreditsByCourseCourses 
        { 
            get { return _graduationPlanCreditsByCourseCourses; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<GraduationPlanCreditsByCourseCourse>(value,
                    (s, e) => ((IGraduationPlanCreditsByCourseCourse)e.Item).GraduationPlanCreditsByCourse = this);
                _graduationPlanCreditsByCourseCourses = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IGraduationPlanCreditsByCourseCourse, GraduationPlanCreditsByCourseCourse>(value);
                covariantList.ItemAdded += (s, e) => ((IGraduationPlanCreditsByCourseCourse)e.Item).GraduationPlanCreditsByCourse = this;
                _graduationPlanCreditsByCourseCoursesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IGraduationPlanCreditsByCourseCourse> IGraduationPlanCreditsByCourse.GraduationPlanCreditsByCourseCourses
        {
            get { return _graduationPlanCreditsByCourseCoursesCovariant; }
            set { GraduationPlanCreditsByCourseCourses = new List<GraduationPlanCreditsByCourseCourse>(value.Cast<GraduationPlanCreditsByCourseCourse>()); }
        }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_graduationPlanCreditsByCourseCourses != null) foreach (var item in _graduationPlanCreditsByCourseCourses)
            {
                item.GraduationPlanCreditsByCourse = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGraduationPlanCreditsByCourse)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGraduationPlanCreditsByCourse) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IGraduationPlanCreditsByCourseSynchronizationSourceSupport.IsCreditConversionSupported                      { get { return true; } set { } }
 
        bool IGraduationPlanCreditsByCourseSynchronizationSourceSupport.IsCreditsSupported                               { get { return true; } set { } }
 
        bool IGraduationPlanCreditsByCourseSynchronizationSourceSupport.IsCreditTypeSupported                            { get { return true; } set { } }
 
        bool IGraduationPlanCreditsByCourseSynchronizationSourceSupport.IsGraduationPlanCreditsByCourseCoursesSupported  { get { return true; } set { } }
 
        bool IGraduationPlanCreditsByCourseSynchronizationSourceSupport.IsWhenTakenGradeLevelDescriptorSupported         { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IGraduationPlanCreditsByCourseCourse, bool> IGraduationPlanCreditsByCourseSynchronizationSourceSupport.IsGraduationPlanCreditsByCourseCourseIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.GraduationPlanCreditsByCourseCourse table of the GraduationPlan aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GraduationPlanCreditsByCourseCourse : IGraduationPlanCreditsByCourseCourse, IGraduationPlanCreditsByCourseCourseSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _courseReferenceExplicitlyAssigned;
        private Course.CourseReference _courseReference;
        private Course.CourseReference ImplicitCourseReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_courseReference == null && !_courseReferenceExplicitlyAssigned)
                    _courseReference = new Course.CourseReference();

                return _courseReference;
            }
        }

        [DataMember(Name="courseReference")][NaturalKeyMember]
        public Course.CourseReference CourseReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitCourseReference != null
                    && (_courseReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCourseReference.IsReferenceFullyDefined()))
                    return ImplicitCourseReference;

                return null;
            }
            set 
            { 
                _courseReferenceExplicitlyAssigned = true;
                _courseReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IGraduationPlanCreditsByCourse _graduationPlanCreditsByCourse;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IGraduationPlanCreditsByCourse IGraduationPlanCreditsByCourseCourse.GraduationPlanCreditsByCourse
        {
            get { return _graduationPlanCreditsByCourse; }
            set { _graduationPlanCreditsByCourse = value; }
        }

        internal IGraduationPlanCreditsByCourse GraduationPlanCreditsByCourse
        {
            set { _graduationPlanCreditsByCourse = value; }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a course.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IGraduationPlanCreditsByCourseCourse.CourseCode
        {
            get
            {
                if (ImplicitCourseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCourseReference.IsReferenceFullyDefined()))
                    return ImplicitCourseReference.CourseCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Course
                _courseReferenceExplicitlyAssigned = false;
                ImplicitCourseReference.CourseCode = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IGraduationPlanCreditsByCourseCourse.CourseEducationOrganizationId
        {
            get
            {
                if (ImplicitCourseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCourseReference.IsReferenceFullyDefined()))
                    return ImplicitCourseReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Course
                _courseReferenceExplicitlyAssigned = false;
                ImplicitCourseReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_graduationPlanCreditsByCourse != null) 
                    hash = hash * 23 + _graduationPlanCreditsByCourse.GetHashCode();
 
                //Referenced Property
                if ((this as IGraduationPlanCreditsByCourseCourse).CourseCode != null) 
                    hash = hash * 23 + (this as IGraduationPlanCreditsByCourseCourse).CourseCode.GetHashCode();
 
                //Referenced Property
                if ((this as IGraduationPlanCreditsByCourseCourse).CourseEducationOrganizationId != null) 
                    hash = hash * 23 + (this as IGraduationPlanCreditsByCourseCourse).CourseEducationOrganizationId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGraduationPlanCreditsByCourseCourse)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGraduationPlanCreditsByCourseCourse) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.GraduationPlanCreditsBySubject table of the GraduationPlan aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GraduationPlanCreditsBySubject : IGraduationPlanCreditsBySubject, IGraduationPlanCreditsBySubjectSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IGraduationPlan _graduationPlan;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IGraduationPlan IGraduationPlanCreditsBySubject.GraduationPlan
        {
            get { return _graduationPlan; }
            set { _graduationPlan = value; }
        }

        internal IGraduationPlan GraduationPlan
        {
            set { _graduationPlan = value; }
        }

        /// <summary>
        /// The intended major subject area of the graduation requirement.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="academicSubjectDescriptor"), NaturalKeyMember]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_graduationPlan != null) 
                    hash = hash * 23 + _graduationPlan.GetHashCode();
 
                // Standard Property
                if ((this as IGraduationPlanCreditsBySubject).AcademicSubjectDescriptor != null) 
                    hash = hash * 23 + (this as IGraduationPlanCreditsBySubject).AcademicSubjectDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="creditConversion")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? CreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="credits")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal Credits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="creditType")]
        public string CreditType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGraduationPlanCreditsBySubject)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGraduationPlanCreditsBySubject) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IGraduationPlanCreditsBySubjectSynchronizationSourceSupport.IsCreditConversionSupported  { get { return true; } set { } }
 
        bool IGraduationPlanCreditsBySubjectSynchronizationSourceSupport.IsCreditsSupported           { get { return true; } set { } }
 
        bool IGraduationPlanCreditsBySubjectSynchronizationSourceSupport.IsCreditTypeSupported        { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.GraduationPlanRequiredAssessment table of the GraduationPlan aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GraduationPlanRequiredAssessment : IGraduationPlanRequiredAssessment, IGraduationPlanRequiredAssessmentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public GraduationPlanRequiredAssessment()
        {
            GraduationPlanRequiredAssessmentScores = new List<GraduationPlanRequiredAssessmentScore>();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _assessmentReferenceExplicitlyAssigned;
        private Assessment.AssessmentReference _assessmentReference;
        private Assessment.AssessmentReference ImplicitAssessmentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_assessmentReference == null && !_assessmentReferenceExplicitlyAssigned)
                    _assessmentReference = new Assessment.AssessmentReference();

                return _assessmentReference;
            }
        }

        [DataMember(Name="assessmentReference")][NaturalKeyMember]
        public Assessment.AssessmentReference AssessmentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitAssessmentReference != null
                    && (_assessmentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitAssessmentReference.IsReferenceFullyDefined()))
                    return ImplicitAssessmentReference;

                return null;
            }
            set 
            { 
                _assessmentReferenceExplicitlyAssigned = true;
                _assessmentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IGraduationPlan _graduationPlan;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IGraduationPlan IGraduationPlanRequiredAssessment.GraduationPlan
        {
            get { return _graduationPlan; }
            set { _graduationPlan = value; }
        }

        internal IGraduationPlan GraduationPlan
        {
            set { _graduationPlan = value; }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IGraduationPlanRequiredAssessment.AssessmentIdentifier
        {
            get
            {
                if (ImplicitAssessmentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAssessmentReference.IsReferenceFullyDefined()))
                    return ImplicitAssessmentReference.AssessmentIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Assessment
                _assessmentReferenceExplicitlyAssigned = false;
                ImplicitAssessmentReference.AssessmentIdentifier = value;
            }
        }

        /// <summary>
        /// Namespace for the Assessment.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IGraduationPlanRequiredAssessment.Namespace
        {
            get
            {
                if (ImplicitAssessmentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAssessmentReference.IsReferenceFullyDefined()))
                    return ImplicitAssessmentReference.Namespace;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Assessment
                _assessmentReferenceExplicitlyAssigned = false;
                ImplicitAssessmentReference.Namespace = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_graduationPlan != null) 
                    hash = hash * 23 + _graduationPlan.GetHashCode();
 
                //Referenced Property
                if ((this as IGraduationPlanRequiredAssessment).AssessmentIdentifier != null) 
                    hash = hash * 23 + (this as IGraduationPlanRequiredAssessment).AssessmentIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as IGraduationPlanRequiredAssessment).Namespace != null) 
                    hash = hash * 23 + (this as IGraduationPlanRequiredAssessment).Namespace.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// assessmentPerformanceLevel
        /// </summary> 
        [DataMember(Name = "assessmentPerformanceLevel")]
        public GraduationPlanRequiredAssessmentAssessmentPerformanceLevel GraduationPlanRequiredAssessmentAssessmentPerformanceLevel { get; set; }

        IGraduationPlanRequiredAssessmentAssessmentPerformanceLevel IGraduationPlanRequiredAssessment.GraduationPlanRequiredAssessmentAssessmentPerformanceLevel
        {
            get { return GraduationPlanRequiredAssessmentAssessmentPerformanceLevel; }
            set { GraduationPlanRequiredAssessmentAssessmentPerformanceLevel = (GraduationPlanRequiredAssessmentAssessmentPerformanceLevel) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<GraduationPlanRequiredAssessmentScore> _graduationPlanRequiredAssessmentScores;
        private IList<IGraduationPlanRequiredAssessmentScore> _graduationPlanRequiredAssessmentScoresCovariant;

        [DataMember(Name="scores")]
        public IList<GraduationPlanRequiredAssessmentScore> GraduationPlanRequiredAssessmentScores 
        { 
            get { return _graduationPlanRequiredAssessmentScores; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<GraduationPlanRequiredAssessmentScore>(value,
                    (s, e) => ((IGraduationPlanRequiredAssessmentScore)e.Item).GraduationPlanRequiredAssessment = this);
                _graduationPlanRequiredAssessmentScores = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IGraduationPlanRequiredAssessmentScore, GraduationPlanRequiredAssessmentScore>(value);
                covariantList.ItemAdded += (s, e) => ((IGraduationPlanRequiredAssessmentScore)e.Item).GraduationPlanRequiredAssessment = this;
                _graduationPlanRequiredAssessmentScoresCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IGraduationPlanRequiredAssessmentScore> IGraduationPlanRequiredAssessment.GraduationPlanRequiredAssessmentScores
        {
            get { return _graduationPlanRequiredAssessmentScoresCovariant; }
            set { GraduationPlanRequiredAssessmentScores = new List<GraduationPlanRequiredAssessmentScore>(value.Cast<GraduationPlanRequiredAssessmentScore>()); }
        }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_graduationPlanRequiredAssessmentScores != null) foreach (var item in _graduationPlanRequiredAssessmentScores)
            {
                item.GraduationPlanRequiredAssessment = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGraduationPlanRequiredAssessment)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGraduationPlanRequiredAssessment) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IGraduationPlanRequiredAssessmentSynchronizationSourceSupport.IsGraduationPlanRequiredAssessmentAssessmentPerformanceLevelSupported  { get { return true; } set { } }
 
        bool IGraduationPlanRequiredAssessmentSynchronizationSourceSupport.IsGraduationPlanRequiredAssessmentScoresSupported                      { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IGraduationPlanRequiredAssessmentScore, bool> IGraduationPlanRequiredAssessmentSynchronizationSourceSupport.IsGraduationPlanRequiredAssessmentScoreIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.GraduationPlanRequiredAssessmentAssessmentPerformanceLevel table of the GraduationPlan aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GraduationPlanRequiredAssessmentAssessmentPerformanceLevel : IGraduationPlanRequiredAssessmentAssessmentPerformanceLevel, IGraduationPlanRequiredAssessmentAssessmentPerformanceLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IGraduationPlanRequiredAssessment _graduationPlanRequiredAssessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IGraduationPlanRequiredAssessment IGraduationPlanRequiredAssessmentAssessmentPerformanceLevel.GraduationPlanRequiredAssessment
        {
            get { return _graduationPlanRequiredAssessment; }
            set { _graduationPlanRequiredAssessment = value; }
        }

        internal IGraduationPlanRequiredAssessment GraduationPlanRequiredAssessment
        {
            set { _graduationPlanRequiredAssessment = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_graduationPlanRequiredAssessment != null) 
                    hash = hash * 23 + _graduationPlanRequiredAssessment.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="assessmentReportingMethodType")]
        public string AssessmentReportingMethodType { get; set; }

        /// <summary>
        /// The maximum score to make the indicated level of performance.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumScore")]
        public string MaximumScore { get; set; }

        /// <summary>
        /// The minimum score required to make the indicated level of performance.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minimumScore")]
        public string MinimumScore { get; set; }

        /// <summary>
        /// The performance level(s) defined for the assessment.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="performanceLevelDescriptor")]
        public string PerformanceLevelDescriptor { get; set; }

        /// <summary>
        /// The datatype of the result. The results can be expressed as a number, percentile,range, level, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="resultDatatypeType")]
        public string ResultDatatypeType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGraduationPlanRequiredAssessmentAssessmentPerformanceLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGraduationPlanRequiredAssessmentAssessmentPerformanceLevel) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IGraduationPlanRequiredAssessmentAssessmentPerformanceLevelSynchronizationSourceSupport.IsAssessmentReportingMethodTypeSupported  { get { return true; } set { } }
 
        bool IGraduationPlanRequiredAssessmentAssessmentPerformanceLevelSynchronizationSourceSupport.IsMaximumScoreSupported                   { get { return true; } set { } }
 
        bool IGraduationPlanRequiredAssessmentAssessmentPerformanceLevelSynchronizationSourceSupport.IsMinimumScoreSupported                   { get { return true; } set { } }
 
        bool IGraduationPlanRequiredAssessmentAssessmentPerformanceLevelSynchronizationSourceSupport.IsPerformanceLevelDescriptorSupported     { get { return true; } set { } }
 
        bool IGraduationPlanRequiredAssessmentAssessmentPerformanceLevelSynchronizationSourceSupport.IsResultDatatypeTypeSupported             { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.GraduationPlanRequiredAssessmentScore table of the GraduationPlan aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GraduationPlanRequiredAssessmentScore : IGraduationPlanRequiredAssessmentScore, IGraduationPlanRequiredAssessmentScoreSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IGraduationPlanRequiredAssessment _graduationPlanRequiredAssessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IGraduationPlanRequiredAssessment IGraduationPlanRequiredAssessmentScore.GraduationPlanRequiredAssessment
        {
            get { return _graduationPlanRequiredAssessment; }
            set { _graduationPlanRequiredAssessment = value; }
        }

        internal IGraduationPlanRequiredAssessment GraduationPlanRequiredAssessment
        {
            set { _graduationPlanRequiredAssessment = value; }
        }

        /// <summary>
        /// The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="assessmentReportingMethodType"), NaturalKeyMember]
        public string AssessmentReportingMethodType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_graduationPlanRequiredAssessment != null) 
                    hash = hash * 23 + _graduationPlanRequiredAssessment.GetHashCode();
 
                // Standard Property
                if ((this as IGraduationPlanRequiredAssessmentScore).AssessmentReportingMethodType != null) 
                    hash = hash * 23 + (this as IGraduationPlanRequiredAssessmentScore).AssessmentReportingMethodType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The maximum score possible on the assessment.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumScore")]
        public string MaximumScore { get; set; }

        /// <summary>
        /// The minimum score possible on the assessment.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minimumScore")]
        public string MinimumScore { get; set; }

        /// <summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="resultDatatypeType")]
        public string ResultDatatypeType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGraduationPlanRequiredAssessmentScore)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGraduationPlanRequiredAssessmentScore) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IGraduationPlanRequiredAssessmentScoreSynchronizationSourceSupport.IsMaximumScoreSupported        { get { return true; } set { } }
 
        bool IGraduationPlanRequiredAssessmentScoreSynchronizationSourceSupport.IsMinimumScoreSupported        { get { return true; } set { } }
 
        bool IGraduationPlanRequiredAssessmentScoreSynchronizationSourceSupport.IsResultDatatypeTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: GraduationPlanType

namespace EdFi.Ods.Api.Models.Resources.V2.GraduationPlanType
{
    /// <summary>
    /// A class which represents the edfi.GraduationPlanType table of the GraduationPlanType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GraduationPlanType : IGraduationPlanType, IHasETag, IGraduationPlanTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the GraduationPlanType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for GraduationPlan
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="graduationPlanTypeId"), NaturalKeyMember]
        public int GraduationPlanTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IGraduationPlanType).GraduationPlanTypeId != null) 
                    hash = hash * 23 + (this as IGraduationPlanType).GraduationPlanTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the GraduationPlan type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the GraduationPlan type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGraduationPlanType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGraduationPlanType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IGraduationPlanTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IGraduationPlanTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IGraduationPlanTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: GraduationPlanTypeDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.GraduationPlanTypeDescriptor
{
    /// <summary>
    /// A class which represents the edfi.GraduationPlanTypeDescriptor table of the GraduationPlanTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GraduationPlanTypeDescriptor : IGraduationPlanTypeDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IGraduationPlanTypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the GraduationPlanTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="graduationPlanTypeDescriptorId"), NaturalKeyMember]
        public int GraduationPlanTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return GraduationPlanTypeDescriptorId; }
            set { GraduationPlanTypeDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IGraduationPlanTypeDescriptor).GraduationPlanTypeDescriptorId != null) 
                    hash = hash * 23 + (this as IGraduationPlanTypeDescriptor).GraduationPlanTypeDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="graduationPlanType")]
        public string GraduationPlanType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGraduationPlanTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGraduationPlanTypeDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IGraduationPlanTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
 
        bool IGraduationPlanTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
 
        bool IGraduationPlanTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
 
        bool IGraduationPlanTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
 
        bool IGraduationPlanTypeDescriptorSynchronizationSourceSupport.IsGraduationPlanTypeSupported  { get { return true; } set { } }
 
        bool IGraduationPlanTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
 
        bool IGraduationPlanTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
 
        bool IGraduationPlanTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: GunFreeSchoolsActReportingStatusType

namespace EdFi.Ods.Api.Models.Resources.V2.GunFreeSchoolsActReportingStatusType
{
    /// <summary>
    /// A class which represents the edfi.GunFreeSchoolsActReportingStatusType table of the GunFreeSchoolsActReportingStatusType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class GunFreeSchoolsActReportingStatusType : IGunFreeSchoolsActReportingStatusType, IHasETag, IGunFreeSchoolsActReportingStatusTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the GunFreeSchoolsActReportingStatusType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for GunFreeSchoolsActReportingStatus
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="gunFreeSchoolsActReportingStatusTypeId"), NaturalKeyMember]
        public int GunFreeSchoolsActReportingStatusTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IGunFreeSchoolsActReportingStatusType).GunFreeSchoolsActReportingStatusTypeId != null) 
                    hash = hash * 23 + (this as IGunFreeSchoolsActReportingStatusType).GunFreeSchoolsActReportingStatusTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the GunFreeSchoolsActReportingStatus type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the GunFreeSchoolsActReportingStatus type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGunFreeSchoolsActReportingStatusType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IGunFreeSchoolsActReportingStatusType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IGunFreeSchoolsActReportingStatusTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IGunFreeSchoolsActReportingStatusTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IGunFreeSchoolsActReportingStatusTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: IdentificationDocumentUseType

namespace EdFi.Ods.Api.Models.Resources.V2.IdentificationDocumentUseType
{
    /// <summary>
    /// A class which represents the edfi.IdentificationDocumentUseType table of the IdentificationDocumentUseType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class IdentificationDocumentUseType : IIdentificationDocumentUseType, IHasETag, IIdentificationDocumentUseTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the IdentificationDocumentUseType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for IdentificationDocumentUse
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationDocumentUseTypeId"), NaturalKeyMember]
        public int IdentificationDocumentUseTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IIdentificationDocumentUseType).IdentificationDocumentUseTypeId != null) 
                    hash = hash * 23 + (this as IIdentificationDocumentUseType).IdentificationDocumentUseTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the IdentificationDocumentUse type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the IdentificationDocumentUse type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IIdentificationDocumentUseType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IIdentificationDocumentUseType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IIdentificationDocumentUseTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IIdentificationDocumentUseTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IIdentificationDocumentUseTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: IncidentLocationType

namespace EdFi.Ods.Api.Models.Resources.V2.IncidentLocationType
{
    /// <summary>
    /// A class which represents the edfi.IncidentLocationType table of the IncidentLocationType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class IncidentLocationType : IIncidentLocationType, IHasETag, IIncidentLocationTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the IncidentLocationType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for IncidentLocation
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="incidentLocationTypeId"), NaturalKeyMember]
        public int IncidentLocationTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IIncidentLocationType).IncidentLocationTypeId != null) 
                    hash = hash * 23 + (this as IIncidentLocationType).IncidentLocationTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the IncidentLocation type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the IncidentLocation type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IIncidentLocationType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IIncidentLocationType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IIncidentLocationTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IIncidentLocationTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IIncidentLocationTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: InstitutionTelephoneNumberType

namespace EdFi.Ods.Api.Models.Resources.V2.InstitutionTelephoneNumberType
{
    /// <summary>
    /// A class which represents the edfi.InstitutionTelephoneNumberType table of the InstitutionTelephoneNumberType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InstitutionTelephoneNumberType : IInstitutionTelephoneNumberType, IHasETag, IInstitutionTelephoneNumberTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the InstitutionTelephoneNumberType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for InstitutionTelephoneNumber
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="institutionTelephoneNumberTypeId"), NaturalKeyMember]
        public int InstitutionTelephoneNumberTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IInstitutionTelephoneNumberType).InstitutionTelephoneNumberTypeId != null) 
                    hash = hash * 23 + (this as IInstitutionTelephoneNumberType).InstitutionTelephoneNumberTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the InstitutionTelephoneNumber type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the InstitutionTelephoneNumber type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInstitutionTelephoneNumberType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInstitutionTelephoneNumberType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IInstitutionTelephoneNumberTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IInstitutionTelephoneNumberTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IInstitutionTelephoneNumberTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: IntegratedTechnologyStatusType

namespace EdFi.Ods.Api.Models.Resources.V2.IntegratedTechnologyStatusType
{
    /// <summary>
    /// A class which represents the edfi.IntegratedTechnologyStatusType table of the IntegratedTechnologyStatusType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class IntegratedTechnologyStatusType : IIntegratedTechnologyStatusType, IHasETag, IIntegratedTechnologyStatusTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the IntegratedTechnologyStatusType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for IntegratedTechnologyStatus
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="integratedTechnologyStatusTypeId"), NaturalKeyMember]
        public int IntegratedTechnologyStatusTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IIntegratedTechnologyStatusType).IntegratedTechnologyStatusTypeId != null) 
                    hash = hash * 23 + (this as IIntegratedTechnologyStatusType).IntegratedTechnologyStatusTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the IntegratedTechnologyStatus type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the IntegratedTechnologyStatus type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IIntegratedTechnologyStatusType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IIntegratedTechnologyStatusType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IIntegratedTechnologyStatusTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IIntegratedTechnologyStatusTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IIntegratedTechnologyStatusTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: InteractivityStyleType

namespace EdFi.Ods.Api.Models.Resources.V2.InteractivityStyleType
{
    /// <summary>
    /// A class which represents the edfi.InteractivityStyleType table of the InteractivityStyleType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InteractivityStyleType : IInteractivityStyleType, IHasETag, IInteractivityStyleTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the InteractivityStyleType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for InteractivityStyle
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="interactivityStyleTypeId"), NaturalKeyMember]
        public int InteractivityStyleTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IInteractivityStyleType).InteractivityStyleTypeId != null) 
                    hash = hash * 23 + (this as IInteractivityStyleType).InteractivityStyleTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the InteractivityStyle type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the InteractivityStyle type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInteractivityStyleType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInteractivityStyleType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IInteractivityStyleTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IInteractivityStyleTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IInteractivityStyleTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: InternetAccessType

namespace EdFi.Ods.Api.Models.Resources.V2.InternetAccessType
{
    /// <summary>
    /// A class which represents the edfi.InternetAccessType table of the InternetAccessType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InternetAccessType : IInternetAccessType, IHasETag, IInternetAccessTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the InternetAccessType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for InternetAccess
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="internetAccessTypeId"), NaturalKeyMember]
        public int InternetAccessTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IInternetAccessType).InternetAccessTypeId != null) 
                    hash = hash * 23 + (this as IInternetAccessType).InternetAccessTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the InternetAccess type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the InternetAccess type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInternetAccessType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInternetAccessType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IInternetAccessTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IInternetAccessTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IInternetAccessTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: Intervention

namespace EdFi.Ods.Api.Models.Resources.V2.Intervention
{
    /// <summary>
    /// Represents a reference to the Intervention resource.
    /// </summary>
    [DataContract]
    public class InterventionReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="identificationCode"), NaturalKeyMember]
        public string InterventionIdentificationCode { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "Intervention",
                            Href = "/interventions"
                                    + "?educationOrganizationId=" + EducationOrganizationId            
                                    + "&identificationCode=" + WebUtility.UrlEncode(InterventionIdentificationCode)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int)
                && InterventionIdentificationCode != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Intervention table of the Intervention aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class Intervention : IIntervention, IHasETag, IInterventionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Intervention()
        {
            InterventionAppropriateGradeLevels = new List<InterventionAppropriateGradeLevel>();
            InterventionAppropriateSexes = new List<InterventionAppropriateSex>();
            InterventionDiagnoses = new List<InterventionDiagnosis>();
            InterventionEducationContents = new List<InterventionEducationContent>();
            InterventionInterventionPrescriptions = new List<InterventionInterventionPrescription>();
            InterventionLearningResourceMetadataURIs = new List<InterventionLearningResourceMetadataURI>();
            InterventionMeetingTimes = new List<InterventionMeetingTime>();
            InterventionPopulationServeds = new List<InterventionPopulationServed>();
            InterventionStaffs = new List<InterventionStaff>();
            InterventionURIs = new List<InterventionURI>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Intervention resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IIntervention.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode"), NaturalKeyMember]
        public string InterventionIdentificationCode { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IIntervention).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IIntervention).EducationOrganizationId.GetHashCode();
 
                // Standard Property
                if ((this as IIntervention).InterventionIdentificationCode != null) 
                    hash = hash * 23 + (this as IIntervention).InterventionIdentificationCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The start date for the intervention implementation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// The way in which an intervention was implemented: individual, small group, whole class, or whole school.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="deliveryMethodType")]
        public string DeliveryMethodType { get; set; }

        /// <summary>
        /// The end date for the intervention implementation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The way in which an intervention is used: curriculum, supplement, or practice.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="classType")]
        public string InterventionClassType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<InterventionAppropriateGradeLevel> _interventionAppropriateGradeLevels;
        private IList<IInterventionAppropriateGradeLevel> _interventionAppropriateGradeLevelsCovariant;

        [DataMember(Name="appropriateGradeLevels")]
        public IList<InterventionAppropriateGradeLevel> InterventionAppropriateGradeLevels 
        { 
            get { return _interventionAppropriateGradeLevels; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionAppropriateGradeLevel>(value,
                    (s, e) => ((IInterventionAppropriateGradeLevel)e.Item).Intervention = this);
                _interventionAppropriateGradeLevels = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionAppropriateGradeLevel, InterventionAppropriateGradeLevel>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionAppropriateGradeLevel)e.Item).Intervention = this;
                _interventionAppropriateGradeLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionAppropriateGradeLevel> IIntervention.InterventionAppropriateGradeLevels
        {
            get { return _interventionAppropriateGradeLevelsCovariant; }
            set { InterventionAppropriateGradeLevels = new List<InterventionAppropriateGradeLevel>(value.Cast<InterventionAppropriateGradeLevel>()); }
        }

        private IList<InterventionAppropriateSex> _interventionAppropriateSexes;
        private IList<IInterventionAppropriateSex> _interventionAppropriateSexesCovariant;

        [DataMember(Name="appropriateSexes")]
        public IList<InterventionAppropriateSex> InterventionAppropriateSexes 
        { 
            get { return _interventionAppropriateSexes; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionAppropriateSex>(value,
                    (s, e) => ((IInterventionAppropriateSex)e.Item).Intervention = this);
                _interventionAppropriateSexes = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionAppropriateSex, InterventionAppropriateSex>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionAppropriateSex)e.Item).Intervention = this;
                _interventionAppropriateSexesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionAppropriateSex> IIntervention.InterventionAppropriateSexes
        {
            get { return _interventionAppropriateSexesCovariant; }
            set { InterventionAppropriateSexes = new List<InterventionAppropriateSex>(value.Cast<InterventionAppropriateSex>()); }
        }

        private IList<InterventionDiagnosis> _interventionDiagnoses;
        private IList<IInterventionDiagnosis> _interventionDiagnosesCovariant;

        [DataMember(Name="diagnoses")]
        public IList<InterventionDiagnosis> InterventionDiagnoses 
        { 
            get { return _interventionDiagnoses; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionDiagnosis>(value,
                    (s, e) => ((IInterventionDiagnosis)e.Item).Intervention = this);
                _interventionDiagnoses = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionDiagnosis, InterventionDiagnosis>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionDiagnosis)e.Item).Intervention = this;
                _interventionDiagnosesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionDiagnosis> IIntervention.InterventionDiagnoses
        {
            get { return _interventionDiagnosesCovariant; }
            set { InterventionDiagnoses = new List<InterventionDiagnosis>(value.Cast<InterventionDiagnosis>()); }
        }

        private IList<InterventionEducationContent> _interventionEducationContents;
        private IList<IInterventionEducationContent> _interventionEducationContentsCovariant;

        [DataMember(Name="educationContents")]
        public IList<InterventionEducationContent> InterventionEducationContents 
        { 
            get { return _interventionEducationContents; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionEducationContent>(value,
                    (s, e) => ((IInterventionEducationContent)e.Item).Intervention = this);
                _interventionEducationContents = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionEducationContent, InterventionEducationContent>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionEducationContent)e.Item).Intervention = this;
                _interventionEducationContentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionEducationContent> IIntervention.InterventionEducationContents
        {
            get { return _interventionEducationContentsCovariant; }
            set { InterventionEducationContents = new List<InterventionEducationContent>(value.Cast<InterventionEducationContent>()); }
        }

        private IList<InterventionInterventionPrescription> _interventionInterventionPrescriptions;
        private IList<IInterventionInterventionPrescription> _interventionInterventionPrescriptionsCovariant;

        [DataMember(Name="interventionPrescriptions")]
        public IList<InterventionInterventionPrescription> InterventionInterventionPrescriptions 
        { 
            get { return _interventionInterventionPrescriptions; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionInterventionPrescription>(value,
                    (s, e) => ((IInterventionInterventionPrescription)e.Item).Intervention = this);
                _interventionInterventionPrescriptions = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionInterventionPrescription, InterventionInterventionPrescription>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionInterventionPrescription)e.Item).Intervention = this;
                _interventionInterventionPrescriptionsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionInterventionPrescription> IIntervention.InterventionInterventionPrescriptions
        {
            get { return _interventionInterventionPrescriptionsCovariant; }
            set { InterventionInterventionPrescriptions = new List<InterventionInterventionPrescription>(value.Cast<InterventionInterventionPrescription>()); }
        }

        private IList<InterventionLearningResourceMetadataURI> _interventionLearningResourceMetadataURIs;
        private IList<IInterventionLearningResourceMetadataURI> _interventionLearningResourceMetadataURIsCovariant;

        [DataMember(Name="learningResourceMetadataURIs")]
        public IList<InterventionLearningResourceMetadataURI> InterventionLearningResourceMetadataURIs 
        { 
            get { return _interventionLearningResourceMetadataURIs; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionLearningResourceMetadataURI>(value,
                    (s, e) => ((IInterventionLearningResourceMetadataURI)e.Item).Intervention = this);
                _interventionLearningResourceMetadataURIs = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionLearningResourceMetadataURI, InterventionLearningResourceMetadataURI>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionLearningResourceMetadataURI)e.Item).Intervention = this;
                _interventionLearningResourceMetadataURIsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionLearningResourceMetadataURI> IIntervention.InterventionLearningResourceMetadataURIs
        {
            get { return _interventionLearningResourceMetadataURIsCovariant; }
            set { InterventionLearningResourceMetadataURIs = new List<InterventionLearningResourceMetadataURI>(value.Cast<InterventionLearningResourceMetadataURI>()); }
        }

        private IList<InterventionMeetingTime> _interventionMeetingTimes;
        private IList<IInterventionMeetingTime> _interventionMeetingTimesCovariant;

        [DataMember(Name="meetingTimes")]
        public IList<InterventionMeetingTime> InterventionMeetingTimes 
        { 
            get { return _interventionMeetingTimes; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionMeetingTime>(value,
                    (s, e) => ((IInterventionMeetingTime)e.Item).Intervention = this);
                _interventionMeetingTimes = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionMeetingTime, InterventionMeetingTime>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionMeetingTime)e.Item).Intervention = this;
                _interventionMeetingTimesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionMeetingTime> IIntervention.InterventionMeetingTimes
        {
            get { return _interventionMeetingTimesCovariant; }
            set { InterventionMeetingTimes = new List<InterventionMeetingTime>(value.Cast<InterventionMeetingTime>()); }
        }

        private IList<InterventionPopulationServed> _interventionPopulationServeds;
        private IList<IInterventionPopulationServed> _interventionPopulationServedsCovariant;

        [DataMember(Name="populationServeds")]
        public IList<InterventionPopulationServed> InterventionPopulationServeds 
        { 
            get { return _interventionPopulationServeds; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionPopulationServed>(value,
                    (s, e) => ((IInterventionPopulationServed)e.Item).Intervention = this);
                _interventionPopulationServeds = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionPopulationServed, InterventionPopulationServed>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionPopulationServed)e.Item).Intervention = this;
                _interventionPopulationServedsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionPopulationServed> IIntervention.InterventionPopulationServeds
        {
            get { return _interventionPopulationServedsCovariant; }
            set { InterventionPopulationServeds = new List<InterventionPopulationServed>(value.Cast<InterventionPopulationServed>()); }
        }

        private IList<InterventionStaff> _interventionStaffs;
        private IList<IInterventionStaff> _interventionStaffsCovariant;

        [DataMember(Name="staffs")]
        public IList<InterventionStaff> InterventionStaffs 
        { 
            get { return _interventionStaffs; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionStaff>(value,
                    (s, e) => ((IInterventionStaff)e.Item).Intervention = this);
                _interventionStaffs = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionStaff, InterventionStaff>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionStaff)e.Item).Intervention = this;
                _interventionStaffsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionStaff> IIntervention.InterventionStaffs
        {
            get { return _interventionStaffsCovariant; }
            set { InterventionStaffs = new List<InterventionStaff>(value.Cast<InterventionStaff>()); }
        }

        private IList<InterventionURI> _interventionURIs;
        private IList<IInterventionURI> _interventionURIsCovariant;

        [DataMember(Name="uris")]
        public IList<InterventionURI> InterventionURIs 
        { 
            get { return _interventionURIs; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionURI>(value,
                    (s, e) => ((IInterventionURI)e.Item).Intervention = this);
                _interventionURIs = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionURI, InterventionURI>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionURI)e.Item).Intervention = this;
                _interventionURIsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionURI> IIntervention.InterventionURIs
        {
            get { return _interventionURIsCovariant; }
            set { InterventionURIs = new List<InterventionURI>(value.Cast<InterventionURI>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_interventionAppropriateGradeLevels != null) foreach (var item in _interventionAppropriateGradeLevels)
            {
                item.Intervention = this;
            }
            
            if (_interventionAppropriateSexes != null) foreach (var item in _interventionAppropriateSexes)
            {
                item.Intervention = this;
            }
            
            if (_interventionDiagnoses != null) foreach (var item in _interventionDiagnoses)
            {
                item.Intervention = this;
            }
            
            if (_interventionEducationContents != null) foreach (var item in _interventionEducationContents)
            {
                item.Intervention = this;
            }
            
            if (_interventionInterventionPrescriptions != null) foreach (var item in _interventionInterventionPrescriptions)
            {
                item.Intervention = this;
            }
            
            if (_interventionLearningResourceMetadataURIs != null) foreach (var item in _interventionLearningResourceMetadataURIs)
            {
                item.Intervention = this;
            }
            
            if (_interventionMeetingTimes != null) foreach (var item in _interventionMeetingTimes)
            {
                item.Intervention = this;
            }
            
            if (_interventionPopulationServeds != null) foreach (var item in _interventionPopulationServeds)
            {
                item.Intervention = this;
            }
            
            if (_interventionStaffs != null) foreach (var item in _interventionStaffs)
            {
                item.Intervention = this;
            }
            
            if (_interventionURIs != null) foreach (var item in _interventionURIs)
            {
                item.Intervention = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IIntervention)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IIntervention) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IInterventionSynchronizationSourceSupport.IsBeginDateSupported                                 { get { return true; } set { } }
 
        bool IInterventionSynchronizationSourceSupport.IsDeliveryMethodTypeSupported                        { get { return true; } set { } }
 
        bool IInterventionSynchronizationSourceSupport.IsEndDateSupported                                   { get { return true; } set { } }
 
        bool IInterventionSynchronizationSourceSupport.IsInterventionAppropriateGradeLevelsSupported        { get { return true; } set { } }
 
        bool IInterventionSynchronizationSourceSupport.IsInterventionAppropriateSexesSupported              { get { return true; } set { } }
 
        bool IInterventionSynchronizationSourceSupport.IsInterventionClassTypeSupported                     { get { return true; } set { } }
 
        bool IInterventionSynchronizationSourceSupport.IsInterventionDiagnosesSupported                     { get { return true; } set { } }
 
        bool IInterventionSynchronizationSourceSupport.IsInterventionEducationContentsSupported             { get { return true; } set { } }
 
        bool IInterventionSynchronizationSourceSupport.IsInterventionInterventionPrescriptionsSupported     { get { return true; } set { } }
 
        bool IInterventionSynchronizationSourceSupport.IsInterventionLearningResourceMetadataURIsSupported  { get { return true; } set { } }
 
        bool IInterventionSynchronizationSourceSupport.IsInterventionMeetingTimesSupported                  { get { return true; } set { } }
 
        bool IInterventionSynchronizationSourceSupport.IsInterventionPopulationServedsSupported             { get { return true; } set { } }
 
        bool IInterventionSynchronizationSourceSupport.IsInterventionStaffsSupported                        { get { return true; } set { } }
 
        bool IInterventionSynchronizationSourceSupport.IsInterventionURIsSupported                          { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IInterventionAppropriateGradeLevel, bool> IInterventionSynchronizationSourceSupport.IsInterventionAppropriateGradeLevelIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionAppropriateSex, bool> IInterventionSynchronizationSourceSupport.IsInterventionAppropriateSexIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionDiagnosis, bool> IInterventionSynchronizationSourceSupport.IsInterventionDiagnosisIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionEducationContent, bool> IInterventionSynchronizationSourceSupport.IsInterventionEducationContentIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionInterventionPrescription, bool> IInterventionSynchronizationSourceSupport.IsInterventionInterventionPrescriptionIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionLearningResourceMetadataURI, bool> IInterventionSynchronizationSourceSupport.IsInterventionLearningResourceMetadataURIIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionMeetingTime, bool> IInterventionSynchronizationSourceSupport.IsInterventionMeetingTimeIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionPopulationServed, bool> IInterventionSynchronizationSourceSupport.IsInterventionPopulationServedIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionStaff, bool> IInterventionSynchronizationSourceSupport.IsInterventionStaffIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionURI, bool> IInterventionSynchronizationSourceSupport.IsInterventionURIIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionAppropriateGradeLevel table of the Intervention aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionAppropriateGradeLevel : IInterventionAppropriateGradeLevel, IInterventionAppropriateGradeLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IIntervention _intervention;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IIntervention IInterventionAppropriateGradeLevel.Intervention
        {
            get { return _intervention; }
            set { _intervention = value; }
        }

        internal IIntervention Intervention
        {
            set { _intervention = value; }
        }

        /// <summary>
        /// Grade levels for the Intervention-if omitted, considered generally applicable.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_intervention != null) 
                    hash = hash * 23 + _intervention.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionAppropriateGradeLevel).GradeLevelDescriptor != null) 
                    hash = hash * 23 + (this as IInterventionAppropriateGradeLevel).GradeLevelDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionAppropriateGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionAppropriateGradeLevel) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionAppropriateSex table of the Intervention aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionAppropriateSex : IInterventionAppropriateSex, IInterventionAppropriateSexSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IIntervention _intervention;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IIntervention IInterventionAppropriateSex.Intervention
        {
            get { return _intervention; }
            set { _intervention = value; }
        }

        internal IIntervention Intervention
        {
            set { _intervention = value; }
        }

        /// <summary>
        /// Sexes for the Intervention. If omitted, considered generally applicable.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexType"), NaturalKeyMember]
        public string SexType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_intervention != null) 
                    hash = hash * 23 + _intervention.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionAppropriateSex).SexType != null) 
                    hash = hash * 23 + (this as IInterventionAppropriateSex).SexType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionAppropriateSex)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionAppropriateSex) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionDiagnosis table of the Intervention aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionDiagnosis : IInterventionDiagnosis, IInterventionDiagnosisSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IIntervention _intervention;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IIntervention IInterventionDiagnosis.Intervention
        {
            get { return _intervention; }
            set { _intervention = value; }
        }

        internal IIntervention Intervention
        {
            set { _intervention = value; }
        }

        /// <summary>
        /// Targeted purpose of the Intervention (e.g., attendance issue, dropout risk).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="diagnosisDescriptor"), NaturalKeyMember]
        public string DiagnosisDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_intervention != null) 
                    hash = hash * 23 + _intervention.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionDiagnosis).DiagnosisDescriptor != null) 
                    hash = hash * 23 + (this as IInterventionDiagnosis).DiagnosisDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionDiagnosis)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionDiagnosis) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionEducationContent table of the Intervention aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionEducationContent : IInterventionEducationContent, IInterventionEducationContentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationContentReferenceExplicitlyAssigned;
        private EducationContent.EducationContentReference _educationContentReference;
        private EducationContent.EducationContentReference ImplicitEducationContentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationContentReference == null && !_educationContentReferenceExplicitlyAssigned)
                    _educationContentReference = new EducationContent.EducationContentReference();

                return _educationContentReference;
            }
        }

        [DataMember(Name="educationContentReference")][NaturalKeyMember]
        public EducationContent.EducationContentReference EducationContentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationContentReference != null
                    && (_educationContentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationContentReference.IsReferenceFullyDefined()))
                    return ImplicitEducationContentReference;

                return null;
            }
            set 
            { 
                _educationContentReferenceExplicitlyAssigned = true;
                _educationContentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IIntervention _intervention;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IIntervention IInterventionEducationContent.Intervention
        {
            get { return _intervention; }
            set { _intervention = value; }
        }

        internal IIntervention Intervention
        {
            set { _intervention = value; }
        }

        /// <summary>
        /// A unique identifier for the EducationContent.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IInterventionEducationContent.ContentIdentifier
        {
            get
            {
                if (ImplicitEducationContentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationContentReference.IsReferenceFullyDefined()))
                    return ImplicitEducationContentReference.ContentIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationContent
                _educationContentReferenceExplicitlyAssigned = false;
                ImplicitEducationContentReference.ContentIdentifier = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_intervention != null) 
                    hash = hash * 23 + _intervention.GetHashCode();
 
                //Referenced Property
                if ((this as IInterventionEducationContent).ContentIdentifier != null) 
                    hash = hash * 23 + (this as IInterventionEducationContent).ContentIdentifier.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionEducationContent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionEducationContent) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionInterventionPrescription table of the Intervention aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionInterventionPrescription : IInterventionInterventionPrescription, IInterventionInterventionPrescriptionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _interventionPrescriptionReferenceExplicitlyAssigned;
        private InterventionPrescription.InterventionPrescriptionReference _interventionPrescriptionReference;
        private InterventionPrescription.InterventionPrescriptionReference ImplicitInterventionPrescriptionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_interventionPrescriptionReference == null && !_interventionPrescriptionReferenceExplicitlyAssigned)
                    _interventionPrescriptionReference = new InterventionPrescription.InterventionPrescriptionReference();

                return _interventionPrescriptionReference;
            }
        }

        [DataMember(Name="interventionPrescriptionReference")][NaturalKeyMember]
        public InterventionPrescription.InterventionPrescriptionReference InterventionPrescriptionReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitInterventionPrescriptionReference != null
                    && (_interventionPrescriptionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitInterventionPrescriptionReference.IsReferenceFullyDefined()))
                    return ImplicitInterventionPrescriptionReference;

                return null;
            }
            set 
            { 
                _interventionPrescriptionReferenceExplicitlyAssigned = true;
                _interventionPrescriptionReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IIntervention _intervention;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IIntervention IInterventionInterventionPrescription.Intervention
        {
            get { return _intervention; }
            set { _intervention = value; }
        }

        internal IIntervention Intervention
        {
            set { _intervention = value; }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IInterventionInterventionPrescription.InterventionPrescriptionEducationOrganizationId
        {
            get
            {
                if (ImplicitInterventionPrescriptionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitInterventionPrescriptionReference.IsReferenceFullyDefined()))
                    return ImplicitInterventionPrescriptionReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // InterventionPrescription
                _interventionPrescriptionReferenceExplicitlyAssigned = false;
                ImplicitInterventionPrescriptionReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IInterventionInterventionPrescription.InterventionPrescriptionIdentificationCode
        {
            get
            {
                if (ImplicitInterventionPrescriptionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitInterventionPrescriptionReference.IsReferenceFullyDefined()))
                    return ImplicitInterventionPrescriptionReference.InterventionPrescriptionIdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // InterventionPrescription
                _interventionPrescriptionReferenceExplicitlyAssigned = false;
                ImplicitInterventionPrescriptionReference.InterventionPrescriptionIdentificationCode = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_intervention != null) 
                    hash = hash * 23 + _intervention.GetHashCode();
 
                //Referenced Property
                if ((this as IInterventionInterventionPrescription).InterventionPrescriptionEducationOrganizationId != null) 
                    hash = hash * 23 + (this as IInterventionInterventionPrescription).InterventionPrescriptionEducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IInterventionInterventionPrescription).InterventionPrescriptionIdentificationCode != null) 
                    hash = hash * 23 + (this as IInterventionInterventionPrescription).InterventionPrescriptionIdentificationCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionInterventionPrescription)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionInterventionPrescription) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionLearningResourceMetadataURI table of the Intervention aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionLearningResourceMetadataURI : IInterventionLearningResourceMetadataURI, IInterventionLearningResourceMetadataURISynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IIntervention _intervention;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IIntervention IInterventionLearningResourceMetadataURI.Intervention
        {
            get { return _intervention; }
            set { _intervention = value; }
        }

        internal IIntervention Intervention
        {
            set { _intervention = value; }
        }

        /// <summary>
        /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="learningResourceMetadataURI"), NaturalKeyMember]
        public string LearningResourceMetadataURI { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_intervention != null) 
                    hash = hash * 23 + _intervention.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionLearningResourceMetadataURI).LearningResourceMetadataURI != null) 
                    hash = hash * 23 + (this as IInterventionLearningResourceMetadataURI).LearningResourceMetadataURI.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionLearningResourceMetadataURI)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionLearningResourceMetadataURI) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionMeetingTime table of the Intervention aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionMeetingTime : IInterventionMeetingTime, IInterventionMeetingTimeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _classPeriodReferenceExplicitlyAssigned;
        private ClassPeriod.ClassPeriodReference _classPeriodReference;
        private ClassPeriod.ClassPeriodReference ImplicitClassPeriodReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_classPeriodReference == null && !_classPeriodReferenceExplicitlyAssigned)
                    _classPeriodReference = new ClassPeriod.ClassPeriodReference();

                return _classPeriodReference;
            }
        }

        [DataMember(Name="classPeriodReference")][NaturalKeyMember]
        public ClassPeriod.ClassPeriodReference ClassPeriodReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitClassPeriodReference != null
                    && (_classPeriodReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitClassPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitClassPeriodReference;

                return null;
            }
            set 
            { 
                _classPeriodReferenceExplicitlyAssigned = true;
                _classPeriodReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IIntervention _intervention;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IIntervention IInterventionMeetingTime.Intervention
        {
            get { return _intervention; }
            set { _intervention = value; }
        }

        internal IIntervention Intervention
        {
            set { _intervention = value; }
        }

        /// <summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IInterventionMeetingTime.ClassPeriodName
        {
            get
            {
                if (ImplicitClassPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitClassPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitClassPeriodReference.ClassPeriodName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ClassPeriod
                _classPeriodReferenceExplicitlyAssigned = false;
                ImplicitClassPeriodReference.ClassPeriodName = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IInterventionMeetingTime.SchoolId
        {
            get
            {
                if (ImplicitClassPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitClassPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitClassPeriodReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ClassPeriod
                _classPeriodReferenceExplicitlyAssigned = false;
                ImplicitClassPeriodReference.SchoolId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_intervention != null) 
                    hash = hash * 23 + _intervention.GetHashCode();
 
                //Referenced Property
                if ((this as IInterventionMeetingTime).ClassPeriodName != null) 
                    hash = hash * 23 + (this as IInterventionMeetingTime).ClassPeriodName.GetHashCode();
 
                //Referenced Property
                if ((this as IInterventionMeetingTime).SchoolId != null) 
                    hash = hash * 23 + (this as IInterventionMeetingTime).SchoolId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An alternate name for the day (e.g., Red, Blue).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="alternateDayName")]
        public string AlternateDayName { get; set; }

        /// <summary>
        /// An indication of the time of day the class ends.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endTime")][JsonConverter(typeof(UtcTimeConverter))]
        public TimeSpan EndTime { get; set; }

        /// <summary>
        /// Indicator of whether this meeting time is used for official daily attendance.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="officialAttendancePeriod")]
        public bool? OfficialAttendancePeriod { get; set; }

        /// <summary>
        /// An indication of the time of day the class begins.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="startTime")][JsonConverter(typeof(UtcTimeConverter))]
        public TimeSpan StartTime { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionMeetingTime)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionMeetingTime) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IInterventionMeetingTimeSynchronizationSourceSupport.IsAlternateDayNameSupported          { get { return true; } set { } }
 
        bool IInterventionMeetingTimeSynchronizationSourceSupport.IsEndTimeSupported                   { get { return true; } set { } }
 
        bool IInterventionMeetingTimeSynchronizationSourceSupport.IsOfficialAttendancePeriodSupported  { get { return true; } set { } }
 
        bool IInterventionMeetingTimeSynchronizationSourceSupport.IsStartTimeSupported                 { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionPopulationServed table of the Intervention aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionPopulationServed : IInterventionPopulationServed, IInterventionPopulationServedSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IIntervention _intervention;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IIntervention IInterventionPopulationServed.Intervention
        {
            get { return _intervention; }
            set { _intervention = value; }
        }

        internal IIntervention Intervention
        {
            set { _intervention = value; }
        }

        /// <summary>
        /// A subset of students that are the focus of the Intervention.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="populationServedType"), NaturalKeyMember]
        public string PopulationServedType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_intervention != null) 
                    hash = hash * 23 + _intervention.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionPopulationServed).PopulationServedType != null) 
                    hash = hash * 23 + (this as IInterventionPopulationServed).PopulationServedType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionPopulationServed)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionPopulationServed) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionStaff table of the Intervention aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionStaff : IInterventionStaff, IInterventionStaffSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _staffReferenceExplicitlyAssigned;
        private Staff.StaffReference _staffReference;
        private Staff.StaffReference ImplicitStaffReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_staffReference == null && !_staffReferenceExplicitlyAssigned)
                    _staffReference = new Staff.StaffReference();

                return _staffReference;
            }
        }

        [DataMember(Name="staffReference")][NaturalKeyMember]
        public Staff.StaffReference StaffReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStaffReference != null
                    && (_staffReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference;

                return null;
            }
            set 
            { 
                _staffReferenceExplicitlyAssigned = true;
                _staffReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IIntervention _intervention;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IIntervention IInterventionStaff.Intervention
        {
            get { return _intervention; }
            set { _intervention = value; }
        }

        internal IIntervention Intervention
        {
            set { _intervention = value; }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IInterventionStaff.StaffUniqueId
        {
            get
            {
                if (ImplicitStaffReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference.StaffUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Staff
                _staffReferenceExplicitlyAssigned = false;
                ImplicitStaffReference.StaffUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_intervention != null) 
                    hash = hash * 23 + _intervention.GetHashCode();
 
                //Referenced Property
                if ((this as IInterventionStaff).StaffUniqueId != null) 
                    hash = hash * 23 + (this as IInterventionStaff).StaffUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionStaff)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionStaff) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionURI table of the Intervention aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionURI : IInterventionURI, IInterventionURISynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IIntervention _intervention;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IIntervention IInterventionURI.Intervention
        {
            get { return _intervention; }
            set { _intervention = value; }
        }

        internal IIntervention Intervention
        {
            set { _intervention = value; }
        }

        /// <summary>
        /// The URI (typical a URL) pointing to an education content item.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="uri"), NaturalKeyMember]
        public string URI { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_intervention != null) 
                    hash = hash * 23 + _intervention.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionURI).URI != null) 
                    hash = hash * 23 + (this as IInterventionURI).URI.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionURI)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionURI) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: InterventionClassType

namespace EdFi.Ods.Api.Models.Resources.V2.InterventionClassType
{
    /// <summary>
    /// A class which represents the edfi.InterventionClassType table of the InterventionClassType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionClassType : IInterventionClassType, IHasETag, IInterventionClassTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the InterventionClassType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for InterventionClass
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="interventionClassTypeId"), NaturalKeyMember]
        public int InterventionClassTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IInterventionClassType).InterventionClassTypeId != null) 
                    hash = hash * 23 + (this as IInterventionClassType).InterventionClassTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the InterventionClass type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the InterventionClass type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionClassType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionClassType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IInterventionClassTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IInterventionClassTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IInterventionClassTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: InterventionEffectivenessRatingType

namespace EdFi.Ods.Api.Models.Resources.V2.InterventionEffectivenessRatingType
{
    /// <summary>
    /// A class which represents the edfi.InterventionEffectivenessRatingType table of the InterventionEffectivenessRatingType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionEffectivenessRatingType : IInterventionEffectivenessRatingType, IHasETag, IInterventionEffectivenessRatingTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the InterventionEffectivenessRatingType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for InterventionEffectivenessRating
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="interventionEffectivenessRatingTypeId"), NaturalKeyMember]
        public int InterventionEffectivenessRatingTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IInterventionEffectivenessRatingType).InterventionEffectivenessRatingTypeId != null) 
                    hash = hash * 23 + (this as IInterventionEffectivenessRatingType).InterventionEffectivenessRatingTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the InterventionEffectivenessRating type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the InterventionEffectivenessRating type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionEffectivenessRatingType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionEffectivenessRatingType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IInterventionEffectivenessRatingTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IInterventionEffectivenessRatingTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IInterventionEffectivenessRatingTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: InterventionPrescription

namespace EdFi.Ods.Api.Models.Resources.V2.InterventionPrescription
{
    /// <summary>
    /// Represents a reference to the InterventionPrescription resource.
    /// </summary>
    [DataContract]
    public class InterventionPrescriptionReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="identificationCode"), NaturalKeyMember]
        public string InterventionPrescriptionIdentificationCode { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "InterventionPrescription",
                            Href = "/interventionPrescriptions"
                                    + "?educationOrganizationId=" + EducationOrganizationId            
                                    + "&identificationCode=" + WebUtility.UrlEncode(InterventionPrescriptionIdentificationCode)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int)
                && InterventionPrescriptionIdentificationCode != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.InterventionPrescription table of the InterventionPrescription aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionPrescription : IInterventionPrescription, IHasETag, IInterventionPrescriptionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public InterventionPrescription()
        {
            InterventionPrescriptionAppropriateGradeLevels = new List<InterventionPrescriptionAppropriateGradeLevel>();
            InterventionPrescriptionAppropriateSexes = new List<InterventionPrescriptionAppropriateSex>();
            InterventionPrescriptionDiagnoses = new List<InterventionPrescriptionDiagnosis>();
            InterventionPrescriptionEducationContents = new List<InterventionPrescriptionEducationContent>();
            InterventionPrescriptionLearningResourceMetadataURIs = new List<InterventionPrescriptionLearningResourceMetadataURI>();
            InterventionPrescriptionPopulationServeds = new List<InterventionPrescriptionPopulationServed>();
            InterventionPrescriptionURIs = new List<InterventionPrescriptionURI>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the InterventionPrescription resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IInterventionPrescription.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode"), NaturalKeyMember]
        public string InterventionPrescriptionIdentificationCode { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IInterventionPrescription).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IInterventionPrescription).EducationOrganizationId.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionPrescription).InterventionPrescriptionIdentificationCode != null) 
                    hash = hash * 23 + (this as IInterventionPrescription).InterventionPrescriptionIdentificationCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The way in which an intervention was implemented: individual, small group, whole class, or whole school.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="deliveryMethodType")]
        public string DeliveryMethodType { get; set; }

        /// <summary>
        /// The way in which an intervention is used: curriculum, supplement, or practice.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="interventionClassType")]
        public string InterventionClassType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<InterventionPrescriptionAppropriateGradeLevel> _interventionPrescriptionAppropriateGradeLevels;
        private IList<IInterventionPrescriptionAppropriateGradeLevel> _interventionPrescriptionAppropriateGradeLevelsCovariant;

        [DataMember(Name="appropriateGradeLevels")]
        public IList<InterventionPrescriptionAppropriateGradeLevel> InterventionPrescriptionAppropriateGradeLevels 
        { 
            get { return _interventionPrescriptionAppropriateGradeLevels; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionPrescriptionAppropriateGradeLevel>(value,
                    (s, e) => ((IInterventionPrescriptionAppropriateGradeLevel)e.Item).InterventionPrescription = this);
                _interventionPrescriptionAppropriateGradeLevels = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionPrescriptionAppropriateGradeLevel, InterventionPrescriptionAppropriateGradeLevel>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionPrescriptionAppropriateGradeLevel)e.Item).InterventionPrescription = this;
                _interventionPrescriptionAppropriateGradeLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionPrescriptionAppropriateGradeLevel> IInterventionPrescription.InterventionPrescriptionAppropriateGradeLevels
        {
            get { return _interventionPrescriptionAppropriateGradeLevelsCovariant; }
            set { InterventionPrescriptionAppropriateGradeLevels = new List<InterventionPrescriptionAppropriateGradeLevel>(value.Cast<InterventionPrescriptionAppropriateGradeLevel>()); }
        }

        private IList<InterventionPrescriptionAppropriateSex> _interventionPrescriptionAppropriateSexes;
        private IList<IInterventionPrescriptionAppropriateSex> _interventionPrescriptionAppropriateSexesCovariant;

        [DataMember(Name="appropriateSexes")]
        public IList<InterventionPrescriptionAppropriateSex> InterventionPrescriptionAppropriateSexes 
        { 
            get { return _interventionPrescriptionAppropriateSexes; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionPrescriptionAppropriateSex>(value,
                    (s, e) => ((IInterventionPrescriptionAppropriateSex)e.Item).InterventionPrescription = this);
                _interventionPrescriptionAppropriateSexes = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionPrescriptionAppropriateSex, InterventionPrescriptionAppropriateSex>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionPrescriptionAppropriateSex)e.Item).InterventionPrescription = this;
                _interventionPrescriptionAppropriateSexesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionPrescriptionAppropriateSex> IInterventionPrescription.InterventionPrescriptionAppropriateSexes
        {
            get { return _interventionPrescriptionAppropriateSexesCovariant; }
            set { InterventionPrescriptionAppropriateSexes = new List<InterventionPrescriptionAppropriateSex>(value.Cast<InterventionPrescriptionAppropriateSex>()); }
        }

        private IList<InterventionPrescriptionDiagnosis> _interventionPrescriptionDiagnoses;
        private IList<IInterventionPrescriptionDiagnosis> _interventionPrescriptionDiagnosesCovariant;

        [DataMember(Name="diagnoses")]
        public IList<InterventionPrescriptionDiagnosis> InterventionPrescriptionDiagnoses 
        { 
            get { return _interventionPrescriptionDiagnoses; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionPrescriptionDiagnosis>(value,
                    (s, e) => ((IInterventionPrescriptionDiagnosis)e.Item).InterventionPrescription = this);
                _interventionPrescriptionDiagnoses = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionPrescriptionDiagnosis, InterventionPrescriptionDiagnosis>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionPrescriptionDiagnosis)e.Item).InterventionPrescription = this;
                _interventionPrescriptionDiagnosesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionPrescriptionDiagnosis> IInterventionPrescription.InterventionPrescriptionDiagnoses
        {
            get { return _interventionPrescriptionDiagnosesCovariant; }
            set { InterventionPrescriptionDiagnoses = new List<InterventionPrescriptionDiagnosis>(value.Cast<InterventionPrescriptionDiagnosis>()); }
        }

        private IList<InterventionPrescriptionEducationContent> _interventionPrescriptionEducationContents;
        private IList<IInterventionPrescriptionEducationContent> _interventionPrescriptionEducationContentsCovariant;

        [DataMember(Name="educationContents")]
        public IList<InterventionPrescriptionEducationContent> InterventionPrescriptionEducationContents 
        { 
            get { return _interventionPrescriptionEducationContents; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionPrescriptionEducationContent>(value,
                    (s, e) => ((IInterventionPrescriptionEducationContent)e.Item).InterventionPrescription = this);
                _interventionPrescriptionEducationContents = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionPrescriptionEducationContent, InterventionPrescriptionEducationContent>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionPrescriptionEducationContent)e.Item).InterventionPrescription = this;
                _interventionPrescriptionEducationContentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionPrescriptionEducationContent> IInterventionPrescription.InterventionPrescriptionEducationContents
        {
            get { return _interventionPrescriptionEducationContentsCovariant; }
            set { InterventionPrescriptionEducationContents = new List<InterventionPrescriptionEducationContent>(value.Cast<InterventionPrescriptionEducationContent>()); }
        }

        private IList<InterventionPrescriptionLearningResourceMetadataURI> _interventionPrescriptionLearningResourceMetadataURIs;
        private IList<IInterventionPrescriptionLearningResourceMetadataURI> _interventionPrescriptionLearningResourceMetadataURIsCovariant;

        [DataMember(Name="learningResourceMetadataURIs")]
        public IList<InterventionPrescriptionLearningResourceMetadataURI> InterventionPrescriptionLearningResourceMetadataURIs 
        { 
            get { return _interventionPrescriptionLearningResourceMetadataURIs; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionPrescriptionLearningResourceMetadataURI>(value,
                    (s, e) => ((IInterventionPrescriptionLearningResourceMetadataURI)e.Item).InterventionPrescription = this);
                _interventionPrescriptionLearningResourceMetadataURIs = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionPrescriptionLearningResourceMetadataURI, InterventionPrescriptionLearningResourceMetadataURI>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionPrescriptionLearningResourceMetadataURI)e.Item).InterventionPrescription = this;
                _interventionPrescriptionLearningResourceMetadataURIsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionPrescriptionLearningResourceMetadataURI> IInterventionPrescription.InterventionPrescriptionLearningResourceMetadataURIs
        {
            get { return _interventionPrescriptionLearningResourceMetadataURIsCovariant; }
            set { InterventionPrescriptionLearningResourceMetadataURIs = new List<InterventionPrescriptionLearningResourceMetadataURI>(value.Cast<InterventionPrescriptionLearningResourceMetadataURI>()); }
        }

        private IList<InterventionPrescriptionPopulationServed> _interventionPrescriptionPopulationServeds;
        private IList<IInterventionPrescriptionPopulationServed> _interventionPrescriptionPopulationServedsCovariant;

        [DataMember(Name="populationServeds")]
        public IList<InterventionPrescriptionPopulationServed> InterventionPrescriptionPopulationServeds 
        { 
            get { return _interventionPrescriptionPopulationServeds; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionPrescriptionPopulationServed>(value,
                    (s, e) => ((IInterventionPrescriptionPopulationServed)e.Item).InterventionPrescription = this);
                _interventionPrescriptionPopulationServeds = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionPrescriptionPopulationServed, InterventionPrescriptionPopulationServed>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionPrescriptionPopulationServed)e.Item).InterventionPrescription = this;
                _interventionPrescriptionPopulationServedsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionPrescriptionPopulationServed> IInterventionPrescription.InterventionPrescriptionPopulationServeds
        {
            get { return _interventionPrescriptionPopulationServedsCovariant; }
            set { InterventionPrescriptionPopulationServeds = new List<InterventionPrescriptionPopulationServed>(value.Cast<InterventionPrescriptionPopulationServed>()); }
        }

        private IList<InterventionPrescriptionURI> _interventionPrescriptionURIs;
        private IList<IInterventionPrescriptionURI> _interventionPrescriptionURIsCovariant;

        [DataMember(Name="uris")]
        public IList<InterventionPrescriptionURI> InterventionPrescriptionURIs 
        { 
            get { return _interventionPrescriptionURIs; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionPrescriptionURI>(value,
                    (s, e) => ((IInterventionPrescriptionURI)e.Item).InterventionPrescription = this);
                _interventionPrescriptionURIs = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionPrescriptionURI, InterventionPrescriptionURI>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionPrescriptionURI)e.Item).InterventionPrescription = this;
                _interventionPrescriptionURIsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionPrescriptionURI> IInterventionPrescription.InterventionPrescriptionURIs
        {
            get { return _interventionPrescriptionURIsCovariant; }
            set { InterventionPrescriptionURIs = new List<InterventionPrescriptionURI>(value.Cast<InterventionPrescriptionURI>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_interventionPrescriptionAppropriateGradeLevels != null) foreach (var item in _interventionPrescriptionAppropriateGradeLevels)
            {
                item.InterventionPrescription = this;
            }
            
            if (_interventionPrescriptionAppropriateSexes != null) foreach (var item in _interventionPrescriptionAppropriateSexes)
            {
                item.InterventionPrescription = this;
            }
            
            if (_interventionPrescriptionDiagnoses != null) foreach (var item in _interventionPrescriptionDiagnoses)
            {
                item.InterventionPrescription = this;
            }
            
            if (_interventionPrescriptionEducationContents != null) foreach (var item in _interventionPrescriptionEducationContents)
            {
                item.InterventionPrescription = this;
            }
            
            if (_interventionPrescriptionLearningResourceMetadataURIs != null) foreach (var item in _interventionPrescriptionLearningResourceMetadataURIs)
            {
                item.InterventionPrescription = this;
            }
            
            if (_interventionPrescriptionPopulationServeds != null) foreach (var item in _interventionPrescriptionPopulationServeds)
            {
                item.InterventionPrescription = this;
            }
            
            if (_interventionPrescriptionURIs != null) foreach (var item in _interventionPrescriptionURIs)
            {
                item.InterventionPrescription = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionPrescription)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionPrescription) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IInterventionPrescriptionSynchronizationSourceSupport.IsDeliveryMethodTypeSupported                                    { get { return true; } set { } }
 
        bool IInterventionPrescriptionSynchronizationSourceSupport.IsInterventionClassTypeSupported                                 { get { return true; } set { } }
 
        bool IInterventionPrescriptionSynchronizationSourceSupport.IsInterventionPrescriptionAppropriateGradeLevelsSupported        { get { return true; } set { } }
 
        bool IInterventionPrescriptionSynchronizationSourceSupport.IsInterventionPrescriptionAppropriateSexesSupported              { get { return true; } set { } }
 
        bool IInterventionPrescriptionSynchronizationSourceSupport.IsInterventionPrescriptionDiagnosesSupported                     { get { return true; } set { } }
 
        bool IInterventionPrescriptionSynchronizationSourceSupport.IsInterventionPrescriptionEducationContentsSupported             { get { return true; } set { } }
 
        bool IInterventionPrescriptionSynchronizationSourceSupport.IsInterventionPrescriptionLearningResourceMetadataURIsSupported  { get { return true; } set { } }
 
        bool IInterventionPrescriptionSynchronizationSourceSupport.IsInterventionPrescriptionPopulationServedsSupported             { get { return true; } set { } }
 
        bool IInterventionPrescriptionSynchronizationSourceSupport.IsInterventionPrescriptionURIsSupported                          { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IInterventionPrescriptionAppropriateGradeLevel, bool> IInterventionPrescriptionSynchronizationSourceSupport.IsInterventionPrescriptionAppropriateGradeLevelIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionPrescriptionAppropriateSex, bool> IInterventionPrescriptionSynchronizationSourceSupport.IsInterventionPrescriptionAppropriateSexIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionPrescriptionDiagnosis, bool> IInterventionPrescriptionSynchronizationSourceSupport.IsInterventionPrescriptionDiagnosisIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionPrescriptionEducationContent, bool> IInterventionPrescriptionSynchronizationSourceSupport.IsInterventionPrescriptionEducationContentIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionPrescriptionLearningResourceMetadataURI, bool> IInterventionPrescriptionSynchronizationSourceSupport.IsInterventionPrescriptionLearningResourceMetadataURIIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionPrescriptionPopulationServed, bool> IInterventionPrescriptionSynchronizationSourceSupport.IsInterventionPrescriptionPopulationServedIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionPrescriptionURI, bool> IInterventionPrescriptionSynchronizationSourceSupport.IsInterventionPrescriptionURIIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionPrescriptionAppropriateGradeLevel table of the InterventionPrescription aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionPrescriptionAppropriateGradeLevel : IInterventionPrescriptionAppropriateGradeLevel, IInterventionPrescriptionAppropriateGradeLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IInterventionPrescription _interventionPrescription;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IInterventionPrescription IInterventionPrescriptionAppropriateGradeLevel.InterventionPrescription
        {
            get { return _interventionPrescription; }
            set { _interventionPrescription = value; }
        }

        internal IInterventionPrescription InterventionPrescription
        {
            set { _interventionPrescription = value; }
        }

        /// <summary>
        /// Grade levels for the prescribed intervention. If omitted, considered generally applicable.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_interventionPrescription != null) 
                    hash = hash * 23 + _interventionPrescription.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionPrescriptionAppropriateGradeLevel).GradeLevelDescriptor != null) 
                    hash = hash * 23 + (this as IInterventionPrescriptionAppropriateGradeLevel).GradeLevelDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionPrescriptionAppropriateGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionPrescriptionAppropriateGradeLevel) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionPrescriptionAppropriateSex table of the InterventionPrescription aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionPrescriptionAppropriateSex : IInterventionPrescriptionAppropriateSex, IInterventionPrescriptionAppropriateSexSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IInterventionPrescription _interventionPrescription;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IInterventionPrescription IInterventionPrescriptionAppropriateSex.InterventionPrescription
        {
            get { return _interventionPrescription; }
            set { _interventionPrescription = value; }
        }

        internal IInterventionPrescription InterventionPrescription
        {
            set { _interventionPrescription = value; }
        }

        /// <summary>
        /// Sexes for the InterventionPrescription. If omitted, considered generally applicable.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexType"), NaturalKeyMember]
        public string SexType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_interventionPrescription != null) 
                    hash = hash * 23 + _interventionPrescription.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionPrescriptionAppropriateSex).SexType != null) 
                    hash = hash * 23 + (this as IInterventionPrescriptionAppropriateSex).SexType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionPrescriptionAppropriateSex)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionPrescriptionAppropriateSex) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionPrescriptionDiagnosis table of the InterventionPrescription aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionPrescriptionDiagnosis : IInterventionPrescriptionDiagnosis, IInterventionPrescriptionDiagnosisSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IInterventionPrescription _interventionPrescription;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IInterventionPrescription IInterventionPrescriptionDiagnosis.InterventionPrescription
        {
            get { return _interventionPrescription; }
            set { _interventionPrescription = value; }
        }

        internal IInterventionPrescription InterventionPrescription
        {
            set { _interventionPrescription = value; }
        }

        /// <summary>
        /// Targeted purpose of the InterventionPrescription (e.g., attendance issue, dropout risk).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="diagnosisDescriptor"), NaturalKeyMember]
        public string DiagnosisDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_interventionPrescription != null) 
                    hash = hash * 23 + _interventionPrescription.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionPrescriptionDiagnosis).DiagnosisDescriptor != null) 
                    hash = hash * 23 + (this as IInterventionPrescriptionDiagnosis).DiagnosisDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionPrescriptionDiagnosis)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionPrescriptionDiagnosis) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionPrescriptionEducationContent table of the InterventionPrescription aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionPrescriptionEducationContent : IInterventionPrescriptionEducationContent, IInterventionPrescriptionEducationContentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationContentReferenceExplicitlyAssigned;
        private EducationContent.EducationContentReference _educationContentReference;
        private EducationContent.EducationContentReference ImplicitEducationContentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationContentReference == null && !_educationContentReferenceExplicitlyAssigned)
                    _educationContentReference = new EducationContent.EducationContentReference();

                return _educationContentReference;
            }
        }

        [DataMember(Name="educationContentReference")][NaturalKeyMember]
        public EducationContent.EducationContentReference EducationContentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationContentReference != null
                    && (_educationContentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationContentReference.IsReferenceFullyDefined()))
                    return ImplicitEducationContentReference;

                return null;
            }
            set 
            { 
                _educationContentReferenceExplicitlyAssigned = true;
                _educationContentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IInterventionPrescription _interventionPrescription;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IInterventionPrescription IInterventionPrescriptionEducationContent.InterventionPrescription
        {
            get { return _interventionPrescription; }
            set { _interventionPrescription = value; }
        }

        internal IInterventionPrescription InterventionPrescription
        {
            set { _interventionPrescription = value; }
        }

        /// <summary>
        /// A unique identifier for the EducationContent.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IInterventionPrescriptionEducationContent.ContentIdentifier
        {
            get
            {
                if (ImplicitEducationContentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationContentReference.IsReferenceFullyDefined()))
                    return ImplicitEducationContentReference.ContentIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationContent
                _educationContentReferenceExplicitlyAssigned = false;
                ImplicitEducationContentReference.ContentIdentifier = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_interventionPrescription != null) 
                    hash = hash * 23 + _interventionPrescription.GetHashCode();
 
                //Referenced Property
                if ((this as IInterventionPrescriptionEducationContent).ContentIdentifier != null) 
                    hash = hash * 23 + (this as IInterventionPrescriptionEducationContent).ContentIdentifier.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionPrescriptionEducationContent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionPrescriptionEducationContent) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionPrescriptionLearningResourceMetadataURI table of the InterventionPrescription aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionPrescriptionLearningResourceMetadataURI : IInterventionPrescriptionLearningResourceMetadataURI, IInterventionPrescriptionLearningResourceMetadataURISynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IInterventionPrescription _interventionPrescription;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IInterventionPrescription IInterventionPrescriptionLearningResourceMetadataURI.InterventionPrescription
        {
            get { return _interventionPrescription; }
            set { _interventionPrescription = value; }
        }

        internal IInterventionPrescription InterventionPrescription
        {
            set { _interventionPrescription = value; }
        }

        /// <summary>
        /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="learningResourceMetadataURI"), NaturalKeyMember]
        public string LearningResourceMetadataURI { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_interventionPrescription != null) 
                    hash = hash * 23 + _interventionPrescription.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionPrescriptionLearningResourceMetadataURI).LearningResourceMetadataURI != null) 
                    hash = hash * 23 + (this as IInterventionPrescriptionLearningResourceMetadataURI).LearningResourceMetadataURI.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionPrescriptionLearningResourceMetadataURI)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionPrescriptionLearningResourceMetadataURI) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionPrescriptionPopulationServed table of the InterventionPrescription aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionPrescriptionPopulationServed : IInterventionPrescriptionPopulationServed, IInterventionPrescriptionPopulationServedSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IInterventionPrescription _interventionPrescription;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IInterventionPrescription IInterventionPrescriptionPopulationServed.InterventionPrescription
        {
            get { return _interventionPrescription; }
            set { _interventionPrescription = value; }
        }

        internal IInterventionPrescription InterventionPrescription
        {
            set { _interventionPrescription = value; }
        }

        /// <summary>
        /// A subset of students that are the focus of the InterventionPrescription.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="populationServedType"), NaturalKeyMember]
        public string PopulationServedType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_interventionPrescription != null) 
                    hash = hash * 23 + _interventionPrescription.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionPrescriptionPopulationServed).PopulationServedType != null) 
                    hash = hash * 23 + (this as IInterventionPrescriptionPopulationServed).PopulationServedType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionPrescriptionPopulationServed)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionPrescriptionPopulationServed) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionPrescriptionURI table of the InterventionPrescription aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionPrescriptionURI : IInterventionPrescriptionURI, IInterventionPrescriptionURISynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IInterventionPrescription _interventionPrescription;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IInterventionPrescription IInterventionPrescriptionURI.InterventionPrescription
        {
            get { return _interventionPrescription; }
            set { _interventionPrescription = value; }
        }

        internal IInterventionPrescription InterventionPrescription
        {
            set { _interventionPrescription = value; }
        }

        /// <summary>
        /// The URI (typical a URL) pointing to an education content item.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="uri"), NaturalKeyMember]
        public string URI { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_interventionPrescription != null) 
                    hash = hash * 23 + _interventionPrescription.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionPrescriptionURI).URI != null) 
                    hash = hash * 23 + (this as IInterventionPrescriptionURI).URI.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionPrescriptionURI)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionPrescriptionURI) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: InterventionStudy

namespace EdFi.Ods.Api.Models.Resources.V2.InterventionStudy
{
    /// <summary>
    /// Represents a reference to the InterventionStudy resource.
    /// </summary>
    [DataContract]
    public class InterventionStudyReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="identificationCode"), NaturalKeyMember]
        public string InterventionStudyIdentificationCode { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "InterventionStudy",
                            Href = "/interventionStudies"
                                    + "?educationOrganizationId=" + EducationOrganizationId            
                                    + "&identificationCode=" + WebUtility.UrlEncode(InterventionStudyIdentificationCode)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int)
                && InterventionStudyIdentificationCode != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.InterventionStudy table of the InterventionStudy aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionStudy : IInterventionStudy, IHasETag, IInterventionStudySynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public InterventionStudy()
        {
            InterventionStudyAppropriateGradeLevels = new List<InterventionStudyAppropriateGradeLevel>();
            InterventionStudyAppropriateSexes = new List<InterventionStudyAppropriateSex>();
            InterventionStudyEducationContents = new List<InterventionStudyEducationContent>();
            InterventionStudyInterventionEffectivenesses = new List<InterventionStudyInterventionEffectiveness>();
            InterventionStudyLearningResourceMetadataURIs = new List<InterventionStudyLearningResourceMetadataURI>();
            InterventionStudyPopulationServeds = new List<InterventionStudyPopulationServed>();
            InterventionStudyStateAbbreviations = new List<InterventionStudyStateAbbreviation>();
            InterventionStudyURIs = new List<InterventionStudyURI>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the InterventionStudy resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        private bool _interventionPrescriptionReferenceExplicitlyAssigned;
        private InterventionPrescription.InterventionPrescriptionReference _interventionPrescriptionReference;
        private InterventionPrescription.InterventionPrescriptionReference ImplicitInterventionPrescriptionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_interventionPrescriptionReference == null && !_interventionPrescriptionReferenceExplicitlyAssigned)
                    _interventionPrescriptionReference = new InterventionPrescription.InterventionPrescriptionReference();

                return _interventionPrescriptionReference;
            }
        }

        [DataMember(Name="interventionPrescriptionReference")]
        public InterventionPrescription.InterventionPrescriptionReference InterventionPrescriptionReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitInterventionPrescriptionReference != null
                    && (_interventionPrescriptionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitInterventionPrescriptionReference.IsReferenceFullyDefined()))
                    return ImplicitInterventionPrescriptionReference;

                return null;
            }
            set 
            { 
                _interventionPrescriptionReferenceExplicitlyAssigned = true;
                _interventionPrescriptionReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IInterventionStudy.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode"), NaturalKeyMember]
        public string InterventionStudyIdentificationCode { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IInterventionStudy).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IInterventionStudy).EducationOrganizationId.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionStudy).InterventionStudyIdentificationCode != null) 
                    hash = hash * 23 + (this as IInterventionStudy).InterventionStudyIdentificationCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The way in which an intervention was implemented: individual, small group, whole class, or whole school.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="deliveryMethodType")]
        public string DeliveryMethodType { get; set; }

        /// <summary>
        /// The way in which an intervention is used: curriculum, supplement, or practice.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="interventionClassType")]
        public string InterventionClassType { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IInterventionStudy.InterventionPrescriptionEducationOrganizationId
        {
            get
            {
                if (ImplicitInterventionPrescriptionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitInterventionPrescriptionReference.IsReferenceFullyDefined()))
                    return ImplicitInterventionPrescriptionReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // InterventionPrescription
                _interventionPrescriptionReferenceExplicitlyAssigned = false;
                ImplicitInterventionPrescriptionReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IInterventionStudy.InterventionPrescriptionIdentificationCode
        {
            get
            {
                if (ImplicitInterventionPrescriptionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitInterventionPrescriptionReference.IsReferenceFullyDefined()))
                    return ImplicitInterventionPrescriptionReference.InterventionPrescriptionIdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // InterventionPrescription
                _interventionPrescriptionReferenceExplicitlyAssigned = false;
                ImplicitInterventionPrescriptionReference.InterventionPrescriptionIdentificationCode = value;
            }
        }

        /// <summary>
        /// The number of participants observed in the study.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="participants")]
        public int Participants { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<InterventionStudyAppropriateGradeLevel> _interventionStudyAppropriateGradeLevels;
        private IList<IInterventionStudyAppropriateGradeLevel> _interventionStudyAppropriateGradeLevelsCovariant;

        [DataMember(Name="appropriateGradeLevels")]
        public IList<InterventionStudyAppropriateGradeLevel> InterventionStudyAppropriateGradeLevels 
        { 
            get { return _interventionStudyAppropriateGradeLevels; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionStudyAppropriateGradeLevel>(value,
                    (s, e) => ((IInterventionStudyAppropriateGradeLevel)e.Item).InterventionStudy = this);
                _interventionStudyAppropriateGradeLevels = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionStudyAppropriateGradeLevel, InterventionStudyAppropriateGradeLevel>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionStudyAppropriateGradeLevel)e.Item).InterventionStudy = this;
                _interventionStudyAppropriateGradeLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionStudyAppropriateGradeLevel> IInterventionStudy.InterventionStudyAppropriateGradeLevels
        {
            get { return _interventionStudyAppropriateGradeLevelsCovariant; }
            set { InterventionStudyAppropriateGradeLevels = new List<InterventionStudyAppropriateGradeLevel>(value.Cast<InterventionStudyAppropriateGradeLevel>()); }
        }

        private IList<InterventionStudyAppropriateSex> _interventionStudyAppropriateSexes;
        private IList<IInterventionStudyAppropriateSex> _interventionStudyAppropriateSexesCovariant;

        [DataMember(Name="appropriateSexes")]
        public IList<InterventionStudyAppropriateSex> InterventionStudyAppropriateSexes 
        { 
            get { return _interventionStudyAppropriateSexes; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionStudyAppropriateSex>(value,
                    (s, e) => ((IInterventionStudyAppropriateSex)e.Item).InterventionStudy = this);
                _interventionStudyAppropriateSexes = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionStudyAppropriateSex, InterventionStudyAppropriateSex>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionStudyAppropriateSex)e.Item).InterventionStudy = this;
                _interventionStudyAppropriateSexesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionStudyAppropriateSex> IInterventionStudy.InterventionStudyAppropriateSexes
        {
            get { return _interventionStudyAppropriateSexesCovariant; }
            set { InterventionStudyAppropriateSexes = new List<InterventionStudyAppropriateSex>(value.Cast<InterventionStudyAppropriateSex>()); }
        }

        private IList<InterventionStudyEducationContent> _interventionStudyEducationContents;
        private IList<IInterventionStudyEducationContent> _interventionStudyEducationContentsCovariant;

        [DataMember(Name="educationContents")]
        public IList<InterventionStudyEducationContent> InterventionStudyEducationContents 
        { 
            get { return _interventionStudyEducationContents; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionStudyEducationContent>(value,
                    (s, e) => ((IInterventionStudyEducationContent)e.Item).InterventionStudy = this);
                _interventionStudyEducationContents = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionStudyEducationContent, InterventionStudyEducationContent>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionStudyEducationContent)e.Item).InterventionStudy = this;
                _interventionStudyEducationContentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionStudyEducationContent> IInterventionStudy.InterventionStudyEducationContents
        {
            get { return _interventionStudyEducationContentsCovariant; }
            set { InterventionStudyEducationContents = new List<InterventionStudyEducationContent>(value.Cast<InterventionStudyEducationContent>()); }
        }

        private IList<InterventionStudyInterventionEffectiveness> _interventionStudyInterventionEffectivenesses;
        private IList<IInterventionStudyInterventionEffectiveness> _interventionStudyInterventionEffectivenessesCovariant;

        [DataMember(Name="interventionEffectivenesses")]
        public IList<InterventionStudyInterventionEffectiveness> InterventionStudyInterventionEffectivenesses 
        { 
            get { return _interventionStudyInterventionEffectivenesses; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionStudyInterventionEffectiveness>(value,
                    (s, e) => ((IInterventionStudyInterventionEffectiveness)e.Item).InterventionStudy = this);
                _interventionStudyInterventionEffectivenesses = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionStudyInterventionEffectiveness, InterventionStudyInterventionEffectiveness>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionStudyInterventionEffectiveness)e.Item).InterventionStudy = this;
                _interventionStudyInterventionEffectivenessesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionStudyInterventionEffectiveness> IInterventionStudy.InterventionStudyInterventionEffectivenesses
        {
            get { return _interventionStudyInterventionEffectivenessesCovariant; }
            set { InterventionStudyInterventionEffectivenesses = new List<InterventionStudyInterventionEffectiveness>(value.Cast<InterventionStudyInterventionEffectiveness>()); }
        }

        private IList<InterventionStudyLearningResourceMetadataURI> _interventionStudyLearningResourceMetadataURIs;
        private IList<IInterventionStudyLearningResourceMetadataURI> _interventionStudyLearningResourceMetadataURIsCovariant;

        [DataMember(Name="learningResourceMetadataURIs")]
        public IList<InterventionStudyLearningResourceMetadataURI> InterventionStudyLearningResourceMetadataURIs 
        { 
            get { return _interventionStudyLearningResourceMetadataURIs; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionStudyLearningResourceMetadataURI>(value,
                    (s, e) => ((IInterventionStudyLearningResourceMetadataURI)e.Item).InterventionStudy = this);
                _interventionStudyLearningResourceMetadataURIs = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionStudyLearningResourceMetadataURI, InterventionStudyLearningResourceMetadataURI>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionStudyLearningResourceMetadataURI)e.Item).InterventionStudy = this;
                _interventionStudyLearningResourceMetadataURIsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionStudyLearningResourceMetadataURI> IInterventionStudy.InterventionStudyLearningResourceMetadataURIs
        {
            get { return _interventionStudyLearningResourceMetadataURIsCovariant; }
            set { InterventionStudyLearningResourceMetadataURIs = new List<InterventionStudyLearningResourceMetadataURI>(value.Cast<InterventionStudyLearningResourceMetadataURI>()); }
        }

        private IList<InterventionStudyPopulationServed> _interventionStudyPopulationServeds;
        private IList<IInterventionStudyPopulationServed> _interventionStudyPopulationServedsCovariant;

        [DataMember(Name="populationServeds")]
        public IList<InterventionStudyPopulationServed> InterventionStudyPopulationServeds 
        { 
            get { return _interventionStudyPopulationServeds; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionStudyPopulationServed>(value,
                    (s, e) => ((IInterventionStudyPopulationServed)e.Item).InterventionStudy = this);
                _interventionStudyPopulationServeds = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionStudyPopulationServed, InterventionStudyPopulationServed>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionStudyPopulationServed)e.Item).InterventionStudy = this;
                _interventionStudyPopulationServedsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionStudyPopulationServed> IInterventionStudy.InterventionStudyPopulationServeds
        {
            get { return _interventionStudyPopulationServedsCovariant; }
            set { InterventionStudyPopulationServeds = new List<InterventionStudyPopulationServed>(value.Cast<InterventionStudyPopulationServed>()); }
        }

        private IList<InterventionStudyStateAbbreviation> _interventionStudyStateAbbreviations;
        private IList<IInterventionStudyStateAbbreviation> _interventionStudyStateAbbreviationsCovariant;

        [DataMember(Name="stateAbbreviations")]
        public IList<InterventionStudyStateAbbreviation> InterventionStudyStateAbbreviations 
        { 
            get { return _interventionStudyStateAbbreviations; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionStudyStateAbbreviation>(value,
                    (s, e) => ((IInterventionStudyStateAbbreviation)e.Item).InterventionStudy = this);
                _interventionStudyStateAbbreviations = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionStudyStateAbbreviation, InterventionStudyStateAbbreviation>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionStudyStateAbbreviation)e.Item).InterventionStudy = this;
                _interventionStudyStateAbbreviationsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionStudyStateAbbreviation> IInterventionStudy.InterventionStudyStateAbbreviations
        {
            get { return _interventionStudyStateAbbreviationsCovariant; }
            set { InterventionStudyStateAbbreviations = new List<InterventionStudyStateAbbreviation>(value.Cast<InterventionStudyStateAbbreviation>()); }
        }

        private IList<InterventionStudyURI> _interventionStudyURIs;
        private IList<IInterventionStudyURI> _interventionStudyURIsCovariant;

        [DataMember(Name="uris")]
        public IList<InterventionStudyURI> InterventionStudyURIs 
        { 
            get { return _interventionStudyURIs; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<InterventionStudyURI>(value,
                    (s, e) => ((IInterventionStudyURI)e.Item).InterventionStudy = this);
                _interventionStudyURIs = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IInterventionStudyURI, InterventionStudyURI>(value);
                covariantList.ItemAdded += (s, e) => ((IInterventionStudyURI)e.Item).InterventionStudy = this;
                _interventionStudyURIsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IInterventionStudyURI> IInterventionStudy.InterventionStudyURIs
        {
            get { return _interventionStudyURIsCovariant; }
            set { InterventionStudyURIs = new List<InterventionStudyURI>(value.Cast<InterventionStudyURI>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_interventionStudyAppropriateGradeLevels != null) foreach (var item in _interventionStudyAppropriateGradeLevels)
            {
                item.InterventionStudy = this;
            }
            
            if (_interventionStudyAppropriateSexes != null) foreach (var item in _interventionStudyAppropriateSexes)
            {
                item.InterventionStudy = this;
            }
            
            if (_interventionStudyEducationContents != null) foreach (var item in _interventionStudyEducationContents)
            {
                item.InterventionStudy = this;
            }
            
            if (_interventionStudyInterventionEffectivenesses != null) foreach (var item in _interventionStudyInterventionEffectivenesses)
            {
                item.InterventionStudy = this;
            }
            
            if (_interventionStudyLearningResourceMetadataURIs != null) foreach (var item in _interventionStudyLearningResourceMetadataURIs)
            {
                item.InterventionStudy = this;
            }
            
            if (_interventionStudyPopulationServeds != null) foreach (var item in _interventionStudyPopulationServeds)
            {
                item.InterventionStudy = this;
            }
            
            if (_interventionStudyStateAbbreviations != null) foreach (var item in _interventionStudyStateAbbreviations)
            {
                item.InterventionStudy = this;
            }
            
            if (_interventionStudyURIs != null) foreach (var item in _interventionStudyURIs)
            {
                item.InterventionStudy = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionStudy)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionStudy) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IInterventionStudySynchronizationSourceSupport.IsDeliveryMethodTypeSupported                               { get { return true; } set { } }
 
        bool IInterventionStudySynchronizationSourceSupport.IsInterventionClassTypeSupported                            { get { return true; } set { } }
 
        bool IInterventionStudySynchronizationSourceSupport.IsInterventionPrescriptionEducationOrganizationIdSupported  { get { return true; } set { } }
 
        bool IInterventionStudySynchronizationSourceSupport.IsInterventionPrescriptionIdentificationCodeSupported       { get { return true; } set { } }
 
        bool IInterventionStudySynchronizationSourceSupport.IsInterventionStudyAppropriateGradeLevelsSupported          { get { return true; } set { } }
 
        bool IInterventionStudySynchronizationSourceSupport.IsInterventionStudyAppropriateSexesSupported                { get { return true; } set { } }
 
        bool IInterventionStudySynchronizationSourceSupport.IsInterventionStudyEducationContentsSupported               { get { return true; } set { } }
 
        bool IInterventionStudySynchronizationSourceSupport.IsInterventionStudyInterventionEffectivenessesSupported     { get { return true; } set { } }
 
        bool IInterventionStudySynchronizationSourceSupport.IsInterventionStudyLearningResourceMetadataURIsSupported    { get { return true; } set { } }
 
        bool IInterventionStudySynchronizationSourceSupport.IsInterventionStudyPopulationServedsSupported               { get { return true; } set { } }
 
        bool IInterventionStudySynchronizationSourceSupport.IsInterventionStudyStateAbbreviationsSupported              { get { return true; } set { } }
 
        bool IInterventionStudySynchronizationSourceSupport.IsInterventionStudyURIsSupported                            { get { return true; } set { } }
 
        bool IInterventionStudySynchronizationSourceSupport.IsParticipantsSupported                                     { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IInterventionStudyAppropriateGradeLevel, bool> IInterventionStudySynchronizationSourceSupport.IsInterventionStudyAppropriateGradeLevelIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionStudyAppropriateSex, bool> IInterventionStudySynchronizationSourceSupport.IsInterventionStudyAppropriateSexIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionStudyEducationContent, bool> IInterventionStudySynchronizationSourceSupport.IsInterventionStudyEducationContentIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionStudyInterventionEffectiveness, bool> IInterventionStudySynchronizationSourceSupport.IsInterventionStudyInterventionEffectivenessIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionStudyLearningResourceMetadataURI, bool> IInterventionStudySynchronizationSourceSupport.IsInterventionStudyLearningResourceMetadataURIIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionStudyPopulationServed, bool> IInterventionStudySynchronizationSourceSupport.IsInterventionStudyPopulationServedIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionStudyStateAbbreviation, bool> IInterventionStudySynchronizationSourceSupport.IsInterventionStudyStateAbbreviationIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IInterventionStudyURI, bool> IInterventionStudySynchronizationSourceSupport.IsInterventionStudyURIIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionStudyAppropriateGradeLevel table of the InterventionStudy aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionStudyAppropriateGradeLevel : IInterventionStudyAppropriateGradeLevel, IInterventionStudyAppropriateGradeLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IInterventionStudy _interventionStudy;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IInterventionStudy IInterventionStudyAppropriateGradeLevel.InterventionStudy
        {
            get { return _interventionStudy; }
            set { _interventionStudy = value; }
        }

        internal IInterventionStudy InterventionStudy
        {
            set { _interventionStudy = value; }
        }

        /// <summary>
        /// Grade levels participating in this study.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_interventionStudy != null) 
                    hash = hash * 23 + _interventionStudy.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionStudyAppropriateGradeLevel).GradeLevelDescriptor != null) 
                    hash = hash * 23 + (this as IInterventionStudyAppropriateGradeLevel).GradeLevelDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionStudyAppropriateGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionStudyAppropriateGradeLevel) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionStudyAppropriateSex table of the InterventionStudy aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionStudyAppropriateSex : IInterventionStudyAppropriateSex, IInterventionStudyAppropriateSexSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IInterventionStudy _interventionStudy;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IInterventionStudy IInterventionStudyAppropriateSex.InterventionStudy
        {
            get { return _interventionStudy; }
            set { _interventionStudy = value; }
        }

        internal IInterventionStudy InterventionStudy
        {
            set { _interventionStudy = value; }
        }

        /// <summary>
        /// Sexes participating in this study. If omitted, considered generally applicable.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexType"), NaturalKeyMember]
        public string SexType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_interventionStudy != null) 
                    hash = hash * 23 + _interventionStudy.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionStudyAppropriateSex).SexType != null) 
                    hash = hash * 23 + (this as IInterventionStudyAppropriateSex).SexType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionStudyAppropriateSex)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionStudyAppropriateSex) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionStudyEducationContent table of the InterventionStudy aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionStudyEducationContent : IInterventionStudyEducationContent, IInterventionStudyEducationContentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationContentReferenceExplicitlyAssigned;
        private EducationContent.EducationContentReference _educationContentReference;
        private EducationContent.EducationContentReference ImplicitEducationContentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationContentReference == null && !_educationContentReferenceExplicitlyAssigned)
                    _educationContentReference = new EducationContent.EducationContentReference();

                return _educationContentReference;
            }
        }

        [DataMember(Name="educationContentReference")][NaturalKeyMember]
        public EducationContent.EducationContentReference EducationContentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationContentReference != null
                    && (_educationContentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationContentReference.IsReferenceFullyDefined()))
                    return ImplicitEducationContentReference;

                return null;
            }
            set 
            { 
                _educationContentReferenceExplicitlyAssigned = true;
                _educationContentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IInterventionStudy _interventionStudy;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IInterventionStudy IInterventionStudyEducationContent.InterventionStudy
        {
            get { return _interventionStudy; }
            set { _interventionStudy = value; }
        }

        internal IInterventionStudy InterventionStudy
        {
            set { _interventionStudy = value; }
        }

        /// <summary>
        /// A unique identifier for the EducationContent.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IInterventionStudyEducationContent.ContentIdentifier
        {
            get
            {
                if (ImplicitEducationContentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationContentReference.IsReferenceFullyDefined()))
                    return ImplicitEducationContentReference.ContentIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationContent
                _educationContentReferenceExplicitlyAssigned = false;
                ImplicitEducationContentReference.ContentIdentifier = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_interventionStudy != null) 
                    hash = hash * 23 + _interventionStudy.GetHashCode();
 
                //Referenced Property
                if ((this as IInterventionStudyEducationContent).ContentIdentifier != null) 
                    hash = hash * 23 + (this as IInterventionStudyEducationContent).ContentIdentifier.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionStudyEducationContent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionStudyEducationContent) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionStudyInterventionEffectiveness table of the InterventionStudy aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionStudyInterventionEffectiveness : IInterventionStudyInterventionEffectiveness, IInterventionStudyInterventionEffectivenessSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IInterventionStudy _interventionStudy;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IInterventionStudy IInterventionStudyInterventionEffectiveness.InterventionStudy
        {
            get { return _interventionStudy; }
            set { _interventionStudy = value; }
        }

        internal IInterventionStudy InterventionStudy
        {
            set { _interventionStudy = value; }
        }

        /// <summary>
        /// Targeted purpose of the intervention (e.g., attendance issue, dropout risk) for which the effectiveness is measured.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="diagnosisDescriptor"), NaturalKeyMember]
        public string DiagnosisDescriptor { get; set; }

        /// <summary>
        /// Grade level for which effectiveness is measured.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }

        /// <summary>
        /// Population for which effectiveness is measured.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="populationServedType"), NaturalKeyMember]
        public string PopulationServedType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_interventionStudy != null) 
                    hash = hash * 23 + _interventionStudy.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionStudyInterventionEffectiveness).DiagnosisDescriptor != null) 
                    hash = hash * 23 + (this as IInterventionStudyInterventionEffectiveness).DiagnosisDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionStudyInterventionEffectiveness).GradeLevelDescriptor != null) 
                    hash = hash * 23 + (this as IInterventionStudyInterventionEffectiveness).GradeLevelDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionStudyInterventionEffectiveness).PopulationServedType != null) 
                    hash = hash * 23 + (this as IInterventionStudyInterventionEffectiveness).PopulationServedType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Along a percentile distribution of students, the improvement index represents the change in an average student's percentile rank that is considered to be due to the intervention.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="improvementIndex")]
        public int? ImprovementIndex { get; set; }

        /// <summary>
        /// An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="interventionEffectivenessRatingType")]
        public string InterventionEffectivenessRatingType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionStudyInterventionEffectiveness)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionStudyInterventionEffectiveness) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IInterventionStudyInterventionEffectivenessSynchronizationSourceSupport.IsImprovementIndexSupported                     { get { return true; } set { } }
 
        bool IInterventionStudyInterventionEffectivenessSynchronizationSourceSupport.IsInterventionEffectivenessRatingTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionStudyLearningResourceMetadataURI table of the InterventionStudy aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionStudyLearningResourceMetadataURI : IInterventionStudyLearningResourceMetadataURI, IInterventionStudyLearningResourceMetadataURISynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IInterventionStudy _interventionStudy;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IInterventionStudy IInterventionStudyLearningResourceMetadataURI.InterventionStudy
        {
            get { return _interventionStudy; }
            set { _interventionStudy = value; }
        }

        internal IInterventionStudy InterventionStudy
        {
            set { _interventionStudy = value; }
        }

        /// <summary>
        /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="learningResourceMetadataURI"), NaturalKeyMember]
        public string LearningResourceMetadataURI { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_interventionStudy != null) 
                    hash = hash * 23 + _interventionStudy.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionStudyLearningResourceMetadataURI).LearningResourceMetadataURI != null) 
                    hash = hash * 23 + (this as IInterventionStudyLearningResourceMetadataURI).LearningResourceMetadataURI.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionStudyLearningResourceMetadataURI)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionStudyLearningResourceMetadataURI) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionStudyPopulationServed table of the InterventionStudy aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionStudyPopulationServed : IInterventionStudyPopulationServed, IInterventionStudyPopulationServedSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IInterventionStudy _interventionStudy;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IInterventionStudy IInterventionStudyPopulationServed.InterventionStudy
        {
            get { return _interventionStudy; }
            set { _interventionStudy = value; }
        }

        internal IInterventionStudy InterventionStudy
        {
            set { _interventionStudy = value; }
        }

        /// <summary>
        /// A subset of students that are the focus of the InterventionStudy.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="populationServedType"), NaturalKeyMember]
        public string PopulationServedType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_interventionStudy != null) 
                    hash = hash * 23 + _interventionStudy.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionStudyPopulationServed).PopulationServedType != null) 
                    hash = hash * 23 + (this as IInterventionStudyPopulationServed).PopulationServedType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionStudyPopulationServed)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionStudyPopulationServed) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionStudyStateAbbreviation table of the InterventionStudy aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionStudyStateAbbreviation : IInterventionStudyStateAbbreviation, IInterventionStudyStateAbbreviationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IInterventionStudy _interventionStudy;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IInterventionStudy IInterventionStudyStateAbbreviation.InterventionStudy
        {
            get { return _interventionStudy; }
            set { _interventionStudy = value; }
        }

        internal IInterventionStudy InterventionStudy
        {
            set { _interventionStudy = value; }
        }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area, the school system of which the participants of the study are considered to be a part.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationType"), NaturalKeyMember]
        public string StateAbbreviationType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_interventionStudy != null) 
                    hash = hash * 23 + _interventionStudy.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionStudyStateAbbreviation).StateAbbreviationType != null) 
                    hash = hash * 23 + (this as IInterventionStudyStateAbbreviation).StateAbbreviationType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionStudyStateAbbreviation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionStudyStateAbbreviation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.InterventionStudyURI table of the InterventionStudy aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class InterventionStudyURI : IInterventionStudyURI, IInterventionStudyURISynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IInterventionStudy _interventionStudy;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IInterventionStudy IInterventionStudyURI.InterventionStudy
        {
            get { return _interventionStudy; }
            set { _interventionStudy = value; }
        }

        internal IInterventionStudy InterventionStudy
        {
            set { _interventionStudy = value; }
        }

        /// <summary>
        /// The URI (typical a URL) pointing to an education content item.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="uri"), NaturalKeyMember]
        public string URI { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_interventionStudy != null) 
                    hash = hash * 23 + _interventionStudy.GetHashCode();
 
                // Standard Property
                if ((this as IInterventionStudyURI).URI != null) 
                    hash = hash * 23 + (this as IInterventionStudyURI).URI.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IInterventionStudyURI)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IInterventionStudyURI) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: LanguageDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.LanguageDescriptor
{
    /// <summary>
    /// A class which represents the edfi.LanguageDescriptor table of the LanguageDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LanguageDescriptor : ILanguageDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, ILanguageDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the LanguageDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="languageDescriptorId"), NaturalKeyMember]
        public int LanguageDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return LanguageDescriptorId; }
            set { LanguageDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as ILanguageDescriptor).LanguageDescriptorId != null) 
                    hash = hash * 23 + (this as ILanguageDescriptor).LanguageDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageType")]
        public string LanguageType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILanguageDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILanguageDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ILanguageDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
 
        bool ILanguageDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
 
        bool ILanguageDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
 
        bool ILanguageDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
 
        bool ILanguageDescriptorSynchronizationSourceSupport.IsLanguageTypeSupported        { get { return true; } set { } }
 
        bool ILanguageDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
 
        bool ILanguageDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
 
        bool ILanguageDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: LanguageType

namespace EdFi.Ods.Api.Models.Resources.V2.LanguageType
{
    /// <summary>
    /// A class which represents the edfi.LanguageType table of the LanguageType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LanguageType : ILanguageType, IHasETag, ILanguageTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the LanguageType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Language
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="languageTypeId"), NaturalKeyMember]
        public int LanguageTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ILanguageType).LanguageTypeId != null) 
                    hash = hash * 23 + (this as ILanguageType).LanguageTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Language type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Language type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILanguageType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILanguageType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ILanguageTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ILanguageTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ILanguageTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: LanguageUseType

namespace EdFi.Ods.Api.Models.Resources.V2.LanguageUseType
{
    /// <summary>
    /// A class which represents the edfi.LanguageUseType table of the LanguageUseType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LanguageUseType : ILanguageUseType, IHasETag, ILanguageUseTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the LanguageUseType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for LanguageUse
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="languageUseTypeId"), NaturalKeyMember]
        public int LanguageUseTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ILanguageUseType).LanguageUseTypeId != null) 
                    hash = hash * 23 + (this as ILanguageUseType).LanguageUseTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the LanguageUse type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the LanguageUse type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILanguageUseType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILanguageUseType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ILanguageUseTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ILanguageUseTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ILanguageUseTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: LearningObjective

namespace EdFi.Ods.Api.Models.Resources.V2.LearningObjective
{
    /// <summary>
    /// Represents a reference to the LearningObjective resource.
    /// </summary>
    [DataContract]
    public class LearningObjectiveReference
    {
        [DataMember(Name="learningObjectiveId"), NaturalKeyMember]
        public string LearningObjectiveId { get; set; }

        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "LearningObjective",
                            Href = "/learningObjectives"
                                    + "?learningObjectiveId=" + WebUtility.UrlEncode(LearningObjectiveId)            
                                    + "&namespace=" + WebUtility.UrlEncode(Namespace)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return LearningObjectiveId != default(string)
                && Namespace != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.LearningObjective table of the LearningObjective aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LearningObjective : ILearningObjective, IHasETag, ILearningObjectiveSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public LearningObjective()
        {
            LearningObjectiveAcademicSubjects = new List<LearningObjectiveAcademicSubject>();
            LearningObjectiveGradeLevels = new List<LearningObjectiveGradeLevel>();
            LearningObjectiveLearningStandards = new List<LearningObjectiveLearningStandard>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the LearningObjective resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _parentLearningObjectiveReferenceExplicitlyAssigned;
        private LearningObjectiveReference _parentLearningObjectiveReference;
        private LearningObjectiveReference ImplicitParentLearningObjectiveReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_parentLearningObjectiveReference == null && !_parentLearningObjectiveReferenceExplicitlyAssigned)
                    _parentLearningObjectiveReference = new LearningObjectiveReference();

                return _parentLearningObjectiveReference;
            }
        }

        [DataMember(Name="parentLearningObjectiveReference")]
        public LearningObjectiveReference ParentLearningObjectiveReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitParentLearningObjectiveReference != null
                    && (_parentLearningObjectiveReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitParentLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitParentLearningObjectiveReference;

                return null;
            }
            set 
            { 
                _parentLearningObjectiveReferenceExplicitlyAssigned = true;
                _parentLearningObjectiveReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="learningObjectiveId"), NaturalKeyMember]
        public string LearningObjectiveId { get; set; }

        /// <summary>
        /// Namespace for the LearningObjective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ILearningObjective).LearningObjectiveId != null) 
                    hash = hash * 23 + (this as ILearningObjective).LearningObjectiveId.GetHashCode();
 
                // Standard Property
                if ((this as ILearningObjective).Namespace != null) 
                    hash = hash * 23 + (this as ILearningObjective).Namespace.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The description of the LearningObjective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Reflects the specific nomenclature used for the LearningObjective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nomenclature")]
        public string Nomenclature { get; set; }

        /// <summary>
        /// The designated title of the LearningObjective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="objective")]
        public string Objective { get; set; }

        /// <summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ILearningObjective.ParentLearningObjectiveId
        {
            get
            {
                if (ImplicitParentLearningObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitParentLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitParentLearningObjectiveReference.LearningObjectiveId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ParentLearningObjective
                _parentLearningObjectiveReferenceExplicitlyAssigned = false;
                ImplicitParentLearningObjectiveReference.LearningObjectiveId = value;
            }
        }

        /// <summary>
        /// Namespace for the LearningObjective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ILearningObjective.ParentNamespace
        {
            get
            {
                if (ImplicitParentLearningObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitParentLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitParentLearningObjectiveReference.Namespace;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ParentLearningObjective
                _parentLearningObjectiveReferenceExplicitlyAssigned = false;
                ImplicitParentLearningObjectiveReference.Namespace = value;
            }
        }

        /// <summary>
        /// One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningObjective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="successCriteria")]
        public string SuccessCriteria { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// contentStandard
        /// </summary> 
        [DataMember(Name = "contentStandard")]
        public LearningObjectiveContentStandard LearningObjectiveContentStandard { get; set; }

        ILearningObjectiveContentStandard ILearningObjective.LearningObjectiveContentStandard
        {
            get { return LearningObjectiveContentStandard; }
            set { LearningObjectiveContentStandard = (LearningObjectiveContentStandard) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<LearningObjectiveAcademicSubject> _learningObjectiveAcademicSubjects;
        private IList<ILearningObjectiveAcademicSubject> _learningObjectiveAcademicSubjectsCovariant;

        [DataMember(Name="academicSubjects")]
        public IList<LearningObjectiveAcademicSubject> LearningObjectiveAcademicSubjects 
        { 
            get { return _learningObjectiveAcademicSubjects; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<LearningObjectiveAcademicSubject>(value,
                    (s, e) => ((ILearningObjectiveAcademicSubject)e.Item).LearningObjective = this);
                _learningObjectiveAcademicSubjects = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ILearningObjectiveAcademicSubject, LearningObjectiveAcademicSubject>(value);
                covariantList.ItemAdded += (s, e) => ((ILearningObjectiveAcademicSubject)e.Item).LearningObjective = this;
                _learningObjectiveAcademicSubjectsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ILearningObjectiveAcademicSubject> ILearningObjective.LearningObjectiveAcademicSubjects
        {
            get { return _learningObjectiveAcademicSubjectsCovariant; }
            set { LearningObjectiveAcademicSubjects = new List<LearningObjectiveAcademicSubject>(value.Cast<LearningObjectiveAcademicSubject>()); }
        }

        private IList<LearningObjectiveGradeLevel> _learningObjectiveGradeLevels;
        private IList<ILearningObjectiveGradeLevel> _learningObjectiveGradeLevelsCovariant;

        [DataMember(Name="gradeLevels")]
        public IList<LearningObjectiveGradeLevel> LearningObjectiveGradeLevels 
        { 
            get { return _learningObjectiveGradeLevels; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<LearningObjectiveGradeLevel>(value,
                    (s, e) => ((ILearningObjectiveGradeLevel)e.Item).LearningObjective = this);
                _learningObjectiveGradeLevels = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ILearningObjectiveGradeLevel, LearningObjectiveGradeLevel>(value);
                covariantList.ItemAdded += (s, e) => ((ILearningObjectiveGradeLevel)e.Item).LearningObjective = this;
                _learningObjectiveGradeLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ILearningObjectiveGradeLevel> ILearningObjective.LearningObjectiveGradeLevels
        {
            get { return _learningObjectiveGradeLevelsCovariant; }
            set { LearningObjectiveGradeLevels = new List<LearningObjectiveGradeLevel>(value.Cast<LearningObjectiveGradeLevel>()); }
        }

        private IList<LearningObjectiveLearningStandard> _learningObjectiveLearningStandards;
        private IList<ILearningObjectiveLearningStandard> _learningObjectiveLearningStandardsCovariant;

        [DataMember(Name="learningStandards")]
        public IList<LearningObjectiveLearningStandard> LearningObjectiveLearningStandards 
        { 
            get { return _learningObjectiveLearningStandards; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<LearningObjectiveLearningStandard>(value,
                    (s, e) => ((ILearningObjectiveLearningStandard)e.Item).LearningObjective = this);
                _learningObjectiveLearningStandards = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ILearningObjectiveLearningStandard, LearningObjectiveLearningStandard>(value);
                covariantList.ItemAdded += (s, e) => ((ILearningObjectiveLearningStandard)e.Item).LearningObjective = this;
                _learningObjectiveLearningStandardsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ILearningObjectiveLearningStandard> ILearningObjective.LearningObjectiveLearningStandards
        {
            get { return _learningObjectiveLearningStandardsCovariant; }
            set { LearningObjectiveLearningStandards = new List<LearningObjectiveLearningStandard>(value.Cast<LearningObjectiveLearningStandard>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_learningObjectiveAcademicSubjects != null) foreach (var item in _learningObjectiveAcademicSubjects)
            {
                item.LearningObjective = this;
            }
            
            if (_learningObjectiveGradeLevels != null) foreach (var item in _learningObjectiveGradeLevels)
            {
                item.LearningObjective = this;
            }
            
            if (_learningObjectiveLearningStandards != null) foreach (var item in _learningObjectiveLearningStandards)
            {
                item.LearningObjective = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILearningObjective)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILearningObjective) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ILearningObjectiveSynchronizationSourceSupport.IsDescriptionSupported                         { get { return true; } set { } }
 
        bool ILearningObjectiveSynchronizationSourceSupport.IsLearningObjectiveAcademicSubjectsSupported   { get { return true; } set { } }
 
        bool ILearningObjectiveSynchronizationSourceSupport.IsLearningObjectiveContentStandardSupported    { get { return true; } set { } }
 
        bool ILearningObjectiveSynchronizationSourceSupport.IsLearningObjectiveGradeLevelsSupported        { get { return true; } set { } }
 
        bool ILearningObjectiveSynchronizationSourceSupport.IsLearningObjectiveLearningStandardsSupported  { get { return true; } set { } }
 
        bool ILearningObjectiveSynchronizationSourceSupport.IsNomenclatureSupported                        { get { return true; } set { } }
 
        bool ILearningObjectiveSynchronizationSourceSupport.IsObjectiveSupported                           { get { return true; } set { } }
 
        bool ILearningObjectiveSynchronizationSourceSupport.IsParentLearningObjectiveIdSupported           { get { return true; } set { } }
 
        bool ILearningObjectiveSynchronizationSourceSupport.IsParentNamespaceSupported                     { get { return true; } set { } }
 
        bool ILearningObjectiveSynchronizationSourceSupport.IsSuccessCriteriaSupported                     { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<ILearningObjectiveAcademicSubject, bool> ILearningObjectiveSynchronizationSourceSupport.IsLearningObjectiveAcademicSubjectIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<ILearningObjectiveGradeLevel, bool> ILearningObjectiveSynchronizationSourceSupport.IsLearningObjectiveGradeLevelIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<ILearningObjectiveLearningStandard, bool> ILearningObjectiveSynchronizationSourceSupport.IsLearningObjectiveLearningStandardIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.LearningObjectiveAcademicSubject table of the LearningObjective aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LearningObjectiveAcademicSubject : ILearningObjectiveAcademicSubject, ILearningObjectiveAcademicSubjectSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ILearningObjective _learningObjective;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ILearningObjective ILearningObjectiveAcademicSubject.LearningObjective
        {
            get { return _learningObjective; }
            set { _learningObjective = value; }
        }

        internal ILearningObjective LearningObjective
        {
            set { _learningObjective = value; }
        }

        /// <summary>
        /// The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="academicSubjectDescriptor"), NaturalKeyMember]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_learningObjective != null) 
                    hash = hash * 23 + _learningObjective.GetHashCode();
 
                // Standard Property
                if ((this as ILearningObjectiveAcademicSubject).AcademicSubjectDescriptor != null) 
                    hash = hash * 23 + (this as ILearningObjectiveAcademicSubject).AcademicSubjectDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILearningObjectiveAcademicSubject)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILearningObjectiveAcademicSubject) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.LearningObjectiveContentStandard table of the LearningObjective aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LearningObjectiveContentStandard : ILearningObjectiveContentStandard, ILearningObjectiveContentStandardSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public LearningObjectiveContentStandard()
        {
            LearningObjectiveContentStandardAuthors = new List<LearningObjectiveContentStandardAuthor>();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _mandatingEducationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _mandatingEducationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitMandatingEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_mandatingEducationOrganizationReference == null && !_mandatingEducationOrganizationReferenceExplicitlyAssigned)
                    _mandatingEducationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _mandatingEducationOrganizationReference;
            }
        }

        [DataMember(Name="mandatingEducationOrganizationReference")]
        public EducationOrganization.EducationOrganizationReference MandatingEducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitMandatingEducationOrganizationReference != null
                    && (_mandatingEducationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitMandatingEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitMandatingEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _mandatingEducationOrganizationReferenceExplicitlyAssigned = true;
                _mandatingEducationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ILearningObjective _learningObjective;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ILearningObjective ILearningObjectiveContentStandard.LearningObjective
        {
            get { return _learningObjective; }
            set { _learningObjective = value; }
        }

        internal ILearningObjective LearningObjective
        {
            set { _learningObjective = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_learningObjective != null) 
                    hash = hash * 23 + _learningObjective.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The beginning of the period during which this learning standard document is intended for use.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The end of the period during which this learning standard document is intended for use.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? ILearningObjectiveContentStandard.MandatingEducationOrganizationId
        {
            get
            {
                if (ImplicitMandatingEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitMandatingEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitMandatingEducationOrganizationReference.EducationOrganizationId;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // MandatingEducationOrganization
                _mandatingEducationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitMandatingEducationOrganizationReference.EducationOrganizationId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The date on which this content was first published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="publicationDate")]
        public DateTime? PublicationDate { get; set; }

        /// <summary>
        /// The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="publicationStatusType")]
        public string PublicationStatusType { get; set; }

        /// <summary>
        /// The year at which this content was first published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="publicationYear")]
        public short? PublicationYear { get; set; }

        /// <summary>
        /// The name of the content standard, for example Common Core.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// An unambiguous reference to the standards using a network-resolvable URI.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="uri")]
        public string URI { get; set; }

        /// <summary>
        /// The version identifier for the content.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="version")]
        public string Version { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<LearningObjectiveContentStandardAuthor> _learningObjectiveContentStandardAuthors;
        private IList<ILearningObjectiveContentStandardAuthor> _learningObjectiveContentStandardAuthorsCovariant;

        [DataMember(Name="authors")]
        public IList<LearningObjectiveContentStandardAuthor> LearningObjectiveContentStandardAuthors 
        { 
            get { return _learningObjectiveContentStandardAuthors; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<LearningObjectiveContentStandardAuthor>(value,
                    (s, e) => ((ILearningObjectiveContentStandardAuthor)e.Item).LearningObjectiveContentStandard = this);
                _learningObjectiveContentStandardAuthors = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ILearningObjectiveContentStandardAuthor, LearningObjectiveContentStandardAuthor>(value);
                covariantList.ItemAdded += (s, e) => ((ILearningObjectiveContentStandardAuthor)e.Item).LearningObjectiveContentStandard = this;
                _learningObjectiveContentStandardAuthorsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ILearningObjectiveContentStandardAuthor> ILearningObjectiveContentStandard.LearningObjectiveContentStandardAuthors
        {
            get { return _learningObjectiveContentStandardAuthorsCovariant; }
            set { LearningObjectiveContentStandardAuthors = new List<LearningObjectiveContentStandardAuthor>(value.Cast<LearningObjectiveContentStandardAuthor>()); }
        }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_learningObjectiveContentStandardAuthors != null) foreach (var item in _learningObjectiveContentStandardAuthors)
            {
                item.LearningObjectiveContentStandard = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILearningObjectiveContentStandard)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILearningObjectiveContentStandard) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ILearningObjectiveContentStandardSynchronizationSourceSupport.IsBeginDateSupported                                { get { return true; } set { } }
 
        bool ILearningObjectiveContentStandardSynchronizationSourceSupport.IsEndDateSupported                                  { get { return true; } set { } }
 
        bool ILearningObjectiveContentStandardSynchronizationSourceSupport.IsLearningObjectiveContentStandardAuthorsSupported  { get { return true; } set { } }
 
        bool ILearningObjectiveContentStandardSynchronizationSourceSupport.IsMandatingEducationOrganizationIdSupported         { get { return true; } set { } }
 
        bool ILearningObjectiveContentStandardSynchronizationSourceSupport.IsPublicationDateSupported                          { get { return true; } set { } }
 
        bool ILearningObjectiveContentStandardSynchronizationSourceSupport.IsPublicationStatusTypeSupported                    { get { return true; } set { } }
 
        bool ILearningObjectiveContentStandardSynchronizationSourceSupport.IsPublicationYearSupported                          { get { return true; } set { } }
 
        bool ILearningObjectiveContentStandardSynchronizationSourceSupport.IsTitleSupported                                    { get { return true; } set { } }
 
        bool ILearningObjectiveContentStandardSynchronizationSourceSupport.IsURISupported                                      { get { return true; } set { } }
 
        bool ILearningObjectiveContentStandardSynchronizationSourceSupport.IsVersionSupported                                  { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<ILearningObjectiveContentStandardAuthor, bool> ILearningObjectiveContentStandardSynchronizationSourceSupport.IsLearningObjectiveContentStandardAuthorIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.LearningObjectiveContentStandardAuthor table of the LearningObjective aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LearningObjectiveContentStandardAuthor : ILearningObjectiveContentStandardAuthor, ILearningObjectiveContentStandardAuthorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ILearningObjectiveContentStandard _learningObjectiveContentStandard;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ILearningObjectiveContentStandard ILearningObjectiveContentStandardAuthor.LearningObjectiveContentStandard
        {
            get { return _learningObjectiveContentStandard; }
            set { _learningObjectiveContentStandard = value; }
        }

        internal ILearningObjectiveContentStandard LearningObjectiveContentStandard
        {
            set { _learningObjectiveContentStandard = value; }
        }

        /// <summary>
        /// The person or organization chiefly responsible for the intellectual content of the standard.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="author"), NaturalKeyMember]
        public string Author { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_learningObjectiveContentStandard != null) 
                    hash = hash * 23 + _learningObjectiveContentStandard.GetHashCode();
 
                // Standard Property
                if ((this as ILearningObjectiveContentStandardAuthor).Author != null) 
                    hash = hash * 23 + (this as ILearningObjectiveContentStandardAuthor).Author.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILearningObjectiveContentStandardAuthor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILearningObjectiveContentStandardAuthor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.LearningObjectiveGradeLevel table of the LearningObjective aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LearningObjectiveGradeLevel : ILearningObjectiveGradeLevel, ILearningObjectiveGradeLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ILearningObjective _learningObjective;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ILearningObjective ILearningObjectiveGradeLevel.LearningObjective
        {
            get { return _learningObjective; }
            set { _learningObjective = value; }
        }

        internal ILearningObjective LearningObjective
        {
            set { _learningObjective = value; }
        }

        /// <summary>
        /// The grade level for which the LearningObjective is targeted. The semantics of null is assumed to mean that the learning objective is not associated with any grade level.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_learningObjective != null) 
                    hash = hash * 23 + _learningObjective.GetHashCode();
 
                // Standard Property
                if ((this as ILearningObjectiveGradeLevel).GradeLevelDescriptor != null) 
                    hash = hash * 23 + (this as ILearningObjectiveGradeLevel).GradeLevelDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILearningObjectiveGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILearningObjectiveGradeLevel) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.LearningObjectiveLearningStandard table of the LearningObjective aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LearningObjectiveLearningStandard : ILearningObjectiveLearningStandard, ILearningObjectiveLearningStandardSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _learningStandardReferenceExplicitlyAssigned;
        private LearningStandard.LearningStandardReference _learningStandardReference;
        private LearningStandard.LearningStandardReference ImplicitLearningStandardReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_learningStandardReference == null && !_learningStandardReferenceExplicitlyAssigned)
                    _learningStandardReference = new LearningStandard.LearningStandardReference();

                return _learningStandardReference;
            }
        }

        [DataMember(Name="learningStandardReference")][NaturalKeyMember]
        public LearningStandard.LearningStandardReference LearningStandardReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitLearningStandardReference != null
                    && (_learningStandardReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitLearningStandardReference.IsReferenceFullyDefined()))
                    return ImplicitLearningStandardReference;

                return null;
            }
            set 
            { 
                _learningStandardReferenceExplicitlyAssigned = true;
                _learningStandardReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ILearningObjective _learningObjective;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ILearningObjective ILearningObjectiveLearningStandard.LearningObjective
        {
            get { return _learningObjective; }
            set { _learningObjective = value; }
        }

        internal ILearningObjective LearningObjective
        {
            set { _learningObjective = value; }
        }

        /// <summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ILearningObjectiveLearningStandard.LearningStandardId
        {
            get
            {
                if (ImplicitLearningStandardReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitLearningStandardReference.IsReferenceFullyDefined()))
                    return ImplicitLearningStandardReference.LearningStandardId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // LearningStandard
                _learningStandardReferenceExplicitlyAssigned = false;
                ImplicitLearningStandardReference.LearningStandardId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_learningObjective != null) 
                    hash = hash * 23 + _learningObjective.GetHashCode();
 
                //Referenced Property
                if ((this as ILearningObjectiveLearningStandard).LearningStandardId != null) 
                    hash = hash * 23 + (this as ILearningObjectiveLearningStandard).LearningStandardId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILearningObjectiveLearningStandard)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILearningObjectiveLearningStandard) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: LearningStandard

namespace EdFi.Ods.Api.Models.Resources.V2.LearningStandard
{
    /// <summary>
    /// Represents a reference to the LearningStandard resource.
    /// </summary>
    [DataContract]
    public class LearningStandardReference
    {
        [DataMember(Name="learningStandardId"), NaturalKeyMember]
        public string LearningStandardId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "LearningStandard",
                            Href = "/learningStandards"
                                    + "?learningStandardId=" + WebUtility.UrlEncode(LearningStandardId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return LearningStandardId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.LearningStandard table of the LearningStandard aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LearningStandard : ILearningStandard, IHasETag, ILearningStandardSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public LearningStandard()
        {
            LearningStandardGradeLevels = new List<LearningStandardGradeLevel>();
            LearningStandardIdentificationCodes = new List<LearningStandardIdentificationCode>();
            LearningStandardPrerequisiteLearningStandards = new List<LearningStandardPrerequisiteLearningStandard>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the LearningStandard resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _parentLearningStandardReferenceExplicitlyAssigned;
        private LearningStandardReference _parentLearningStandardReference;
        private LearningStandardReference ImplicitParentLearningStandardReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_parentLearningStandardReference == null && !_parentLearningStandardReferenceExplicitlyAssigned)
                    _parentLearningStandardReference = new LearningStandardReference();

                return _parentLearningStandardReference;
            }
        }

        [DataMember(Name="parentLearningStandardReference")]
        public LearningStandardReference ParentLearningStandardReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitParentLearningStandardReference != null
                    && (_parentLearningStandardReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitParentLearningStandardReference.IsReferenceFullyDefined()))
                    return ImplicitParentLearningStandardReference;

                return null;
            }
            set 
            { 
                _parentLearningStandardReferenceExplicitlyAssigned = true;
                _parentLearningStandardReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="learningStandardId"), NaturalKeyMember]
        public string LearningStandardId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ILearningStandard).LearningStandardId != null) 
                    hash = hash * 23 + (this as ILearningStandard).LearningStandardId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Subject area for the LearningStandard.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="academicSubjectDescriptor")]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// The official Course Title with which this learning standard is associated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="courseTitle")]
        public string CourseTitle { get; set; }

        /// <summary>
        /// The text of the statement. The textual content that either describes a specific competency such as \"Apply the Pythagorean Theorem to determine unknown side lengths in right triangles in real-world and mathematical problems in two and three dimensions.\" or describes a less granular group of competencies within the taxonomy of the standards document, e.g. \"Understand and apply the Pythagorean Theorem,\" or \"Geometry\".
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="itemCode")]
        public string LearningStandardItemCode { get; set; }

        /// <summary>
        /// Namespace for the LearningStandard.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ILearningStandard.ParentLearningStandardId
        {
            get
            {
                if (ImplicitParentLearningStandardReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitParentLearningStandardReference.IsReferenceFullyDefined()))
                    return ImplicitParentLearningStandardReference.LearningStandardId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ParentLearningStandard
                _parentLearningStandardReferenceExplicitlyAssigned = false;
                ImplicitParentLearningStandardReference.LearningStandardId = value;
            }
        }

        /// <summary>
        /// One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningStandard.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="successCriteria")]
        public string SuccessCriteria { get; set; }

        /// <summary>
        /// An unambiguous reference to the statement using a network-resolvable URI.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="uri")]
        public string URI { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// contentStandard
        /// </summary> 
        [DataMember(Name = "contentStandard")]
        public LearningStandardContentStandard LearningStandardContentStandard { get; set; }

        ILearningStandardContentStandard ILearningStandard.LearningStandardContentStandard
        {
            get { return LearningStandardContentStandard; }
            set { LearningStandardContentStandard = (LearningStandardContentStandard) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<LearningStandardGradeLevel> _learningStandardGradeLevels;
        private IList<ILearningStandardGradeLevel> _learningStandardGradeLevelsCovariant;

        [DataMember(Name="gradeLevels")]
        public IList<LearningStandardGradeLevel> LearningStandardGradeLevels 
        { 
            get { return _learningStandardGradeLevels; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<LearningStandardGradeLevel>(value,
                    (s, e) => ((ILearningStandardGradeLevel)e.Item).LearningStandard = this);
                _learningStandardGradeLevels = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ILearningStandardGradeLevel, LearningStandardGradeLevel>(value);
                covariantList.ItemAdded += (s, e) => ((ILearningStandardGradeLevel)e.Item).LearningStandard = this;
                _learningStandardGradeLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ILearningStandardGradeLevel> ILearningStandard.LearningStandardGradeLevels
        {
            get { return _learningStandardGradeLevelsCovariant; }
            set { LearningStandardGradeLevels = new List<LearningStandardGradeLevel>(value.Cast<LearningStandardGradeLevel>()); }
        }

        private IList<LearningStandardIdentificationCode> _learningStandardIdentificationCodes;
        private IList<ILearningStandardIdentificationCode> _learningStandardIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes")]
        public IList<LearningStandardIdentificationCode> LearningStandardIdentificationCodes 
        { 
            get { return _learningStandardIdentificationCodes; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<LearningStandardIdentificationCode>(value,
                    (s, e) => ((ILearningStandardIdentificationCode)e.Item).LearningStandard = this);
                _learningStandardIdentificationCodes = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ILearningStandardIdentificationCode, LearningStandardIdentificationCode>(value);
                covariantList.ItemAdded += (s, e) => ((ILearningStandardIdentificationCode)e.Item).LearningStandard = this;
                _learningStandardIdentificationCodesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ILearningStandardIdentificationCode> ILearningStandard.LearningStandardIdentificationCodes
        {
            get { return _learningStandardIdentificationCodesCovariant; }
            set { LearningStandardIdentificationCodes = new List<LearningStandardIdentificationCode>(value.Cast<LearningStandardIdentificationCode>()); }
        }

        private IList<LearningStandardPrerequisiteLearningStandard> _learningStandardPrerequisiteLearningStandards;
        private IList<ILearningStandardPrerequisiteLearningStandard> _learningStandardPrerequisiteLearningStandardsCovariant;

        [DataMember(Name="prerequisiteLearningStandards")]
        public IList<LearningStandardPrerequisiteLearningStandard> LearningStandardPrerequisiteLearningStandards 
        { 
            get { return _learningStandardPrerequisiteLearningStandards; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<LearningStandardPrerequisiteLearningStandard>(value,
                    (s, e) => ((ILearningStandardPrerequisiteLearningStandard)e.Item).LearningStandard = this);
                _learningStandardPrerequisiteLearningStandards = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ILearningStandardPrerequisiteLearningStandard, LearningStandardPrerequisiteLearningStandard>(value);
                covariantList.ItemAdded += (s, e) => ((ILearningStandardPrerequisiteLearningStandard)e.Item).LearningStandard = this;
                _learningStandardPrerequisiteLearningStandardsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ILearningStandardPrerequisiteLearningStandard> ILearningStandard.LearningStandardPrerequisiteLearningStandards
        {
            get { return _learningStandardPrerequisiteLearningStandardsCovariant; }
            set { LearningStandardPrerequisiteLearningStandards = new List<LearningStandardPrerequisiteLearningStandard>(value.Cast<LearningStandardPrerequisiteLearningStandard>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_learningStandardGradeLevels != null) foreach (var item in _learningStandardGradeLevels)
            {
                item.LearningStandard = this;
            }
            
            if (_learningStandardIdentificationCodes != null) foreach (var item in _learningStandardIdentificationCodes)
            {
                item.LearningStandard = this;
            }
            
            if (_learningStandardPrerequisiteLearningStandards != null) foreach (var item in _learningStandardPrerequisiteLearningStandards)
            {
                item.LearningStandard = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILearningStandard)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILearningStandard) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ILearningStandardSynchronizationSourceSupport.IsAcademicSubjectDescriptorSupported                      { get { return true; } set { } }
 
        bool ILearningStandardSynchronizationSourceSupport.IsCourseTitleSupported                                    { get { return true; } set { } }
 
        bool ILearningStandardSynchronizationSourceSupport.IsDescriptionSupported                                    { get { return true; } set { } }
 
        bool ILearningStandardSynchronizationSourceSupport.IsLearningStandardContentStandardSupported                { get { return true; } set { } }
 
        bool ILearningStandardSynchronizationSourceSupport.IsLearningStandardGradeLevelsSupported                    { get { return true; } set { } }
 
        bool ILearningStandardSynchronizationSourceSupport.IsLearningStandardIdentificationCodesSupported            { get { return true; } set { } }
 
        bool ILearningStandardSynchronizationSourceSupport.IsLearningStandardItemCodeSupported                       { get { return true; } set { } }
 
        bool ILearningStandardSynchronizationSourceSupport.IsLearningStandardPrerequisiteLearningStandardsSupported  { get { return true; } set { } }
 
        bool ILearningStandardSynchronizationSourceSupport.IsNamespaceSupported                                      { get { return true; } set { } }
 
        bool ILearningStandardSynchronizationSourceSupport.IsParentLearningStandardIdSupported                       { get { return true; } set { } }
 
        bool ILearningStandardSynchronizationSourceSupport.IsSuccessCriteriaSupported                                { get { return true; } set { } }
 
        bool ILearningStandardSynchronizationSourceSupport.IsURISupported                                            { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<ILearningStandardGradeLevel, bool> ILearningStandardSynchronizationSourceSupport.IsLearningStandardGradeLevelIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<ILearningStandardIdentificationCode, bool> ILearningStandardSynchronizationSourceSupport.IsLearningStandardIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<ILearningStandardPrerequisiteLearningStandard, bool> ILearningStandardSynchronizationSourceSupport.IsLearningStandardPrerequisiteLearningStandardIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.LearningStandardContentStandard table of the LearningStandard aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LearningStandardContentStandard : ILearningStandardContentStandard, ILearningStandardContentStandardSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public LearningStandardContentStandard()
        {
            LearningStandardContentStandardAuthors = new List<LearningStandardContentStandardAuthor>();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _mandatingEducationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _mandatingEducationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitMandatingEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_mandatingEducationOrganizationReference == null && !_mandatingEducationOrganizationReferenceExplicitlyAssigned)
                    _mandatingEducationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _mandatingEducationOrganizationReference;
            }
        }

        [DataMember(Name="mandatingEducationOrganizationReference")]
        public EducationOrganization.EducationOrganizationReference MandatingEducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitMandatingEducationOrganizationReference != null
                    && (_mandatingEducationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitMandatingEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitMandatingEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _mandatingEducationOrganizationReferenceExplicitlyAssigned = true;
                _mandatingEducationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ILearningStandard _learningStandard;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ILearningStandard ILearningStandardContentStandard.LearningStandard
        {
            get { return _learningStandard; }
            set { _learningStandard = value; }
        }

        internal ILearningStandard LearningStandard
        {
            set { _learningStandard = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_learningStandard != null) 
                    hash = hash * 23 + _learningStandard.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The beginning of the period during which this learning standard document is intended for use.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The end of the period during which this learning standard document is intended for use.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? ILearningStandardContentStandard.MandatingEducationOrganizationId
        {
            get
            {
                if (ImplicitMandatingEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitMandatingEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitMandatingEducationOrganizationReference.EducationOrganizationId;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // MandatingEducationOrganization
                _mandatingEducationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitMandatingEducationOrganizationReference.EducationOrganizationId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The date on which this content was first published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="publicationDate")]
        public DateTime? PublicationDate { get; set; }

        /// <summary>
        /// The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="publicationStatusType")]
        public string PublicationStatusType { get; set; }

        /// <summary>
        /// The year at which this content was first published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="publicationYear")]
        public short? PublicationYear { get; set; }

        /// <summary>
        /// The name of the content standard, for example Common Core.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// An unambiguous reference to the standards using a network-resolvable URI.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="uri")]
        public string URI { get; set; }

        /// <summary>
        /// The version identifier for the content.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="version")]
        public string Version { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<LearningStandardContentStandardAuthor> _learningStandardContentStandardAuthors;
        private IList<ILearningStandardContentStandardAuthor> _learningStandardContentStandardAuthorsCovariant;

        [DataMember(Name="authors")]
        public IList<LearningStandardContentStandardAuthor> LearningStandardContentStandardAuthors 
        { 
            get { return _learningStandardContentStandardAuthors; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<LearningStandardContentStandardAuthor>(value,
                    (s, e) => ((ILearningStandardContentStandardAuthor)e.Item).LearningStandardContentStandard = this);
                _learningStandardContentStandardAuthors = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ILearningStandardContentStandardAuthor, LearningStandardContentStandardAuthor>(value);
                covariantList.ItemAdded += (s, e) => ((ILearningStandardContentStandardAuthor)e.Item).LearningStandardContentStandard = this;
                _learningStandardContentStandardAuthorsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ILearningStandardContentStandardAuthor> ILearningStandardContentStandard.LearningStandardContentStandardAuthors
        {
            get { return _learningStandardContentStandardAuthorsCovariant; }
            set { LearningStandardContentStandardAuthors = new List<LearningStandardContentStandardAuthor>(value.Cast<LearningStandardContentStandardAuthor>()); }
        }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_learningStandardContentStandardAuthors != null) foreach (var item in _learningStandardContentStandardAuthors)
            {
                item.LearningStandardContentStandard = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILearningStandardContentStandard)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILearningStandardContentStandard) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ILearningStandardContentStandardSynchronizationSourceSupport.IsBeginDateSupported                               { get { return true; } set { } }
 
        bool ILearningStandardContentStandardSynchronizationSourceSupport.IsEndDateSupported                                 { get { return true; } set { } }
 
        bool ILearningStandardContentStandardSynchronizationSourceSupport.IsLearningStandardContentStandardAuthorsSupported  { get { return true; } set { } }
 
        bool ILearningStandardContentStandardSynchronizationSourceSupport.IsMandatingEducationOrganizationIdSupported        { get { return true; } set { } }
 
        bool ILearningStandardContentStandardSynchronizationSourceSupport.IsPublicationDateSupported                         { get { return true; } set { } }
 
        bool ILearningStandardContentStandardSynchronizationSourceSupport.IsPublicationStatusTypeSupported                   { get { return true; } set { } }
 
        bool ILearningStandardContentStandardSynchronizationSourceSupport.IsPublicationYearSupported                         { get { return true; } set { } }
 
        bool ILearningStandardContentStandardSynchronizationSourceSupport.IsTitleSupported                                   { get { return true; } set { } }
 
        bool ILearningStandardContentStandardSynchronizationSourceSupport.IsURISupported                                     { get { return true; } set { } }
 
        bool ILearningStandardContentStandardSynchronizationSourceSupport.IsVersionSupported                                 { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<ILearningStandardContentStandardAuthor, bool> ILearningStandardContentStandardSynchronizationSourceSupport.IsLearningStandardContentStandardAuthorIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.LearningStandardContentStandardAuthor table of the LearningStandard aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LearningStandardContentStandardAuthor : ILearningStandardContentStandardAuthor, ILearningStandardContentStandardAuthorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ILearningStandardContentStandard _learningStandardContentStandard;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ILearningStandardContentStandard ILearningStandardContentStandardAuthor.LearningStandardContentStandard
        {
            get { return _learningStandardContentStandard; }
            set { _learningStandardContentStandard = value; }
        }

        internal ILearningStandardContentStandard LearningStandardContentStandard
        {
            set { _learningStandardContentStandard = value; }
        }

        /// <summary>
        /// The person or organization chiefly responsible for the intellectual content of the standard.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="author"), NaturalKeyMember]
        public string Author { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_learningStandardContentStandard != null) 
                    hash = hash * 23 + _learningStandardContentStandard.GetHashCode();
 
                // Standard Property
                if ((this as ILearningStandardContentStandardAuthor).Author != null) 
                    hash = hash * 23 + (this as ILearningStandardContentStandardAuthor).Author.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILearningStandardContentStandardAuthor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILearningStandardContentStandardAuthor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.LearningStandardGradeLevel table of the LearningStandard aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LearningStandardGradeLevel : ILearningStandardGradeLevel, ILearningStandardGradeLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ILearningStandard _learningStandard;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ILearningStandard ILearningStandardGradeLevel.LearningStandard
        {
            get { return _learningStandard; }
            set { _learningStandard = value; }
        }

        internal ILearningStandard LearningStandard
        {
            set { _learningStandard = value; }
        }

        /// <summary>
        /// The grade levels for the specific learning standard.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_learningStandard != null) 
                    hash = hash * 23 + _learningStandard.GetHashCode();
 
                // Standard Property
                if ((this as ILearningStandardGradeLevel).GradeLevelDescriptor != null) 
                    hash = hash * 23 + (this as ILearningStandardGradeLevel).GradeLevelDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILearningStandardGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILearningStandardGradeLevel) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.LearningStandardIdentificationCode table of the LearningStandard aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LearningStandardIdentificationCode : ILearningStandardIdentificationCode, ILearningStandardIdentificationCodeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ILearningStandard _learningStandard;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ILearningStandard ILearningStandardIdentificationCode.LearningStandard
        {
            get { return _learningStandard; }
            set { _learningStandard = value; }
        }

        internal ILearningStandard LearningStandard
        {
            set { _learningStandard = value; }
        }

        /// <summary>
        /// The name of the content standard, for example Common Core.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="contentStandardName"), NaturalKeyMember]
        public string ContentStandardName { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a Learning Standard.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode"), NaturalKeyMember]
        public string IdentificationCode { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_learningStandard != null) 
                    hash = hash * 23 + _learningStandard.GetHashCode();
 
                // Standard Property
                if ((this as ILearningStandardIdentificationCode).ContentStandardName != null) 
                    hash = hash * 23 + (this as ILearningStandardIdentificationCode).ContentStandardName.GetHashCode();
 
                // Standard Property
                if ((this as ILearningStandardIdentificationCode).IdentificationCode != null) 
                    hash = hash * 23 + (this as ILearningStandardIdentificationCode).IdentificationCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILearningStandardIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILearningStandardIdentificationCode) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.LearningStandardPrerequisiteLearningStandard table of the LearningStandard aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LearningStandardPrerequisiteLearningStandard : ILearningStandardPrerequisiteLearningStandard, ILearningStandardPrerequisiteLearningStandardSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _prerequisiteLearningStandardReferenceExplicitlyAssigned;
        private LearningStandardReference _prerequisiteLearningStandardReference;
        private LearningStandardReference ImplicitPrerequisiteLearningStandardReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_prerequisiteLearningStandardReference == null && !_prerequisiteLearningStandardReferenceExplicitlyAssigned)
                    _prerequisiteLearningStandardReference = new LearningStandardReference();

                return _prerequisiteLearningStandardReference;
            }
        }

        [DataMember(Name="prerequisiteLearningStandardReference")][NaturalKeyMember]
        public LearningStandardReference PrerequisiteLearningStandardReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitPrerequisiteLearningStandardReference != null
                    && (_prerequisiteLearningStandardReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPrerequisiteLearningStandardReference.IsReferenceFullyDefined()))
                    return ImplicitPrerequisiteLearningStandardReference;

                return null;
            }
            set 
            { 
                _prerequisiteLearningStandardReferenceExplicitlyAssigned = true;
                _prerequisiteLearningStandardReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ILearningStandard _learningStandard;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ILearningStandard ILearningStandardPrerequisiteLearningStandard.LearningStandard
        {
            get { return _learningStandard; }
            set { _learningStandard = value; }
        }

        internal ILearningStandard LearningStandard
        {
            set { _learningStandard = value; }
        }

        /// <summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ILearningStandardPrerequisiteLearningStandard.PrerequisiteLearningStandardId
        {
            get
            {
                if (ImplicitPrerequisiteLearningStandardReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPrerequisiteLearningStandardReference.IsReferenceFullyDefined()))
                    return ImplicitPrerequisiteLearningStandardReference.LearningStandardId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // PrerequisiteLearningStandard
                _prerequisiteLearningStandardReferenceExplicitlyAssigned = false;
                ImplicitPrerequisiteLearningStandardReference.LearningStandardId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_learningStandard != null) 
                    hash = hash * 23 + _learningStandard.GetHashCode();
 
                //Referenced Property
                if ((this as ILearningStandardPrerequisiteLearningStandard).PrerequisiteLearningStandardId != null) 
                    hash = hash * 23 + (this as ILearningStandardPrerequisiteLearningStandard).PrerequisiteLearningStandardId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILearningStandardPrerequisiteLearningStandard)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILearningStandardPrerequisiteLearningStandard) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: LeaveEvent

namespace EdFi.Ods.Api.Models.Resources.V2.LeaveEvent
{
    /// <summary>
    /// Represents a reference to the LeaveEvent resource.
    /// </summary>
    [DataContract]
    public class LeaveEventReference
    {
        [DataMember(Name="eventDate"), NaturalKeyMember]
        public DateTime EventDate { get; set; }

        [DataMember(Name="categoryType"), NaturalKeyMember]
        public string LeaveEventCategoryType { get; set; }

        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "LeaveEvent",
                            Href = "/leaveEvents"
                                    + "?eventDate=" + JsonConvert.SerializeObject(EventDate).Replace("\"", string.Empty)            
                                    + "&categoryType=" + WebUtility.UrlEncode(LeaveEventCategoryType)            
                                    + "&staffUniqueId=" + WebUtility.UrlEncode(StaffUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EventDate != default(DateTime)
                && LeaveEventCategoryType != default(string)
                && StaffUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.LeaveEvent table of the LeaveEvent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LeaveEvent : ILeaveEvent, IHasETag, ILeaveEventSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the LeaveEvent resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _staffReferenceExplicitlyAssigned;
        private Staff.StaffReference _staffReference;
        private Staff.StaffReference ImplicitStaffReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_staffReference == null && !_staffReferenceExplicitlyAssigned)
                    _staffReference = new Staff.StaffReference();

                return _staffReference;
            }
        }

        [DataMember(Name="staffReference")][NaturalKeyMember]
        public Staff.StaffReference StaffReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStaffReference != null
                    && (_staffReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference;

                return null;
            }
            set 
            { 
                _staffReferenceExplicitlyAssigned = true;
                _staffReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Date for this leave event.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eventDate"), NaturalKeyMember]
        public DateTime EventDate { get; set; }

        /// <summary>
        /// The code describing the type of leave taken, for example:          Sick          Personal          Vacation.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="categoryType"), NaturalKeyMember]
        public string LeaveEventCategoryType { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ILeaveEvent.StaffUniqueId
        {
            get
            {
                if (ImplicitStaffReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference.StaffUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Staff
                _staffReferenceExplicitlyAssigned = false;
                ImplicitStaffReference.StaffUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ILeaveEvent).EventDate != null) 
                    hash = hash * 23 + (this as ILeaveEvent).EventDate.GetHashCode();
 
                // Standard Property
                if ((this as ILeaveEvent).LeaveEventCategoryType != null) 
                    hash = hash * 23 + (this as ILeaveEvent).LeaveEventCategoryType.GetHashCode();
 
                //Referenced Property
                if ((this as ILeaveEvent).StaffUniqueId != null) 
                    hash = hash * 23 + (this as ILeaveEvent).StaffUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The hours the staff was absent, if not the entire working day.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hoursOnLeave")][Range(typeof(decimal), "-9999999999999999.99", "9999999999999999.99")]
        public decimal? HoursOnLeave { get; set; }

        /// <summary>
        /// Expanded reason for the staff leave.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="reason")]
        public string LeaveEventReason { get; set; }

        /// <summary>
        /// Indicator of whether a substitute was assigned during the period of staff leave.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="substituteAssigned")]
        public bool? SubstituteAssigned { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILeaveEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILeaveEvent) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ILeaveEventSynchronizationSourceSupport.IsHoursOnLeaveSupported        { get { return true; } set { } }
 
        bool ILeaveEventSynchronizationSourceSupport.IsLeaveEventReasonSupported    { get { return true; } set { } }
 
        bool ILeaveEventSynchronizationSourceSupport.IsSubstituteAssignedSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: LeaveEventCategoryType

namespace EdFi.Ods.Api.Models.Resources.V2.LeaveEventCategoryType
{
    /// <summary>
    /// A class which represents the edfi.LeaveEventCategoryType table of the LeaveEventCategoryType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LeaveEventCategoryType : ILeaveEventCategoryType, IHasETag, ILeaveEventCategoryTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the LeaveEventCategoryType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for LeaveEventCategory
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="leaveEventCategoryTypeId"), NaturalKeyMember]
        public int LeaveEventCategoryTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ILeaveEventCategoryType).LeaveEventCategoryTypeId != null) 
                    hash = hash * 23 + (this as ILeaveEventCategoryType).LeaveEventCategoryTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the LeaveEventCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the LeaveEventCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILeaveEventCategoryType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILeaveEventCategoryType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ILeaveEventCategoryTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ILeaveEventCategoryTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ILeaveEventCategoryTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: LevelDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.LevelDescriptor
{
    /// <summary>
    /// A class which represents the edfi.LevelDescriptor table of the LevelDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LevelDescriptor : ILevelDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, ILevelDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public LevelDescriptor()
        {
            LevelDescriptorGradeLevels = new List<LevelDescriptorGradeLevel>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the LevelDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="levelDescriptorId"), NaturalKeyMember]
        public int LevelDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return LevelDescriptorId; }
            set { LevelDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as ILevelDescriptor).LevelDescriptorId != null) 
                    hash = hash * 23 + (this as ILevelDescriptor).LevelDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<LevelDescriptorGradeLevel> _levelDescriptorGradeLevels;
        private IList<ILevelDescriptorGradeLevel> _levelDescriptorGradeLevelsCovariant;

        [DataMember(Name="gradeLevels")]
        public IList<LevelDescriptorGradeLevel> LevelDescriptorGradeLevels 
        { 
            get { return _levelDescriptorGradeLevels; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<LevelDescriptorGradeLevel>(value,
                    (s, e) => ((ILevelDescriptorGradeLevel)e.Item).LevelDescriptor = this);
                _levelDescriptorGradeLevels = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ILevelDescriptorGradeLevel, LevelDescriptorGradeLevel>(value);
                covariantList.ItemAdded += (s, e) => ((ILevelDescriptorGradeLevel)e.Item).LevelDescriptor = this;
                _levelDescriptorGradeLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ILevelDescriptorGradeLevel> ILevelDescriptor.LevelDescriptorGradeLevels
        {
            get { return _levelDescriptorGradeLevelsCovariant; }
            set { LevelDescriptorGradeLevels = new List<LevelDescriptorGradeLevel>(value.Cast<LevelDescriptorGradeLevel>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_levelDescriptorGradeLevels != null) foreach (var item in _levelDescriptorGradeLevels)
            {
                item.LevelDescriptor = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILevelDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ILevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported                   { get { return true; } set { } }
 
        bool ILevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported                 { get { return true; } set { } }
 
        bool ILevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported          { get { return true; } set { } }
 
        bool ILevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported            { get { return true; } set { } }
 
        bool ILevelDescriptorSynchronizationSourceSupport.IsLevelDescriptorGradeLevelsSupported  { get { return true; } set { } }
 
        bool ILevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported                   { get { return true; } set { } }
 
        bool ILevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported           { get { return true; } set { } }
 
        bool ILevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported            { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<ILevelDescriptorGradeLevel, bool> ILevelDescriptorSynchronizationSourceSupport.IsLevelDescriptorGradeLevelIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.LevelDescriptorGradeLevel table of the LevelDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LevelDescriptorGradeLevel : ILevelDescriptorGradeLevel, ILevelDescriptorGradeLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ILevelDescriptor _levelDescriptor;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ILevelDescriptor ILevelDescriptorGradeLevel.LevelDescriptor
        {
            get { return _levelDescriptor; }
            set { _levelDescriptor = value; }
        }

        internal ILevelDescriptor LevelDescriptor
        {
            set { _levelDescriptor = value; }
        }

        /// <summary>
        /// The mapping to known grade levels for which certification exists.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_levelDescriptor != null) 
                    hash = hash * 23 + _levelDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as ILevelDescriptorGradeLevel).GradeLevelDescriptor != null) 
                    hash = hash * 23 + (this as ILevelDescriptorGradeLevel).GradeLevelDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILevelDescriptorGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILevelDescriptorGradeLevel) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: LevelOfEducationDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.LevelOfEducationDescriptor
{
    /// <summary>
    /// A class which represents the edfi.LevelOfEducationDescriptor table of the LevelOfEducationDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LevelOfEducationDescriptor : ILevelOfEducationDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, ILevelOfEducationDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the LevelOfEducationDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="levelOfEducationDescriptorId"), NaturalKeyMember]
        public int LevelOfEducationDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return LevelOfEducationDescriptorId; }
            set { LevelOfEducationDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as ILevelOfEducationDescriptor).LevelOfEducationDescriptorId != null) 
                    hash = hash * 23 + (this as ILevelOfEducationDescriptor).LevelOfEducationDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="levelOfEducationType")]
        public string LevelOfEducationType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILevelOfEducationDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILevelOfEducationDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ILevelOfEducationDescriptorSynchronizationSourceSupport.IsCodeValueSupported             { get { return true; } set { } }
 
        bool ILevelOfEducationDescriptorSynchronizationSourceSupport.IsDescriptionSupported           { get { return true; } set { } }
 
        bool ILevelOfEducationDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported    { get { return true; } set { } }
 
        bool ILevelOfEducationDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported      { get { return true; } set { } }
 
        bool ILevelOfEducationDescriptorSynchronizationSourceSupport.IsLevelOfEducationTypeSupported  { get { return true; } set { } }
 
        bool ILevelOfEducationDescriptorSynchronizationSourceSupport.IsNamespaceSupported             { get { return true; } set { } }
 
        bool ILevelOfEducationDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported     { get { return true; } set { } }
 
        bool ILevelOfEducationDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported      { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: LevelOfEducationType

namespace EdFi.Ods.Api.Models.Resources.V2.LevelOfEducationType
{
    /// <summary>
    /// A class which represents the edfi.LevelOfEducationType table of the LevelOfEducationType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LevelOfEducationType : ILevelOfEducationType, IHasETag, ILevelOfEducationTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the LevelOfEducationType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for LevelOfEducation
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="levelOfEducationTypeId"), NaturalKeyMember]
        public int LevelOfEducationTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ILevelOfEducationType).LevelOfEducationTypeId != null) 
                    hash = hash * 23 + (this as ILevelOfEducationType).LevelOfEducationTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the LevelOfEducation type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the LevelOfEducation type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILevelOfEducationType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILevelOfEducationType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ILevelOfEducationTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ILevelOfEducationTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ILevelOfEducationTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: LimitedEnglishProficiencyDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.LimitedEnglishProficiencyDescriptor
{
    /// <summary>
    /// A class which represents the edfi.LimitedEnglishProficiencyDescriptor table of the LimitedEnglishProficiencyDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LimitedEnglishProficiencyDescriptor : ILimitedEnglishProficiencyDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, ILimitedEnglishProficiencyDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the LimitedEnglishProficiencyDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="limitedEnglishProficiencyDescriptorId"), NaturalKeyMember]
        public int LimitedEnglishProficiencyDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return LimitedEnglishProficiencyDescriptorId; }
            set { LimitedEnglishProficiencyDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as ILimitedEnglishProficiencyDescriptor).LimitedEnglishProficiencyDescriptorId != null) 
                    hash = hash * 23 + (this as ILimitedEnglishProficiencyDescriptor).LimitedEnglishProficiencyDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="limitedEnglishProficiencyType")]
        public string LimitedEnglishProficiencyType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILimitedEnglishProficiencyDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILimitedEnglishProficiencyDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ILimitedEnglishProficiencyDescriptorSynchronizationSourceSupport.IsCodeValueSupported                      { get { return true; } set { } }
 
        bool ILimitedEnglishProficiencyDescriptorSynchronizationSourceSupport.IsDescriptionSupported                    { get { return true; } set { } }
 
        bool ILimitedEnglishProficiencyDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported             { get { return true; } set { } }
 
        bool ILimitedEnglishProficiencyDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported               { get { return true; } set { } }
 
        bool ILimitedEnglishProficiencyDescriptorSynchronizationSourceSupport.IsLimitedEnglishProficiencyTypeSupported  { get { return true; } set { } }
 
        bool ILimitedEnglishProficiencyDescriptorSynchronizationSourceSupport.IsNamespaceSupported                      { get { return true; } set { } }
 
        bool ILimitedEnglishProficiencyDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported              { get { return true; } set { } }
 
        bool ILimitedEnglishProficiencyDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported               { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: LimitedEnglishProficiencyType

namespace EdFi.Ods.Api.Models.Resources.V2.LimitedEnglishProficiencyType
{
    /// <summary>
    /// A class which represents the edfi.LimitedEnglishProficiencyType table of the LimitedEnglishProficiencyType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LimitedEnglishProficiencyType : ILimitedEnglishProficiencyType, IHasETag, ILimitedEnglishProficiencyTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the LimitedEnglishProficiencyType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for LimitedEnglishProficiency
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="limitedEnglishProficiencyTypeId"), NaturalKeyMember]
        public int LimitedEnglishProficiencyTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ILimitedEnglishProficiencyType).LimitedEnglishProficiencyTypeId != null) 
                    hash = hash * 23 + (this as ILimitedEnglishProficiencyType).LimitedEnglishProficiencyTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the LimitedEnglishProficiency type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the LimitedEnglishProficiency type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILimitedEnglishProficiencyType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILimitedEnglishProficiencyType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ILimitedEnglishProficiencyTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ILimitedEnglishProficiencyTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ILimitedEnglishProficiencyTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: LocalEducationAgency

namespace EdFi.Ods.Api.Models.Resources.V2.LocalEducationAgency
{
    /// <summary>
    /// Represents a reference to the LocalEducationAgency resource.
    /// </summary>
    [DataContract]
    public class LocalEducationAgencyReference
    {
        [DataMember(Name="localEducationAgencyId"), NaturalKeyMember]
        public int LocalEducationAgencyId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "LocalEducationAgency",
                            Href = "/localEducationAgencies"
                                    + "?localEducationAgencyId=" + LocalEducationAgencyId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return LocalEducationAgencyId != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.LocalEducationAgency table of the LocalEducationAgency aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LocalEducationAgency : ILocalEducationAgency, EdFi.Ods.Entities.Common.IEducationOrganization, IHasETag, ILocalEducationAgencySynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public LocalEducationAgency()
        {
            LocalEducationAgencyAccountabilities = new List<LocalEducationAgencyAccountability>();

            // Inherited lists
            EducationOrganizationAddresses = new List<EducationOrganization.EducationOrganizationAddress>();
            EducationOrganizationCategories = new List<EducationOrganization.EducationOrganizationCategory>();
            EducationOrganizationIdentificationCodes = new List<EducationOrganization.EducationOrganizationIdentificationCode>();
            EducationOrganizationInstitutionTelephones = new List<EducationOrganization.EducationOrganizationInstitutionTelephone>();
            EducationOrganizationInternationalAddresses = new List<EducationOrganization.EducationOrganizationInternationalAddress>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the LocalEducationAgency resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationServiceCenterReferenceExplicitlyAssigned;
        private EducationServiceCenter.EducationServiceCenterReference _educationServiceCenterReference;
        private EducationServiceCenter.EducationServiceCenterReference ImplicitEducationServiceCenterReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationServiceCenterReference == null && !_educationServiceCenterReferenceExplicitlyAssigned)
                    _educationServiceCenterReference = new EducationServiceCenter.EducationServiceCenterReference();

                return _educationServiceCenterReference;
            }
        }

        [DataMember(Name="educationServiceCenterReference")]
        public EducationServiceCenter.EducationServiceCenterReference EducationServiceCenterReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationServiceCenterReference != null
                    && (_educationServiceCenterReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationServiceCenterReference.IsReferenceFullyDefined()))
                    return ImplicitEducationServiceCenterReference;

                return null;
            }
            set 
            { 
                _educationServiceCenterReferenceExplicitlyAssigned = true;
                _educationServiceCenterReference = value;
            }
        }
        private bool _parentLocalEducationAgencyReferenceExplicitlyAssigned;
        private LocalEducationAgencyReference _parentLocalEducationAgencyReference;
        private LocalEducationAgencyReference ImplicitParentLocalEducationAgencyReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_parentLocalEducationAgencyReference == null && !_parentLocalEducationAgencyReferenceExplicitlyAssigned)
                    _parentLocalEducationAgencyReference = new LocalEducationAgencyReference();

                return _parentLocalEducationAgencyReference;
            }
        }

        [DataMember(Name="parentLocalEducationAgencyReference")]
        public LocalEducationAgencyReference ParentLocalEducationAgencyReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitParentLocalEducationAgencyReference != null
                    && (_parentLocalEducationAgencyReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitParentLocalEducationAgencyReference.IsReferenceFullyDefined()))
                    return ImplicitParentLocalEducationAgencyReference;

                return null;
            }
            set 
            { 
                _parentLocalEducationAgencyReferenceExplicitlyAssigned = true;
                _parentLocalEducationAgencyReference = value;
            }
        }
        private bool _stateEducationAgencyReferenceExplicitlyAssigned;
        private StateEducationAgency.StateEducationAgencyReference _stateEducationAgencyReference;
        private StateEducationAgency.StateEducationAgencyReference ImplicitStateEducationAgencyReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_stateEducationAgencyReference == null && !_stateEducationAgencyReferenceExplicitlyAssigned)
                    _stateEducationAgencyReference = new StateEducationAgency.StateEducationAgencyReference();

                return _stateEducationAgencyReference;
            }
        }

        [DataMember(Name="stateEducationAgencyReference")]
        public StateEducationAgency.StateEducationAgencyReference StateEducationAgencyReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStateEducationAgencyReference != null
                    && (_stateEducationAgencyReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStateEducationAgencyReference.IsReferenceFullyDefined()))
                    return ImplicitStateEducationAgencyReference;

                return null;
            }
            set 
            { 
                _stateEducationAgencyReferenceExplicitlyAssigned = true;
                _stateEducationAgencyReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to a local education agency by the State Education Agency (SEA).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="localEducationAgencyId"), NaturalKeyMember]
        public int LocalEducationAgencyId { get; set; }

        int IEducationOrganization.EducationOrganizationId
        {
            get { return LocalEducationAgencyId; }
            set { LocalEducationAgencyId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as ILocalEducationAgency).LocalEducationAgencyId != null) 
                    hash = hash * 23 + (this as ILocalEducationAgency).LocalEducationAgencyId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The full, legally accepted name of the institution.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfInstitution")]
        public string NameOfInstitution { get; set; }

        /// <summary>
        /// The current operational status of the EducationOrganization (e.g., active, inactive).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="operationalStatusType")]
        public string OperationalStatusType { get; set; }

        /// <summary>
        /// A short name for the institution.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortNameOfInstitution")]
        public string ShortNameOfInstitution { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization by the StateEducationAgency (SEA).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="stateOrganizationId")]
        public string StateOrganizationId { get; set; }

        /// <summary>
        /// The public web site address (URL) for the EducationOrganization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="webSite")]
        public string WebSite { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="charterStatusType")]
        public string CharterStatusType { get; set; }

        /// <summary>
        /// The identifier assigned to an education service center by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? ILocalEducationAgency.EducationServiceCenterId
        {
            get
            {
                if (ImplicitEducationServiceCenterReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationServiceCenterReference.IsReferenceFullyDefined()))
                    return ImplicitEducationServiceCenterReference.EducationServiceCenterId;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationServiceCenter
                _educationServiceCenterReferenceExplicitlyAssigned = false;
                ImplicitEducationServiceCenterReference.EducationServiceCenterId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The category of local education agency/district. For example: Independent or Charter.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="categoryType")]
        public string LocalEducationAgencyCategoryType { get; set; }

        /// <summary>
        /// The identifier assigned to a local education agency by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? ILocalEducationAgency.ParentLocalEducationAgencyId
        {
            get
            {
                if (ImplicitParentLocalEducationAgencyReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitParentLocalEducationAgencyReference.IsReferenceFullyDefined()))
                    return ImplicitParentLocalEducationAgencyReference.LocalEducationAgencyId;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ParentLocalEducationAgency
                _parentLocalEducationAgencyReferenceExplicitlyAssigned = false;
                ImplicitParentLocalEducationAgencyReference.LocalEducationAgencyId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The identifier assigned to a state education agency by the StateEducationAgency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? ILocalEducationAgency.StateEducationAgencyId
        {
            get
            {
                if (ImplicitStateEducationAgencyReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStateEducationAgencyReference.IsReferenceFullyDefined()))
                    return ImplicitStateEducationAgencyReference.StateEducationAgencyId;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StateEducationAgency
                _stateEducationAgencyReferenceExplicitlyAssigned = false;
                ImplicitStateEducationAgencyReference.StateEducationAgencyId = value.GetValueOrDefault();
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        private IList<EducationOrganization.EducationOrganizationAddress> _educationOrganizationAddresses;
        private IList<IEducationOrganizationAddress> _educationOrganizationAddressesCovariant;

        [DataMember(Name="addresses")]
        public IList<EducationOrganization.EducationOrganizationAddress> EducationOrganizationAddresses 
        {
            get { return _educationOrganizationAddresses; }
            set 
            {
                _educationOrganizationAddresses = value;
                _educationOrganizationAddressesCovariant = new CovariantIListAdapter<IEducationOrganizationAddress, EducationOrganization.EducationOrganizationAddress>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationAddress> IEducationOrganization.EducationOrganizationAddresses
        {
            get { return _educationOrganizationAddressesCovariant; }
            set { EducationOrganizationAddresses = new List<EducationOrganization.EducationOrganizationAddress>(value.Cast<EducationOrganization.EducationOrganizationAddress>()); }
        }
        private IList<EducationOrganization.EducationOrganizationCategory> _educationOrganizationCategories;
        private IList<IEducationOrganizationCategory> _educationOrganizationCategoriesCovariant;

        [DataMember(Name="educationOrganizationCategories")]
        public IList<EducationOrganization.EducationOrganizationCategory> EducationOrganizationCategories 
        {
            get { return _educationOrganizationCategories; }
            set 
            {
                _educationOrganizationCategories = value;
                _educationOrganizationCategoriesCovariant = new CovariantIListAdapter<IEducationOrganizationCategory, EducationOrganization.EducationOrganizationCategory>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationCategory> IEducationOrganization.EducationOrganizationCategories
        {
            get { return _educationOrganizationCategoriesCovariant; }
            set { EducationOrganizationCategories = new List<EducationOrganization.EducationOrganizationCategory>(value.Cast<EducationOrganization.EducationOrganizationCategory>()); }
        }
        private IList<EducationOrganization.EducationOrganizationIdentificationCode> _educationOrganizationIdentificationCodes;
        private IList<IEducationOrganizationIdentificationCode> _educationOrganizationIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes")]
        public IList<EducationOrganization.EducationOrganizationIdentificationCode> EducationOrganizationIdentificationCodes 
        {
            get { return _educationOrganizationIdentificationCodes; }
            set 
            {
                _educationOrganizationIdentificationCodes = value;
                _educationOrganizationIdentificationCodesCovariant = new CovariantIListAdapter<IEducationOrganizationIdentificationCode, EducationOrganization.EducationOrganizationIdentificationCode>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationIdentificationCode> IEducationOrganization.EducationOrganizationIdentificationCodes
        {
            get { return _educationOrganizationIdentificationCodesCovariant; }
            set { EducationOrganizationIdentificationCodes = new List<EducationOrganization.EducationOrganizationIdentificationCode>(value.Cast<EducationOrganization.EducationOrganizationIdentificationCode>()); }
        }
        private IList<EducationOrganization.EducationOrganizationInstitutionTelephone> _educationOrganizationInstitutionTelephones;
        private IList<IEducationOrganizationInstitutionTelephone> _educationOrganizationInstitutionTelephonesCovariant;

        [DataMember(Name="institutionTelephones")]
        public IList<EducationOrganization.EducationOrganizationInstitutionTelephone> EducationOrganizationInstitutionTelephones 
        {
            get { return _educationOrganizationInstitutionTelephones; }
            set 
            {
                _educationOrganizationInstitutionTelephones = value;
                _educationOrganizationInstitutionTelephonesCovariant = new CovariantIListAdapter<IEducationOrganizationInstitutionTelephone, EducationOrganization.EducationOrganizationInstitutionTelephone>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationInstitutionTelephone> IEducationOrganization.EducationOrganizationInstitutionTelephones
        {
            get { return _educationOrganizationInstitutionTelephonesCovariant; }
            set { EducationOrganizationInstitutionTelephones = new List<EducationOrganization.EducationOrganizationInstitutionTelephone>(value.Cast<EducationOrganization.EducationOrganizationInstitutionTelephone>()); }
        }
        private IList<EducationOrganization.EducationOrganizationInternationalAddress> _educationOrganizationInternationalAddresses;
        private IList<IEducationOrganizationInternationalAddress> _educationOrganizationInternationalAddressesCovariant;

        [DataMember(Name="internationalAddresses")]
        public IList<EducationOrganization.EducationOrganizationInternationalAddress> EducationOrganizationInternationalAddresses 
        {
            get { return _educationOrganizationInternationalAddresses; }
            set 
            {
                _educationOrganizationInternationalAddresses = value;
                _educationOrganizationInternationalAddressesCovariant = new CovariantIListAdapter<IEducationOrganizationInternationalAddress, EducationOrganization.EducationOrganizationInternationalAddress>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationInternationalAddress> IEducationOrganization.EducationOrganizationInternationalAddresses
        {
            get { return _educationOrganizationInternationalAddressesCovariant; }
            set { EducationOrganizationInternationalAddresses = new List<EducationOrganization.EducationOrganizationInternationalAddress>(value.Cast<EducationOrganization.EducationOrganizationInternationalAddress>()); }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<LocalEducationAgencyAccountability> _localEducationAgencyAccountabilities;
        private IList<ILocalEducationAgencyAccountability> _localEducationAgencyAccountabilitiesCovariant;

        [DataMember(Name="accountabilities")]
        public IList<LocalEducationAgencyAccountability> LocalEducationAgencyAccountabilities 
        { 
            get { return _localEducationAgencyAccountabilities; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<LocalEducationAgencyAccountability>(value,
                    (s, e) => ((ILocalEducationAgencyAccountability)e.Item).LocalEducationAgency = this);
                _localEducationAgencyAccountabilities = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ILocalEducationAgencyAccountability, LocalEducationAgencyAccountability>(value);
                covariantList.ItemAdded += (s, e) => ((ILocalEducationAgencyAccountability)e.Item).LocalEducationAgency = this;
                _localEducationAgencyAccountabilitiesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ILocalEducationAgencyAccountability> ILocalEducationAgency.LocalEducationAgencyAccountabilities
        {
            get { return _localEducationAgencyAccountabilitiesCovariant; }
            set { LocalEducationAgencyAccountabilities = new List<LocalEducationAgencyAccountability>(value.Cast<LocalEducationAgencyAccountability>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            // _educationOrganizationAddresses
            // _educationOrganizationCategories
            // _educationOrganizationIdentificationCodes
            // _educationOrganizationInstitutionTelephones
            // _educationOrganizationInternationalAddresses
            if (_localEducationAgencyAccountabilities != null) foreach (var item in _localEducationAgencyAccountabilities)
            {
                item.LocalEducationAgency = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILocalEducationAgency)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILocalEducationAgency) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ILocalEducationAgencySynchronizationSourceSupport.IsCharterStatusTypeSupported                            { get { return true; } set { } }
 
        bool ILocalEducationAgencySynchronizationSourceSupport.IsEducationOrganizationAddressesSupported               { get { return true; } set { } }
 
        bool ILocalEducationAgencySynchronizationSourceSupport.IsEducationOrganizationCategoriesSupported              { get { return true; } set { } }
 
        bool ILocalEducationAgencySynchronizationSourceSupport.IsEducationOrganizationIdentificationCodesSupported     { get { return true; } set { } }
 
        bool ILocalEducationAgencySynchronizationSourceSupport.IsEducationOrganizationInstitutionTelephonesSupported   { get { return true; } set { } }
 
        bool ILocalEducationAgencySynchronizationSourceSupport.IsEducationOrganizationInternationalAddressesSupported  { get { return true; } set { } }
 
        bool ILocalEducationAgencySynchronizationSourceSupport.IsEducationServiceCenterIdSupported                     { get { return true; } set { } }
 
        bool ILocalEducationAgencySynchronizationSourceSupport.IsLocalEducationAgencyAccountabilitiesSupported         { get { return true; } set { } }
 
        bool ILocalEducationAgencySynchronizationSourceSupport.IsLocalEducationAgencyCategoryTypeSupported             { get { return true; } set { } }
 
        bool ILocalEducationAgencySynchronizationSourceSupport.IsNameOfInstitutionSupported                            { get { return true; } set { } }
 
        bool ILocalEducationAgencySynchronizationSourceSupport.IsOperationalStatusTypeSupported                        { get { return true; } set { } }
 
        bool ILocalEducationAgencySynchronizationSourceSupport.IsParentLocalEducationAgencyIdSupported                 { get { return true; } set { } }
 
        bool ILocalEducationAgencySynchronizationSourceSupport.IsShortNameOfInstitutionSupported                       { get { return true; } set { } }
 
        bool ILocalEducationAgencySynchronizationSourceSupport.IsStateEducationAgencyIdSupported                       { get { return true; } set { } }
 
        bool ILocalEducationAgencySynchronizationSourceSupport.IsStateOrganizationIdSupported                          { get { return true; } set { } }
 
        bool ILocalEducationAgencySynchronizationSourceSupport.IsWebSiteSupported                                      { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IEducationOrganizationAddress, bool> ILocalEducationAgencySynchronizationSourceSupport.IsEducationOrganizationAddressIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationCategory, bool> ILocalEducationAgencySynchronizationSourceSupport.IsEducationOrganizationCategoryIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationIdentificationCode, bool> ILocalEducationAgencySynchronizationSourceSupport.IsEducationOrganizationIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationInstitutionTelephone, bool> ILocalEducationAgencySynchronizationSourceSupport.IsEducationOrganizationInstitutionTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationInternationalAddress, bool> ILocalEducationAgencySynchronizationSourceSupport.IsEducationOrganizationInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<ILocalEducationAgencyAccountability, bool> ILocalEducationAgencySynchronizationSourceSupport.IsLocalEducationAgencyAccountabilityIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.LocalEducationAgencyAccountability table of the LocalEducationAgency aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LocalEducationAgencyAccountability : ILocalEducationAgencyAccountability, ILocalEducationAgencyAccountabilitySynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _schoolYearTypeReferenceExplicitlyAssigned;
        private SchoolYearType.SchoolYearTypeReference _schoolYearTypeReference;
        private SchoolYearType.SchoolYearTypeReference ImplicitSchoolYearTypeReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolYearTypeReference == null && !_schoolYearTypeReferenceExplicitlyAssigned)
                    _schoolYearTypeReference = new SchoolYearType.SchoolYearTypeReference();

                return _schoolYearTypeReference;
            }
        }

        [DataMember(Name="schoolYearTypeReference")][NaturalKeyMember]
        public SchoolYearType.SchoolYearTypeReference SchoolYearTypeReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolYearTypeReference != null
                    && (_schoolYearTypeReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference;

                return null;
            }
            set 
            { 
                _schoolYearTypeReferenceExplicitlyAssigned = true;
                _schoolYearTypeReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ILocalEducationAgency _localEducationAgency;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ILocalEducationAgency ILocalEducationAgencyAccountability.LocalEducationAgency
        {
            get { return _localEducationAgency; }
            set { _localEducationAgency = value; }
        }

        internal ILocalEducationAgency LocalEducationAgency
        {
            set { _localEducationAgency = value; }
        }

        /// <summary>
        /// The school year for which the accountability is reported.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short ILocalEducationAgencyAccountability.SchoolYear
        {
            get
            {
                if (ImplicitSchoolYearTypeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SchoolYearType
                _schoolYearTypeReferenceExplicitlyAssigned = false;
                ImplicitSchoolYearTypeReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_localEducationAgency != null) 
                    hash = hash * 23 + _localEducationAgency.GetHashCode();
 
                //Referenced Property
                if ((this as ILocalEducationAgencyAccountability).SchoolYear != null) 
                    hash = hash * 23 + (this as ILocalEducationAgencyAccountability).SchoolYear.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication of whether the school or Local Education Agency (LEA) submitted a Gun-Free Schools Act (GFSA) of 1994 report to the state, as defined by Title 18, Section 921.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gunFreeSchoolsActReportingStatusType")]
        public string GunFreeSchoolsActReportingStatusType { get; set; }

        /// <summary>
        /// An indication of whether the LEA was able to implement the provisions for public school choice under Title I, Part A, Section 1116 of ESEA as amended.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="schoolChoiceImplementStatusType")]
        public string SchoolChoiceImplementStatusType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILocalEducationAgencyAccountability)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILocalEducationAgencyAccountability) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ILocalEducationAgencyAccountabilitySynchronizationSourceSupport.IsGunFreeSchoolsActReportingStatusTypeSupported  { get { return true; } set { } }
 
        bool ILocalEducationAgencyAccountabilitySynchronizationSourceSupport.IsSchoolChoiceImplementStatusTypeSupported       { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: LocalEducationAgencyCategoryType

namespace EdFi.Ods.Api.Models.Resources.V2.LocalEducationAgencyCategoryType
{
    /// <summary>
    /// A class which represents the edfi.LocalEducationAgencyCategoryType table of the LocalEducationAgencyCategoryType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class LocalEducationAgencyCategoryType : ILocalEducationAgencyCategoryType, IHasETag, ILocalEducationAgencyCategoryTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the LocalEducationAgencyCategoryType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for LocalEducationAgencyCategory
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="localEducationAgencyCategoryTypeId"), NaturalKeyMember]
        public int LocalEducationAgencyCategoryTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ILocalEducationAgencyCategoryType).LocalEducationAgencyCategoryTypeId != null) 
                    hash = hash * 23 + (this as ILocalEducationAgencyCategoryType).LocalEducationAgencyCategoryTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the LocalEducationAgencyCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the LocalEducationAgencyCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILocalEducationAgencyCategoryType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILocalEducationAgencyCategoryType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ILocalEducationAgencyCategoryTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ILocalEducationAgencyCategoryTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ILocalEducationAgencyCategoryTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: Location

namespace EdFi.Ods.Api.Models.Resources.V2.Location
{
    /// <summary>
    /// Represents a reference to the Location resource.
    /// </summary>
    [DataContract]
    public class LocationReference
    {
        [DataMember(Name="classroomIdentificationCode"), NaturalKeyMember]
        public string ClassroomIdentificationCode { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "Location",
                            Href = "/locations"
                                    + "?classroomIdentificationCode=" + WebUtility.UrlEncode(ClassroomIdentificationCode)            
                                    + "&schoolId=" + SchoolId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ClassroomIdentificationCode != default(string)
                && SchoolId != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Location table of the Location aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class Location : ILocation, IHasETag, ILocationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the Location resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _schoolReferenceExplicitlyAssigned;
        private School.SchoolReference _schoolReference;
        private School.SchoolReference ImplicitSchoolReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolReference == null && !_schoolReferenceExplicitlyAssigned)
                    _schoolReference = new School.SchoolReference();

                return _schoolReference;
            }
        }

        [DataMember(Name="schoolReference")][NaturalKeyMember]
        public School.SchoolReference SchoolReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolReference != null
                    && (_schoolReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference;

                return null;
            }
            set 
            { 
                _schoolReferenceExplicitlyAssigned = true;
                _schoolReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="classroomIdentificationCode"), NaturalKeyMember]
        public string ClassroomIdentificationCode { get; set; }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int ILocation.SchoolId
        {
            get
            {
                if (ImplicitSchoolReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // School
                _schoolReferenceExplicitlyAssigned = false;
                ImplicitSchoolReference.SchoolId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ILocation).ClassroomIdentificationCode != null) 
                    hash = hash * 23 + (this as ILocation).ClassroomIdentificationCode.GetHashCode();
 
                //Referenced Property
                if ((this as ILocation).SchoolId != null) 
                    hash = hash * 23 + (this as ILocation).SchoolId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The most number of seats the class can maintain.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumNumberOfSeats")]
        public int? MaximumNumberOfSeats { get; set; }

        /// <summary>
        /// The number of seats that is most favorable to the class.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="optimalNumberOfSeats")]
        public int? OptimalNumberOfSeats { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ILocation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ILocation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ILocationSynchronizationSourceSupport.IsMaximumNumberOfSeatsSupported  { get { return true; } set { } }
 
        bool ILocationSynchronizationSourceSupport.IsOptimalNumberOfSeatsSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: MagnetSpecialProgramEmphasisSchoolType

namespace EdFi.Ods.Api.Models.Resources.V2.MagnetSpecialProgramEmphasisSchoolType
{
    /// <summary>
    /// A class which represents the edfi.MagnetSpecialProgramEmphasisSchoolType table of the MagnetSpecialProgramEmphasisSchoolType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class MagnetSpecialProgramEmphasisSchoolType : IMagnetSpecialProgramEmphasisSchoolType, IHasETag, IMagnetSpecialProgramEmphasisSchoolTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the MagnetSpecialProgramEmphasisSchoolType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for MagnetSpecialProgramEmphasisSchool
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="magnetSpecialProgramEmphasisSchoolTypeId"), NaturalKeyMember]
        public int MagnetSpecialProgramEmphasisSchoolTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IMagnetSpecialProgramEmphasisSchoolType).MagnetSpecialProgramEmphasisSchoolTypeId != null) 
                    hash = hash * 23 + (this as IMagnetSpecialProgramEmphasisSchoolType).MagnetSpecialProgramEmphasisSchoolTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the MagnetSpecialProgramEmphasisSchool type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the MagnetSpecialProgramEmphasisSchool type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IMagnetSpecialProgramEmphasisSchoolType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IMagnetSpecialProgramEmphasisSchoolType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IMagnetSpecialProgramEmphasisSchoolTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IMagnetSpecialProgramEmphasisSchoolTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IMagnetSpecialProgramEmphasisSchoolTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: MediumOfInstructionType

namespace EdFi.Ods.Api.Models.Resources.V2.MediumOfInstructionType
{
    /// <summary>
    /// A class which represents the edfi.MediumOfInstructionType table of the MediumOfInstructionType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class MediumOfInstructionType : IMediumOfInstructionType, IHasETag, IMediumOfInstructionTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the MediumOfInstructionType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for MediumOfInstruction
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="mediumOfInstructionTypeId"), NaturalKeyMember]
        public int MediumOfInstructionTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IMediumOfInstructionType).MediumOfInstructionTypeId != null) 
                    hash = hash * 23 + (this as IMediumOfInstructionType).MediumOfInstructionTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the MediumOfInstruction type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the MediumOfInstruction type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IMediumOfInstructionType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IMediumOfInstructionType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IMediumOfInstructionTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IMediumOfInstructionTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IMediumOfInstructionTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: MeetingDayType

namespace EdFi.Ods.Api.Models.Resources.V2.MeetingDayType
{
    /// <summary>
    /// A class which represents the edfi.MeetingDayType table of the MeetingDayType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class MeetingDayType : IMeetingDayType, IHasETag, IMeetingDayTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the MeetingDayType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for MeetingDay
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="meetingDayTypeId"), NaturalKeyMember]
        public int MeetingDayTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IMeetingDayType).MeetingDayTypeId != null) 
                    hash = hash * 23 + (this as IMeetingDayType).MeetingDayTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the MeetingDay type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the MeetingDay type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IMeetingDayType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IMeetingDayType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IMeetingDayTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IMeetingDayTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IMeetingDayTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: MethodCreditEarnedType

namespace EdFi.Ods.Api.Models.Resources.V2.MethodCreditEarnedType
{
    /// <summary>
    /// A class which represents the edfi.MethodCreditEarnedType table of the MethodCreditEarnedType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class MethodCreditEarnedType : IMethodCreditEarnedType, IHasETag, IMethodCreditEarnedTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the MethodCreditEarnedType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for MethodCreditEarned
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="methodCreditEarnedTypeId"), NaturalKeyMember]
        public int MethodCreditEarnedTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IMethodCreditEarnedType).MethodCreditEarnedTypeId != null) 
                    hash = hash * 23 + (this as IMethodCreditEarnedType).MethodCreditEarnedTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the MethodCreditEarned type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the MethodCreditEarned type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IMethodCreditEarnedType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IMethodCreditEarnedType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IMethodCreditEarnedTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IMethodCreditEarnedTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IMethodCreditEarnedTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: NetworkPurposeType

namespace EdFi.Ods.Api.Models.Resources.V2.NetworkPurposeType
{
    /// <summary>
    /// A class which represents the edfi.NetworkPurposeType table of the NetworkPurposeType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class NetworkPurposeType : INetworkPurposeType, IHasETag, INetworkPurposeTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the NetworkPurposeType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for NetworkPurpose
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="networkPurposeTypeId"), NaturalKeyMember]
        public int NetworkPurposeTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as INetworkPurposeType).NetworkPurposeTypeId != null) 
                    hash = hash * 23 + (this as INetworkPurposeType).NetworkPurposeTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the NetworkPurpose type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the NetworkPurpose type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((INetworkPurposeType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((INetworkPurposeType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool INetworkPurposeTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool INetworkPurposeTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool INetworkPurposeTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ObjectiveAssessment

namespace EdFi.Ods.Api.Models.Resources.V2.ObjectiveAssessment
{
    /// <summary>
    /// Represents a reference to the ObjectiveAssessment resource.
    /// </summary>
    [DataContract]
    public class ObjectiveAssessmentReference
    {
        [DataMember(Name="assessmentIdentifier"), NaturalKeyMember]
        public string AssessmentIdentifier { get; set; }

        [DataMember(Name="identificationCode"), NaturalKeyMember]
        public string IdentificationCode { get; set; }

        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "ObjectiveAssessment",
                            Href = "/objectiveAssessments"
                                    + "?assessmentIdentifier=" + WebUtility.UrlEncode(AssessmentIdentifier)            
                                    + "&identificationCode=" + WebUtility.UrlEncode(IdentificationCode)            
                                    + "&namespace=" + WebUtility.UrlEncode(Namespace)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return AssessmentIdentifier != default(string)
                && IdentificationCode != default(string)
                && Namespace != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.ObjectiveAssessment table of the ObjectiveAssessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ObjectiveAssessment : IObjectiveAssessment, IHasETag, IObjectiveAssessmentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public ObjectiveAssessment()
        {
            ObjectiveAssessmentAssessmentItems = new List<ObjectiveAssessmentAssessmentItem>();
            ObjectiveAssessmentLearningObjectives = new List<ObjectiveAssessmentLearningObjective>();
            ObjectiveAssessmentLearningStandards = new List<ObjectiveAssessmentLearningStandard>();
            ObjectiveAssessmentPerformanceLevels = new List<ObjectiveAssessmentPerformanceLevel>();
            ObjectiveAssessmentScores = new List<ObjectiveAssessmentScore>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the ObjectiveAssessment resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _assessmentReferenceExplicitlyAssigned;
        private Assessment.AssessmentReference _assessmentReference;
        private Assessment.AssessmentReference ImplicitAssessmentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_assessmentReference == null && !_assessmentReferenceExplicitlyAssigned)
                    _assessmentReference = new Assessment.AssessmentReference();

                return _assessmentReference;
            }
        }

        [DataMember(Name="assessmentReference")][NaturalKeyMember]
        public Assessment.AssessmentReference AssessmentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitAssessmentReference != null
                    && (_assessmentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitAssessmentReference.IsReferenceFullyDefined()))
                    return ImplicitAssessmentReference;

                return null;
            }
            set 
            { 
                _assessmentReferenceExplicitlyAssigned = true;
                _assessmentReference = value;
            }
        }
        private bool _parentObjectiveAssessmentReferenceExplicitlyAssigned;
        private ObjectiveAssessmentReference _parentObjectiveAssessmentReference;
        private ObjectiveAssessmentReference ImplicitParentObjectiveAssessmentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_parentObjectiveAssessmentReference == null && !_parentObjectiveAssessmentReferenceExplicitlyAssigned)
                    _parentObjectiveAssessmentReference = new ObjectiveAssessmentReference();

                return _parentObjectiveAssessmentReference;
            }
        }

        [DataMember(Name="parentObjectiveAssessmentReference")]
        public ObjectiveAssessmentReference ParentObjectiveAssessmentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitParentObjectiveAssessmentReference != null
                    && (_parentObjectiveAssessmentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitParentObjectiveAssessmentReference.IsReferenceFullyDefined()))
                    return ImplicitParentObjectiveAssessmentReference;

                return null;
            }
            set 
            { 
                _parentObjectiveAssessmentReferenceExplicitlyAssigned = true;
                _parentObjectiveAssessmentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IObjectiveAssessment.AssessmentIdentifier
        {
            get
            {
                if (ImplicitAssessmentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAssessmentReference.IsReferenceFullyDefined()))
                    return ImplicitAssessmentReference.AssessmentIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Assessment
                _assessmentReferenceExplicitlyAssigned = false;
                ImplicitAssessmentReference.AssessmentIdentifier = value;

                // ParentObjectiveAssessment
                _parentObjectiveAssessmentReferenceExplicitlyAssigned = false;
                ImplicitParentObjectiveAssessmentReference.AssessmentIdentifier = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode"), NaturalKeyMember]
        public string IdentificationCode { get; set; }

        /// <summary>
        /// Namespace for the Assessment.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IObjectiveAssessment.Namespace
        {
            get
            {
                if (ImplicitAssessmentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAssessmentReference.IsReferenceFullyDefined()))
                    return ImplicitAssessmentReference.Namespace;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Assessment
                _assessmentReferenceExplicitlyAssigned = false;
                ImplicitAssessmentReference.Namespace = value;

                // ParentObjectiveAssessment
                _parentObjectiveAssessmentReferenceExplicitlyAssigned = false;
                ImplicitParentObjectiveAssessmentReference.Namespace = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IObjectiveAssessment).AssessmentIdentifier != null) 
                    hash = hash * 23 + (this as IObjectiveAssessment).AssessmentIdentifier.GetHashCode();
 
                // Standard Property
                if ((this as IObjectiveAssessment).IdentificationCode != null) 
                    hash = hash * 23 + (this as IObjectiveAssessment).IdentificationCode.GetHashCode();
 
                //Referenced Property
                if ((this as IObjectiveAssessment).Namespace != null) 
                    hash = hash * 23 + (this as IObjectiveAssessment).Namespace.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The description of the ObjectiveAssessment (e.g., vocabulary, measurement, or geometry).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The maximum raw score achievable across all assessment items that are correct and scored at the maximum.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maxRawScore")]
        public int? MaxRawScore { get; set; }

        /// <summary>
        /// Reflects the specific nomenclature used for this level of ObjectiveAssessment.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nomenclature")]
        public string Nomenclature { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IObjectiveAssessment.ParentIdentificationCode
        {
            get
            {
                if (ImplicitParentObjectiveAssessmentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitParentObjectiveAssessmentReference.IsReferenceFullyDefined()))
                    return ImplicitParentObjectiveAssessmentReference.IdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ParentObjectiveAssessment
                _parentObjectiveAssessmentReferenceExplicitlyAssigned = false;
                ImplicitParentObjectiveAssessmentReference.IdentificationCode = value;
            }
        }

        /// <summary>
        /// The percentage of the Assessment that tests this objective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="percentOfAssessment")][Range(typeof(decimal), "-9.9999", "9.9999")]
        public decimal? PercentOfAssessment { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<ObjectiveAssessmentAssessmentItem> _objectiveAssessmentAssessmentItems;
        private IList<IObjectiveAssessmentAssessmentItem> _objectiveAssessmentAssessmentItemsCovariant;

        [DataMember(Name="assessmentItems")]
        public IList<ObjectiveAssessmentAssessmentItem> ObjectiveAssessmentAssessmentItems 
        { 
            get { return _objectiveAssessmentAssessmentItems; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<ObjectiveAssessmentAssessmentItem>(value,
                    (s, e) => ((IObjectiveAssessmentAssessmentItem)e.Item).ObjectiveAssessment = this);
                _objectiveAssessmentAssessmentItems = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IObjectiveAssessmentAssessmentItem, ObjectiveAssessmentAssessmentItem>(value);
                covariantList.ItemAdded += (s, e) => ((IObjectiveAssessmentAssessmentItem)e.Item).ObjectiveAssessment = this;
                _objectiveAssessmentAssessmentItemsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IObjectiveAssessmentAssessmentItem> IObjectiveAssessment.ObjectiveAssessmentAssessmentItems
        {
            get { return _objectiveAssessmentAssessmentItemsCovariant; }
            set { ObjectiveAssessmentAssessmentItems = new List<ObjectiveAssessmentAssessmentItem>(value.Cast<ObjectiveAssessmentAssessmentItem>()); }
        }

        private IList<ObjectiveAssessmentLearningObjective> _objectiveAssessmentLearningObjectives;
        private IList<IObjectiveAssessmentLearningObjective> _objectiveAssessmentLearningObjectivesCovariant;

        [DataMember(Name="learningObjectives")]
        public IList<ObjectiveAssessmentLearningObjective> ObjectiveAssessmentLearningObjectives 
        { 
            get { return _objectiveAssessmentLearningObjectives; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<ObjectiveAssessmentLearningObjective>(value,
                    (s, e) => ((IObjectiveAssessmentLearningObjective)e.Item).ObjectiveAssessment = this);
                _objectiveAssessmentLearningObjectives = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IObjectiveAssessmentLearningObjective, ObjectiveAssessmentLearningObjective>(value);
                covariantList.ItemAdded += (s, e) => ((IObjectiveAssessmentLearningObjective)e.Item).ObjectiveAssessment = this;
                _objectiveAssessmentLearningObjectivesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IObjectiveAssessmentLearningObjective> IObjectiveAssessment.ObjectiveAssessmentLearningObjectives
        {
            get { return _objectiveAssessmentLearningObjectivesCovariant; }
            set { ObjectiveAssessmentLearningObjectives = new List<ObjectiveAssessmentLearningObjective>(value.Cast<ObjectiveAssessmentLearningObjective>()); }
        }

        private IList<ObjectiveAssessmentLearningStandard> _objectiveAssessmentLearningStandards;
        private IList<IObjectiveAssessmentLearningStandard> _objectiveAssessmentLearningStandardsCovariant;

        [DataMember(Name="learningStandards")]
        public IList<ObjectiveAssessmentLearningStandard> ObjectiveAssessmentLearningStandards 
        { 
            get { return _objectiveAssessmentLearningStandards; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<ObjectiveAssessmentLearningStandard>(value,
                    (s, e) => ((IObjectiveAssessmentLearningStandard)e.Item).ObjectiveAssessment = this);
                _objectiveAssessmentLearningStandards = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IObjectiveAssessmentLearningStandard, ObjectiveAssessmentLearningStandard>(value);
                covariantList.ItemAdded += (s, e) => ((IObjectiveAssessmentLearningStandard)e.Item).ObjectiveAssessment = this;
                _objectiveAssessmentLearningStandardsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IObjectiveAssessmentLearningStandard> IObjectiveAssessment.ObjectiveAssessmentLearningStandards
        {
            get { return _objectiveAssessmentLearningStandardsCovariant; }
            set { ObjectiveAssessmentLearningStandards = new List<ObjectiveAssessmentLearningStandard>(value.Cast<ObjectiveAssessmentLearningStandard>()); }
        }

        private IList<ObjectiveAssessmentPerformanceLevel> _objectiveAssessmentPerformanceLevels;
        private IList<IObjectiveAssessmentPerformanceLevel> _objectiveAssessmentPerformanceLevelsCovariant;

        [DataMember(Name="performanceLevels")]
        public IList<ObjectiveAssessmentPerformanceLevel> ObjectiveAssessmentPerformanceLevels 
        { 
            get { return _objectiveAssessmentPerformanceLevels; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<ObjectiveAssessmentPerformanceLevel>(value,
                    (s, e) => ((IObjectiveAssessmentPerformanceLevel)e.Item).ObjectiveAssessment = this);
                _objectiveAssessmentPerformanceLevels = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IObjectiveAssessmentPerformanceLevel, ObjectiveAssessmentPerformanceLevel>(value);
                covariantList.ItemAdded += (s, e) => ((IObjectiveAssessmentPerformanceLevel)e.Item).ObjectiveAssessment = this;
                _objectiveAssessmentPerformanceLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IObjectiveAssessmentPerformanceLevel> IObjectiveAssessment.ObjectiveAssessmentPerformanceLevels
        {
            get { return _objectiveAssessmentPerformanceLevelsCovariant; }
            set { ObjectiveAssessmentPerformanceLevels = new List<ObjectiveAssessmentPerformanceLevel>(value.Cast<ObjectiveAssessmentPerformanceLevel>()); }
        }

        private IList<ObjectiveAssessmentScore> _objectiveAssessmentScores;
        private IList<IObjectiveAssessmentScore> _objectiveAssessmentScoresCovariant;

        [DataMember(Name="scores")]
        public IList<ObjectiveAssessmentScore> ObjectiveAssessmentScores 
        { 
            get { return _objectiveAssessmentScores; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<ObjectiveAssessmentScore>(value,
                    (s, e) => ((IObjectiveAssessmentScore)e.Item).ObjectiveAssessment = this);
                _objectiveAssessmentScores = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IObjectiveAssessmentScore, ObjectiveAssessmentScore>(value);
                covariantList.ItemAdded += (s, e) => ((IObjectiveAssessmentScore)e.Item).ObjectiveAssessment = this;
                _objectiveAssessmentScoresCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IObjectiveAssessmentScore> IObjectiveAssessment.ObjectiveAssessmentScores
        {
            get { return _objectiveAssessmentScoresCovariant; }
            set { ObjectiveAssessmentScores = new List<ObjectiveAssessmentScore>(value.Cast<ObjectiveAssessmentScore>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_objectiveAssessmentAssessmentItems != null) foreach (var item in _objectiveAssessmentAssessmentItems)
            {
                item.ObjectiveAssessment = this;
            }
            
            if (_objectiveAssessmentLearningObjectives != null) foreach (var item in _objectiveAssessmentLearningObjectives)
            {
                item.ObjectiveAssessment = this;
            }
            
            if (_objectiveAssessmentLearningStandards != null) foreach (var item in _objectiveAssessmentLearningStandards)
            {
                item.ObjectiveAssessment = this;
            }
            
            if (_objectiveAssessmentPerformanceLevels != null) foreach (var item in _objectiveAssessmentPerformanceLevels)
            {
                item.ObjectiveAssessment = this;
            }
            
            if (_objectiveAssessmentScores != null) foreach (var item in _objectiveAssessmentScores)
            {
                item.ObjectiveAssessment = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IObjectiveAssessment)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IObjectiveAssessment) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IObjectiveAssessmentSynchronizationSourceSupport.IsDescriptionSupported                            { get { return true; } set { } }
 
        bool IObjectiveAssessmentSynchronizationSourceSupport.IsMaxRawScoreSupported                            { get { return true; } set { } }
 
        bool IObjectiveAssessmentSynchronizationSourceSupport.IsNomenclatureSupported                           { get { return true; } set { } }
 
        bool IObjectiveAssessmentSynchronizationSourceSupport.IsObjectiveAssessmentAssessmentItemsSupported     { get { return true; } set { } }
 
        bool IObjectiveAssessmentSynchronizationSourceSupport.IsObjectiveAssessmentLearningObjectivesSupported  { get { return true; } set { } }
 
        bool IObjectiveAssessmentSynchronizationSourceSupport.IsObjectiveAssessmentLearningStandardsSupported   { get { return true; } set { } }
 
        bool IObjectiveAssessmentSynchronizationSourceSupport.IsObjectiveAssessmentPerformanceLevelsSupported   { get { return true; } set { } }
 
        bool IObjectiveAssessmentSynchronizationSourceSupport.IsObjectiveAssessmentScoresSupported              { get { return true; } set { } }
 
        bool IObjectiveAssessmentSynchronizationSourceSupport.IsParentIdentificationCodeSupported               { get { return true; } set { } }
 
        bool IObjectiveAssessmentSynchronizationSourceSupport.IsPercentOfAssessmentSupported                    { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IObjectiveAssessmentAssessmentItem, bool> IObjectiveAssessmentSynchronizationSourceSupport.IsObjectiveAssessmentAssessmentItemIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IObjectiveAssessmentLearningObjective, bool> IObjectiveAssessmentSynchronizationSourceSupport.IsObjectiveAssessmentLearningObjectiveIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IObjectiveAssessmentLearningStandard, bool> IObjectiveAssessmentSynchronizationSourceSupport.IsObjectiveAssessmentLearningStandardIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IObjectiveAssessmentPerformanceLevel, bool> IObjectiveAssessmentSynchronizationSourceSupport.IsObjectiveAssessmentPerformanceLevelIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IObjectiveAssessmentScore, bool> IObjectiveAssessmentSynchronizationSourceSupport.IsObjectiveAssessmentScoreIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// Represents a reference from the ObjectiveAssessmentAssessmentItem entity to the AssessmentItem resource.
    /// </summary>
    [DataContract]
    public class ObjectiveAssessmentAssessmentItemToAssessmentItemReference
    {
        private IObjectiveAssessmentAssessmentItem backReference;

        // Parameterless constructor for deserialization
        public ObjectiveAssessmentAssessmentItemToAssessmentItemReference() { }

        // Constructor for inline initialization in parent
        public ObjectiveAssessmentAssessmentItemToAssessmentItemReference(IObjectiveAssessmentAssessmentItem backReference)
        {
            this.backReference = backReference;
        }

        // Expose back reference internally for access after JSON deserialization to enable link generation
        internal IObjectiveAssessmentAssessmentItem BackReference
        {
            get { return backReference; }
            set { backReference = value; }
        }


        [DataMember(Name="identificationCode"), NaturalKeyMember]
        public string IdentificationCode { get; set; }
        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Can't generate a link without the back reference
                    if (backReference == null)
                        return null;
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "AssessmentItem",
                            Href = "/assessmentItems"
                                    + "?assessmentIdentifier=" + WebUtility.UrlEncode(backReference.ObjectiveAssessment.AssessmentIdentifier)            
                                    + "&identificationCode=" + WebUtility.UrlEncode(IdentificationCode)            
                                    + "&namespace=" + WebUtility.UrlEncode(backReference.ObjectiveAssessment.Namespace)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return backReference.ObjectiveAssessment != null && backReference.ObjectiveAssessment.AssessmentIdentifier != default(string)
                && IdentificationCode != default(string)
                && backReference.ObjectiveAssessment != null && backReference.ObjectiveAssessment.Namespace != default(string)
                ;
        }
    }

    /// <summary>
    /// A class which represents the edfi.ObjectiveAssessmentAssessmentItem table of the ObjectiveAssessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ObjectiveAssessmentAssessmentItem : IObjectiveAssessmentAssessmentItem, IObjectiveAssessmentAssessmentItemSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _assessmentItemReferenceExplicitlyAssigned;
        private ObjectiveAssessmentAssessmentItemToAssessmentItemReference _assessmentItemReference;
        private ObjectiveAssessmentAssessmentItemToAssessmentItemReference ImplicitAssessmentItemReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_assessmentItemReference == null && !_assessmentItemReferenceExplicitlyAssigned)
                    _assessmentItemReference = new ObjectiveAssessmentAssessmentItemToAssessmentItemReference(this);

                return _assessmentItemReference;
            }
        }

        [DataMember(Name="assessmentItemReference")][NaturalKeyMember]
        public ObjectiveAssessmentAssessmentItemToAssessmentItemReference AssessmentItemReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitAssessmentItemReference != null
                    && (_assessmentItemReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitAssessmentItemReference.IsReferenceFullyDefined()))
                    return ImplicitAssessmentItemReference;

                return null;
            }
            set 
            { 
                _assessmentItemReferenceExplicitlyAssigned = true;
                _assessmentItemReference = value;
                _assessmentItemReference.BackReference = this;             }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IObjectiveAssessment _objectiveAssessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IObjectiveAssessment IObjectiveAssessmentAssessmentItem.ObjectiveAssessment
        {
            get { return _objectiveAssessment; }
            set { _objectiveAssessment = value; }
        }

        internal IObjectiveAssessment ObjectiveAssessment
        {
            set { _objectiveAssessment = value; }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IObjectiveAssessmentAssessmentItem.AssessmentItemIdentificationCode
        {
            get
            {
                if (ImplicitAssessmentItemReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAssessmentItemReference.IsReferenceFullyDefined()))
                    return ImplicitAssessmentItemReference.IdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // AssessmentItem
                _assessmentItemReferenceExplicitlyAssigned = false;
                ImplicitAssessmentItemReference.IdentificationCode = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_objectiveAssessment != null) 
                    hash = hash * 23 + _objectiveAssessment.GetHashCode();
 
                //Referenced Property
                if ((this as IObjectiveAssessmentAssessmentItem).AssessmentItemIdentificationCode != null) 
                    hash = hash * 23 + (this as IObjectiveAssessmentAssessmentItem).AssessmentItemIdentificationCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_assessmentItemReference != null)
                _assessmentItemReference.BackReference = this;
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IObjectiveAssessmentAssessmentItem)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IObjectiveAssessmentAssessmentItem) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.ObjectiveAssessmentLearningObjective table of the ObjectiveAssessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ObjectiveAssessmentLearningObjective : IObjectiveAssessmentLearningObjective, IObjectiveAssessmentLearningObjectiveSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _learningObjectiveReferenceExplicitlyAssigned;
        private LearningObjective.LearningObjectiveReference _learningObjectiveReference;
        private LearningObjective.LearningObjectiveReference ImplicitLearningObjectiveReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_learningObjectiveReference == null && !_learningObjectiveReferenceExplicitlyAssigned)
                    _learningObjectiveReference = new LearningObjective.LearningObjectiveReference();

                return _learningObjectiveReference;
            }
        }

        [DataMember(Name="learningObjectiveReference")][NaturalKeyMember]
        public LearningObjective.LearningObjectiveReference LearningObjectiveReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitLearningObjectiveReference != null
                    && (_learningObjectiveReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitLearningObjectiveReference;

                return null;
            }
            set 
            { 
                _learningObjectiveReferenceExplicitlyAssigned = true;
                _learningObjectiveReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IObjectiveAssessment _objectiveAssessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IObjectiveAssessment IObjectiveAssessmentLearningObjective.ObjectiveAssessment
        {
            get { return _objectiveAssessment; }
            set { _objectiveAssessment = value; }
        }

        internal IObjectiveAssessment ObjectiveAssessment
        {
            set { _objectiveAssessment = value; }
        }

        /// <summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IObjectiveAssessmentLearningObjective.LearningObjectiveId
        {
            get
            {
                if (ImplicitLearningObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitLearningObjectiveReference.LearningObjectiveId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // LearningObjective
                _learningObjectiveReferenceExplicitlyAssigned = false;
                ImplicitLearningObjectiveReference.LearningObjectiveId = value;
            }
        }

        /// <summary>
        /// Namespace for the LearningObjective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IObjectiveAssessmentLearningObjective.LearningObjectiveNamespace
        {
            get
            {
                if (ImplicitLearningObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitLearningObjectiveReference.Namespace;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // LearningObjective
                _learningObjectiveReferenceExplicitlyAssigned = false;
                ImplicitLearningObjectiveReference.Namespace = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_objectiveAssessment != null) 
                    hash = hash * 23 + _objectiveAssessment.GetHashCode();
 
                //Referenced Property
                if ((this as IObjectiveAssessmentLearningObjective).LearningObjectiveId != null) 
                    hash = hash * 23 + (this as IObjectiveAssessmentLearningObjective).LearningObjectiveId.GetHashCode();
 
                //Referenced Property
                if ((this as IObjectiveAssessmentLearningObjective).LearningObjectiveNamespace != null) 
                    hash = hash * 23 + (this as IObjectiveAssessmentLearningObjective).LearningObjectiveNamespace.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IObjectiveAssessmentLearningObjective)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IObjectiveAssessmentLearningObjective) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.ObjectiveAssessmentLearningStandard table of the ObjectiveAssessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ObjectiveAssessmentLearningStandard : IObjectiveAssessmentLearningStandard, IObjectiveAssessmentLearningStandardSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _learningStandardReferenceExplicitlyAssigned;
        private LearningStandard.LearningStandardReference _learningStandardReference;
        private LearningStandard.LearningStandardReference ImplicitLearningStandardReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_learningStandardReference == null && !_learningStandardReferenceExplicitlyAssigned)
                    _learningStandardReference = new LearningStandard.LearningStandardReference();

                return _learningStandardReference;
            }
        }

        [DataMember(Name="learningStandardReference")][NaturalKeyMember]
        public LearningStandard.LearningStandardReference LearningStandardReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitLearningStandardReference != null
                    && (_learningStandardReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitLearningStandardReference.IsReferenceFullyDefined()))
                    return ImplicitLearningStandardReference;

                return null;
            }
            set 
            { 
                _learningStandardReferenceExplicitlyAssigned = true;
                _learningStandardReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IObjectiveAssessment _objectiveAssessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IObjectiveAssessment IObjectiveAssessmentLearningStandard.ObjectiveAssessment
        {
            get { return _objectiveAssessment; }
            set { _objectiveAssessment = value; }
        }

        internal IObjectiveAssessment ObjectiveAssessment
        {
            set { _objectiveAssessment = value; }
        }

        /// <summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IObjectiveAssessmentLearningStandard.LearningStandardId
        {
            get
            {
                if (ImplicitLearningStandardReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitLearningStandardReference.IsReferenceFullyDefined()))
                    return ImplicitLearningStandardReference.LearningStandardId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // LearningStandard
                _learningStandardReferenceExplicitlyAssigned = false;
                ImplicitLearningStandardReference.LearningStandardId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_objectiveAssessment != null) 
                    hash = hash * 23 + _objectiveAssessment.GetHashCode();
 
                //Referenced Property
                if ((this as IObjectiveAssessmentLearningStandard).LearningStandardId != null) 
                    hash = hash * 23 + (this as IObjectiveAssessmentLearningStandard).LearningStandardId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IObjectiveAssessmentLearningStandard)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IObjectiveAssessmentLearningStandard) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.ObjectiveAssessmentPerformanceLevel table of the ObjectiveAssessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ObjectiveAssessmentPerformanceLevel : IObjectiveAssessmentPerformanceLevel, IObjectiveAssessmentPerformanceLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IObjectiveAssessment _objectiveAssessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IObjectiveAssessment IObjectiveAssessmentPerformanceLevel.ObjectiveAssessment
        {
            get { return _objectiveAssessment; }
            set { _objectiveAssessment = value; }
        }

        internal IObjectiveAssessment ObjectiveAssessment
        {
            set { _objectiveAssessment = value; }
        }

        /// <summary>
        /// The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="assessmentReportingMethodType"), NaturalKeyMember]
        public string AssessmentReportingMethodType { get; set; }

        /// <summary>
        /// The performance level(s) defined for the assessment.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="performanceLevelDescriptor"), NaturalKeyMember]
        public string PerformanceLevelDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_objectiveAssessment != null) 
                    hash = hash * 23 + _objectiveAssessment.GetHashCode();
 
                // Standard Property
                if ((this as IObjectiveAssessmentPerformanceLevel).AssessmentReportingMethodType != null) 
                    hash = hash * 23 + (this as IObjectiveAssessmentPerformanceLevel).AssessmentReportingMethodType.GetHashCode();
 
                // Standard Property
                if ((this as IObjectiveAssessmentPerformanceLevel).PerformanceLevelDescriptor != null) 
                    hash = hash * 23 + (this as IObjectiveAssessmentPerformanceLevel).PerformanceLevelDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The maximum score to make the indicated level of performance.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumScore")]
        public string MaximumScore { get; set; }

        /// <summary>
        /// The minimum score required to make the indicated level of performance.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minimumScore")]
        public string MinimumScore { get; set; }

        /// <summary>
        /// The datatype of the result. The results can be expressed as a number, percentile,range, level, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="resultDatatypeType")]
        public string ResultDatatypeType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IObjectiveAssessmentPerformanceLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IObjectiveAssessmentPerformanceLevel) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IObjectiveAssessmentPerformanceLevelSynchronizationSourceSupport.IsMaximumScoreSupported        { get { return true; } set { } }
 
        bool IObjectiveAssessmentPerformanceLevelSynchronizationSourceSupport.IsMinimumScoreSupported        { get { return true; } set { } }
 
        bool IObjectiveAssessmentPerformanceLevelSynchronizationSourceSupport.IsResultDatatypeTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.ObjectiveAssessmentScore table of the ObjectiveAssessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ObjectiveAssessmentScore : IObjectiveAssessmentScore, IObjectiveAssessmentScoreSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IObjectiveAssessment _objectiveAssessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IObjectiveAssessment IObjectiveAssessmentScore.ObjectiveAssessment
        {
            get { return _objectiveAssessment; }
            set { _objectiveAssessment = value; }
        }

        internal IObjectiveAssessment ObjectiveAssessment
        {
            set { _objectiveAssessment = value; }
        }

        /// <summary>
        /// The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="assessmentReportingMethodType"), NaturalKeyMember]
        public string AssessmentReportingMethodType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_objectiveAssessment != null) 
                    hash = hash * 23 + _objectiveAssessment.GetHashCode();
 
                // Standard Property
                if ((this as IObjectiveAssessmentScore).AssessmentReportingMethodType != null) 
                    hash = hash * 23 + (this as IObjectiveAssessmentScore).AssessmentReportingMethodType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The maximum score possible on the assessment.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumScore")]
        public string MaximumScore { get; set; }

        /// <summary>
        /// The minimum score possible on the assessment.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minimumScore")]
        public string MinimumScore { get; set; }

        /// <summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="resultDatatypeType")]
        public string ResultDatatypeType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IObjectiveAssessmentScore)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IObjectiveAssessmentScore) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IObjectiveAssessmentScoreSynchronizationSourceSupport.IsMaximumScoreSupported        { get { return true; } set { } }
 
        bool IObjectiveAssessmentScoreSynchronizationSourceSupport.IsMinimumScoreSupported        { get { return true; } set { } }
 
        bool IObjectiveAssessmentScoreSynchronizationSourceSupport.IsResultDatatypeTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: OldEthnicityType

namespace EdFi.Ods.Api.Models.Resources.V2.OldEthnicityType
{
    /// <summary>
    /// A class which represents the edfi.OldEthnicityType table of the OldEthnicityType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class OldEthnicityType : IOldEthnicityType, IHasETag, IOldEthnicityTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the OldEthnicityType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for OldEthnicity
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="oldEthnicityTypeId"), NaturalKeyMember]
        public int OldEthnicityTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IOldEthnicityType).OldEthnicityTypeId != null) 
                    hash = hash * 23 + (this as IOldEthnicityType).OldEthnicityTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the OldEthnicity type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the OldEthnicity type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IOldEthnicityType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IOldEthnicityType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IOldEthnicityTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IOldEthnicityTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IOldEthnicityTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: OpenStaffPosition

namespace EdFi.Ods.Api.Models.Resources.V2.OpenStaffPosition
{
    /// <summary>
    /// Represents a reference to the OpenStaffPosition resource.
    /// </summary>
    [DataContract]
    public class OpenStaffPositionReference
    {
        [DataMember(Name="datePosted"), NaturalKeyMember]
        public DateTime DatePosted { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="employmentStatusDescriptor"), NaturalKeyMember]
        public string EmploymentStatusDescriptor { get; set; }

        [DataMember(Name="requisitionNumber"), NaturalKeyMember]
        public string RequisitionNumber { get; set; }

        [DataMember(Name="staffClassificationDescriptor"), NaturalKeyMember]
        public string StaffClassificationDescriptor { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "OpenStaffPosition",
                            Href = "/openStaffPositions"
                                    + "?datePosted=" + JsonConvert.SerializeObject(DatePosted).Replace("\"", string.Empty)            
                                    + "&educationOrganizationId=" + EducationOrganizationId            
                                    + "&employmentStatusDescriptor=" + WebUtility.UrlEncode(EmploymentStatusDescriptor)            
                                    + "&requisitionNumber=" + WebUtility.UrlEncode(RequisitionNumber)            
                                    + "&staffClassificationDescriptor=" + WebUtility.UrlEncode(StaffClassificationDescriptor)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return DatePosted != default(DateTime)
                && EducationOrganizationId != default(int)
                && EmploymentStatusDescriptor != default(string)
                && RequisitionNumber != default(string)
                && StaffClassificationDescriptor != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.OpenStaffPosition table of the OpenStaffPosition aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class OpenStaffPosition : IOpenStaffPosition, IHasETag, IOpenStaffPositionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public OpenStaffPosition()
        {
            OpenStaffPositionAcademicSubjects = new List<OpenStaffPositionAcademicSubject>();
            OpenStaffPositionInstructionalGradeLevels = new List<OpenStaffPositionInstructionalGradeLevel>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the OpenStaffPosition resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Date the OpenStaffPosition was posted.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="datePosted"), NaturalKeyMember]
        public DateTime DatePosted { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IOpenStaffPosition.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// Reflects the type of employment or contract desired for the position; for example:          Probationary          Contractual          Substitute/temporary          Tenured or permanent          Volunteer/no contract          ...
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="employmentStatusDescriptor"), NaturalKeyMember]
        public string EmploymentStatusDescriptor { get; set; }

        /// <summary>
        /// The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="requisitionNumber"), NaturalKeyMember]
        public string RequisitionNumber { get; set; }

        /// <summary>
        /// The titles of employment, official status, or rank of education staff.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="staffClassificationDescriptor"), NaturalKeyMember]
        public string StaffClassificationDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IOpenStaffPosition).DatePosted != null) 
                    hash = hash * 23 + (this as IOpenStaffPosition).DatePosted.GetHashCode();
 
                //Referenced Property
                if ((this as IOpenStaffPosition).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IOpenStaffPosition).EducationOrganizationId.GetHashCode();
 
                // Standard Property
                if ((this as IOpenStaffPosition).EmploymentStatusDescriptor != null) 
                    hash = hash * 23 + (this as IOpenStaffPosition).EmploymentStatusDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as IOpenStaffPosition).RequisitionNumber != null) 
                    hash = hash * 23 + (this as IOpenStaffPosition).RequisitionNumber.GetHashCode();
 
                // Standard Property
                if ((this as IOpenStaffPosition).StaffClassificationDescriptor != null) 
                    hash = hash * 23 + (this as IOpenStaffPosition).StaffClassificationDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date the posting was removed or filled.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="datePostingRemoved")]
        public DateTime? DatePostingRemoved { get; set; }

        /// <summary>
        /// The descriptive name of an individual's position.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="positionTitle")]
        public string PositionTitle { get; set; }

        /// <summary>
        /// Indication of whether the OpenStaffPosition was filled or retired without filling.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="postingResultType")]
        public string PostingResultType { get; set; }

        /// <summary>
        /// The name of the program for which the OpenStaffPosition will be assigned; for example:          Regular education          Title I-Academic          Title I-Non-Academic          Special Education'          Bilingual/English as a Second Language.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="programAssignmentDescriptor")]
        public string ProgramAssignmentDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<OpenStaffPositionAcademicSubject> _openStaffPositionAcademicSubjects;
        private IList<IOpenStaffPositionAcademicSubject> _openStaffPositionAcademicSubjectsCovariant;

        [DataMember(Name="academicSubjects")]
        public IList<OpenStaffPositionAcademicSubject> OpenStaffPositionAcademicSubjects 
        { 
            get { return _openStaffPositionAcademicSubjects; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<OpenStaffPositionAcademicSubject>(value,
                    (s, e) => ((IOpenStaffPositionAcademicSubject)e.Item).OpenStaffPosition = this);
                _openStaffPositionAcademicSubjects = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IOpenStaffPositionAcademicSubject, OpenStaffPositionAcademicSubject>(value);
                covariantList.ItemAdded += (s, e) => ((IOpenStaffPositionAcademicSubject)e.Item).OpenStaffPosition = this;
                _openStaffPositionAcademicSubjectsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IOpenStaffPositionAcademicSubject> IOpenStaffPosition.OpenStaffPositionAcademicSubjects
        {
            get { return _openStaffPositionAcademicSubjectsCovariant; }
            set { OpenStaffPositionAcademicSubjects = new List<OpenStaffPositionAcademicSubject>(value.Cast<OpenStaffPositionAcademicSubject>()); }
        }

        private IList<OpenStaffPositionInstructionalGradeLevel> _openStaffPositionInstructionalGradeLevels;
        private IList<IOpenStaffPositionInstructionalGradeLevel> _openStaffPositionInstructionalGradeLevelsCovariant;

        [DataMember(Name="instructionalGradeLevels")]
        public IList<OpenStaffPositionInstructionalGradeLevel> OpenStaffPositionInstructionalGradeLevels 
        { 
            get { return _openStaffPositionInstructionalGradeLevels; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<OpenStaffPositionInstructionalGradeLevel>(value,
                    (s, e) => ((IOpenStaffPositionInstructionalGradeLevel)e.Item).OpenStaffPosition = this);
                _openStaffPositionInstructionalGradeLevels = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IOpenStaffPositionInstructionalGradeLevel, OpenStaffPositionInstructionalGradeLevel>(value);
                covariantList.ItemAdded += (s, e) => ((IOpenStaffPositionInstructionalGradeLevel)e.Item).OpenStaffPosition = this;
                _openStaffPositionInstructionalGradeLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IOpenStaffPositionInstructionalGradeLevel> IOpenStaffPosition.OpenStaffPositionInstructionalGradeLevels
        {
            get { return _openStaffPositionInstructionalGradeLevelsCovariant; }
            set { OpenStaffPositionInstructionalGradeLevels = new List<OpenStaffPositionInstructionalGradeLevel>(value.Cast<OpenStaffPositionInstructionalGradeLevel>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_openStaffPositionAcademicSubjects != null) foreach (var item in _openStaffPositionAcademicSubjects)
            {
                item.OpenStaffPosition = this;
            }
            
            if (_openStaffPositionInstructionalGradeLevels != null) foreach (var item in _openStaffPositionInstructionalGradeLevels)
            {
                item.OpenStaffPosition = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IOpenStaffPosition)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IOpenStaffPosition) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IOpenStaffPositionSynchronizationSourceSupport.IsDatePostingRemovedSupported                         { get { return true; } set { } }
 
        bool IOpenStaffPositionSynchronizationSourceSupport.IsOpenStaffPositionAcademicSubjectsSupported          { get { return true; } set { } }
 
        bool IOpenStaffPositionSynchronizationSourceSupport.IsOpenStaffPositionInstructionalGradeLevelsSupported  { get { return true; } set { } }
 
        bool IOpenStaffPositionSynchronizationSourceSupport.IsPositionTitleSupported                              { get { return true; } set { } }
 
        bool IOpenStaffPositionSynchronizationSourceSupport.IsPostingResultTypeSupported                          { get { return true; } set { } }
 
        bool IOpenStaffPositionSynchronizationSourceSupport.IsProgramAssignmentDescriptorSupported                { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IOpenStaffPositionAcademicSubject, bool> IOpenStaffPositionSynchronizationSourceSupport.IsOpenStaffPositionAcademicSubjectIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IOpenStaffPositionInstructionalGradeLevel, bool> IOpenStaffPositionSynchronizationSourceSupport.IsOpenStaffPositionInstructionalGradeLevelIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.OpenStaffPositionAcademicSubject table of the OpenStaffPosition aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class OpenStaffPositionAcademicSubject : IOpenStaffPositionAcademicSubject, IOpenStaffPositionAcademicSubjectSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IOpenStaffPosition _openStaffPosition;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IOpenStaffPosition IOpenStaffPositionAcademicSubject.OpenStaffPosition
        {
            get { return _openStaffPosition; }
            set { _openStaffPosition = value; }
        }

        internal IOpenStaffPosition OpenStaffPosition
        {
            set { _openStaffPosition = value; }
        }

        /// <summary>
        /// The teaching field required for the OpenStaffPosition, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="academicSubjectDescriptor"), NaturalKeyMember]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_openStaffPosition != null) 
                    hash = hash * 23 + _openStaffPosition.GetHashCode();
 
                // Standard Property
                if ((this as IOpenStaffPositionAcademicSubject).AcademicSubjectDescriptor != null) 
                    hash = hash * 23 + (this as IOpenStaffPositionAcademicSubject).AcademicSubjectDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IOpenStaffPositionAcademicSubject)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IOpenStaffPositionAcademicSubject) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.OpenStaffPositionInstructionalGradeLevel table of the OpenStaffPosition aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class OpenStaffPositionInstructionalGradeLevel : IOpenStaffPositionInstructionalGradeLevel, IOpenStaffPositionInstructionalGradeLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IOpenStaffPosition _openStaffPosition;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IOpenStaffPosition IOpenStaffPositionInstructionalGradeLevel.OpenStaffPosition
        {
            get { return _openStaffPosition; }
            set { _openStaffPosition = value; }
        }

        internal IOpenStaffPosition OpenStaffPosition
        {
            set { _openStaffPosition = value; }
        }

        /// <summary>
        /// The set of grade levels for which the position's assignment is responsible.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_openStaffPosition != null) 
                    hash = hash * 23 + _openStaffPosition.GetHashCode();
 
                // Standard Property
                if ((this as IOpenStaffPositionInstructionalGradeLevel).GradeLevelDescriptor != null) 
                    hash = hash * 23 + (this as IOpenStaffPositionInstructionalGradeLevel).GradeLevelDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IOpenStaffPositionInstructionalGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IOpenStaffPositionInstructionalGradeLevel) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: OperationalStatusType

namespace EdFi.Ods.Api.Models.Resources.V2.OperationalStatusType
{
    /// <summary>
    /// A class which represents the edfi.OperationalStatusType table of the OperationalStatusType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class OperationalStatusType : IOperationalStatusType, IHasETag, IOperationalStatusTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the OperationalStatusType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for OperationalStatus
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="operationalStatusTypeId"), NaturalKeyMember]
        public int OperationalStatusTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IOperationalStatusType).OperationalStatusTypeId != null) 
                    hash = hash * 23 + (this as IOperationalStatusType).OperationalStatusTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the OperationalStatus type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the OperationalStatus type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IOperationalStatusType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IOperationalStatusType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IOperationalStatusTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IOperationalStatusTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IOperationalStatusTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: OtherNameType

namespace EdFi.Ods.Api.Models.Resources.V2.OtherNameType
{
    /// <summary>
    /// A class which represents the edfi.OtherNameType table of the OtherNameType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class OtherNameType : IOtherNameType, IHasETag, IOtherNameTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the OtherNameType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for OtherName
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="otherNameTypeId"), NaturalKeyMember]
        public int OtherNameTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IOtherNameType).OtherNameTypeId != null) 
                    hash = hash * 23 + (this as IOtherNameType).OtherNameTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the OtherName type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the OtherName type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IOtherNameType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IOtherNameType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IOtherNameTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IOtherNameTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IOtherNameTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: Parent

namespace EdFi.Ods.Api.Models.Resources.V2.Parent
{
    /// <summary>
    /// Represents a reference to the Parent resource.
    /// </summary>
    [DataContract]
    public class ParentReference
    {
        [DataMember(Name="parentUniqueId"), NaturalKeyMember]
        public string ParentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "Parent",
                            Href = "/parents"
                                    + "?parentUniqueId=" + WebUtility.UrlEncode(ParentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ParentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Parent table of the Parent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class Parent : IParent, IHasETag, IParentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Parent()
        {
            ParentAddresses = new List<ParentAddress>();
            ParentElectronicMails = new List<ParentElectronicMail>();
            ParentIdentificationDocuments = new List<ParentIdentificationDocument>();
            ParentInternationalAddresses = new List<ParentInternationalAddress>();
            ParentOtherNames = new List<ParentOtherName>();
            ParentTelephones = new List<ParentTelephone>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Parent resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a parent.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="parentUniqueId"), NaturalKeyMember, UniqueId]
        public string ParentUniqueId { get; set; }
 
        string IIdentifiablePerson.UniqueId { get { return ParentUniqueId; } }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Property
                if ((this as IParent).ParentUniqueId != null) 
                    hash = hash * 23 + (this as IParent).ParentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexType")]
        public string SexType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<ParentAddress> _parentAddresses;
        private IList<IParentAddress> _parentAddressesCovariant;

        [DataMember(Name="addresses")]
        public IList<ParentAddress> ParentAddresses 
        { 
            get { return _parentAddresses; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<ParentAddress>(value,
                    (s, e) => ((IParentAddress)e.Item).Parent = this);
                _parentAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IParentAddress, ParentAddress>(value);
                covariantList.ItemAdded += (s, e) => ((IParentAddress)e.Item).Parent = this;
                _parentAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IParentAddress> IParent.ParentAddresses
        {
            get { return _parentAddressesCovariant; }
            set { ParentAddresses = new List<ParentAddress>(value.Cast<ParentAddress>()); }
        }

        private IList<ParentElectronicMail> _parentElectronicMails;
        private IList<IParentElectronicMail> _parentElectronicMailsCovariant;

        [DataMember(Name="electronicMails")]
        public IList<ParentElectronicMail> ParentElectronicMails 
        { 
            get { return _parentElectronicMails; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<ParentElectronicMail>(value,
                    (s, e) => ((IParentElectronicMail)e.Item).Parent = this);
                _parentElectronicMails = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IParentElectronicMail, ParentElectronicMail>(value);
                covariantList.ItemAdded += (s, e) => ((IParentElectronicMail)e.Item).Parent = this;
                _parentElectronicMailsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IParentElectronicMail> IParent.ParentElectronicMails
        {
            get { return _parentElectronicMailsCovariant; }
            set { ParentElectronicMails = new List<ParentElectronicMail>(value.Cast<ParentElectronicMail>()); }
        }

        private IList<ParentIdentificationDocument> _parentIdentificationDocuments;
        private IList<IParentIdentificationDocument> _parentIdentificationDocumentsCovariant;

        [DataMember(Name="identificationDocuments")]
        public IList<ParentIdentificationDocument> ParentIdentificationDocuments 
        { 
            get { return _parentIdentificationDocuments; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<ParentIdentificationDocument>(value,
                    (s, e) => ((IParentIdentificationDocument)e.Item).Parent = this);
                _parentIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IParentIdentificationDocument, ParentIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((IParentIdentificationDocument)e.Item).Parent = this;
                _parentIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IParentIdentificationDocument> IParent.ParentIdentificationDocuments
        {
            get { return _parentIdentificationDocumentsCovariant; }
            set { ParentIdentificationDocuments = new List<ParentIdentificationDocument>(value.Cast<ParentIdentificationDocument>()); }
        }

        private IList<ParentInternationalAddress> _parentInternationalAddresses;
        private IList<IParentInternationalAddress> _parentInternationalAddressesCovariant;

        [DataMember(Name="internationalAddresses")]
        public IList<ParentInternationalAddress> ParentInternationalAddresses 
        { 
            get { return _parentInternationalAddresses; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<ParentInternationalAddress>(value,
                    (s, e) => ((IParentInternationalAddress)e.Item).Parent = this);
                _parentInternationalAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IParentInternationalAddress, ParentInternationalAddress>(value);
                covariantList.ItemAdded += (s, e) => ((IParentInternationalAddress)e.Item).Parent = this;
                _parentInternationalAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IParentInternationalAddress> IParent.ParentInternationalAddresses
        {
            get { return _parentInternationalAddressesCovariant; }
            set { ParentInternationalAddresses = new List<ParentInternationalAddress>(value.Cast<ParentInternationalAddress>()); }
        }

        private IList<ParentOtherName> _parentOtherNames;
        private IList<IParentOtherName> _parentOtherNamesCovariant;

        [DataMember(Name="otherNames")]
        public IList<ParentOtherName> ParentOtherNames 
        { 
            get { return _parentOtherNames; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<ParentOtherName>(value,
                    (s, e) => ((IParentOtherName)e.Item).Parent = this);
                _parentOtherNames = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IParentOtherName, ParentOtherName>(value);
                covariantList.ItemAdded += (s, e) => ((IParentOtherName)e.Item).Parent = this;
                _parentOtherNamesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IParentOtherName> IParent.ParentOtherNames
        {
            get { return _parentOtherNamesCovariant; }
            set { ParentOtherNames = new List<ParentOtherName>(value.Cast<ParentOtherName>()); }
        }

        private IList<ParentTelephone> _parentTelephones;
        private IList<IParentTelephone> _parentTelephonesCovariant;

        [DataMember(Name="telephones")]
        public IList<ParentTelephone> ParentTelephones 
        { 
            get { return _parentTelephones; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<ParentTelephone>(value,
                    (s, e) => ((IParentTelephone)e.Item).Parent = this);
                _parentTelephones = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IParentTelephone, ParentTelephone>(value);
                covariantList.ItemAdded += (s, e) => ((IParentTelephone)e.Item).Parent = this;
                _parentTelephonesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IParentTelephone> IParent.ParentTelephones
        {
            get { return _parentTelephonesCovariant; }
            set { ParentTelephones = new List<ParentTelephone>(value.Cast<ParentTelephone>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_parentAddresses != null) foreach (var item in _parentAddresses)
            {
                item.Parent = this;
            }
            
            if (_parentElectronicMails != null) foreach (var item in _parentElectronicMails)
            {
                item.Parent = this;
            }
            
            if (_parentIdentificationDocuments != null) foreach (var item in _parentIdentificationDocuments)
            {
                item.Parent = this;
            }
            
            if (_parentInternationalAddresses != null) foreach (var item in _parentInternationalAddresses)
            {
                item.Parent = this;
            }
            
            if (_parentOtherNames != null) foreach (var item in _parentOtherNames)
            {
                item.Parent = this;
            }
            
            if (_parentTelephones != null) foreach (var item in _parentTelephones)
            {
                item.Parent = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IParent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IParent) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IParentSynchronizationSourceSupport.IsFirstNameSupported                      { get { return true; } set { } }
 
        bool IParentSynchronizationSourceSupport.IsGenerationCodeSuffixSupported           { get { return true; } set { } }
 
        bool IParentSynchronizationSourceSupport.IsLastSurnameSupported                    { get { return true; } set { } }
 
        bool IParentSynchronizationSourceSupport.IsLoginIdSupported                        { get { return true; } set { } }
 
        bool IParentSynchronizationSourceSupport.IsMaidenNameSupported                     { get { return true; } set { } }
 
        bool IParentSynchronizationSourceSupport.IsMiddleNameSupported                     { get { return true; } set { } }
 
        bool IParentSynchronizationSourceSupport.IsParentAddressesSupported                { get { return true; } set { } }
 
        bool IParentSynchronizationSourceSupport.IsParentElectronicMailsSupported          { get { return true; } set { } }
 
        bool IParentSynchronizationSourceSupport.IsParentIdentificationDocumentsSupported  { get { return true; } set { } }
 
        bool IParentSynchronizationSourceSupport.IsParentInternationalAddressesSupported   { get { return true; } set { } }
 
        bool IParentSynchronizationSourceSupport.IsParentOtherNamesSupported               { get { return true; } set { } }
 
        bool IParentSynchronizationSourceSupport.IsParentTelephonesSupported               { get { return true; } set { } }
 
        bool IParentSynchronizationSourceSupport.IsParentUniqueIdSupported                 { get { return true; } set { } }
 
        bool IParentSynchronizationSourceSupport.IsPersonalTitlePrefixSupported            { get { return true; } set { } }
 
        bool IParentSynchronizationSourceSupport.IsSexTypeSupported                        { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IParentAddress, bool> IParentSynchronizationSourceSupport.IsParentAddressIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IParentElectronicMail, bool> IParentSynchronizationSourceSupport.IsParentElectronicMailIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IParentIdentificationDocument, bool> IParentSynchronizationSourceSupport.IsParentIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IParentInternationalAddress, bool> IParentSynchronizationSourceSupport.IsParentInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IParentOtherName, bool> IParentSynchronizationSourceSupport.IsParentOtherNameIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IParentTelephone, bool> IParentSynchronizationSourceSupport.IsParentTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.ParentAddress table of the Parent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ParentAddress : IParentAddress, IParentAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IParent _parent;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IParent IParentAddress.Parent
        {
            get { return _parent; }
            set { _parent = value; }
        }

        internal IParent Parent
        {
            set { _parent = value; }
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressType"), NaturalKeyMember]
        public string AddressType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_parent != null) 
                    hash = hash * 23 + _parent.GetHashCode();
 
                // Standard Property
                if ((this as IParentAddress).AddressType != null) 
                    hash = hash * 23 + (this as IParentAddress).AddressType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                         'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationType")]
        public string StateAbbreviationType { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName")]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IParentAddress)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IParentAddress) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IParentAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported  { get { return true; } set { } }
 
        bool IParentAddressSynchronizationSourceSupport.IsBeginDateSupported                 { get { return true; } set { } }
 
        bool IParentAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported        { get { return true; } set { } }
 
        bool IParentAddressSynchronizationSourceSupport.IsCitySupported                      { get { return true; } set { } }
 
        bool IParentAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported            { get { return true; } set { } }
 
        bool IParentAddressSynchronizationSourceSupport.IsEndDateSupported                   { get { return true; } set { } }
 
        bool IParentAddressSynchronizationSourceSupport.IsLatitudeSupported                  { get { return true; } set { } }
 
        bool IParentAddressSynchronizationSourceSupport.IsLongitudeSupported                 { get { return true; } set { } }
 
        bool IParentAddressSynchronizationSourceSupport.IsNameOfCountySupported              { get { return true; } set { } }
 
        bool IParentAddressSynchronizationSourceSupport.IsPostalCodeSupported                { get { return true; } set { } }
 
        bool IParentAddressSynchronizationSourceSupport.IsStateAbbreviationTypeSupported     { get { return true; } set { } }
 
        bool IParentAddressSynchronizationSourceSupport.IsStreetNumberNameSupported          { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.ParentElectronicMail table of the Parent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ParentElectronicMail : IParentElectronicMail, IParentElectronicMailSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IParent _parent;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IParent IParentElectronicMail.Parent
        {
            get { return _parent; }
            set { _parent = value; }
        }

        internal IParent Parent
        {
            set { _parent = value; }
        }

        /// <summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="electronicMailType"), NaturalKeyMember]
        public string ElectronicMailType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_parent != null) 
                    hash = hash * 23 + _parent.GetHashCode();
 
                // Standard Property
                if ((this as IParentElectronicMail).ElectronicMailType != null) 
                    hash = hash * 23 + (this as IParentElectronicMail).ElectronicMailType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="electronicMailAddress")]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primaryEmailAddressIndicator")]
        public bool? PrimaryEmailAddressIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IParentElectronicMail)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IParentElectronicMail) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IParentElectronicMailSynchronizationSourceSupport.IsElectronicMailAddressSupported         { get { return true; } set { } }
 
        bool IParentElectronicMailSynchronizationSourceSupport.IsPrimaryEmailAddressIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.ParentIdentificationDocument table of the Parent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ParentIdentificationDocument : IParentIdentificationDocument, IParentIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IParent _parent;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IParent IParentIdentificationDocument.Parent
        {
            get { return _parent; }
            set { _parent = value; }
        }

        internal IParent Parent
        {
            set { _parent = value; }
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseType"), NaturalKeyMember]
        public string IdentificationDocumentUseType { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationType"), NaturalKeyMember]
        public string PersonalInformationVerificationType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_parent != null) 
                    hash = hash * 23 + _parent.GetHashCode();
 
                // Standard Property
                if ((this as IParentIdentificationDocument).IdentificationDocumentUseType != null) 
                    hash = hash * 23 + (this as IParentIdentificationDocument).IdentificationDocumentUseType.GetHashCode();
 
                // Standard Property
                if ((this as IParentIdentificationDocument).PersonalInformationVerificationType != null) 
                    hash = hash * 23 + (this as IParentIdentificationDocument).PersonalInformationVerificationType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IParentIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IParentIdentificationDocument) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IParentIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
 
        bool IParentIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
 
        bool IParentIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
 
        bool IParentIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
 
        bool IParentIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.ParentInternationalAddress table of the Parent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ParentInternationalAddress : IParentInternationalAddress, IParentInternationalAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IParent _parent;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IParent IParentInternationalAddress.Parent
        {
            get { return _parent; }
            set { _parent = value; }
        }

        internal IParent Parent
        {
            set { _parent = value; }
        }

        /// <summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressType"), NaturalKeyMember]
        public string AddressType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_parent != null) 
                    hash = hash * 23 + _parent.GetHashCode();
 
                // Standard Property
                if ((this as IParentInternationalAddress).AddressType != null) 
                    hash = hash * 23 + (this as IParentInternationalAddress).AddressType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The first line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine1")]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine2")]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine3")]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The fourth line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine4")]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The name of the country.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="countryDescriptor")]
        public string CountryDescriptor { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IParentInternationalAddress)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IParentInternationalAddress) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IParentInternationalAddressSynchronizationSourceSupport.IsAddressLine1Supported       { get { return true; } set { } }
 
        bool IParentInternationalAddressSynchronizationSourceSupport.IsAddressLine2Supported       { get { return true; } set { } }
 
        bool IParentInternationalAddressSynchronizationSourceSupport.IsAddressLine3Supported       { get { return true; } set { } }
 
        bool IParentInternationalAddressSynchronizationSourceSupport.IsAddressLine4Supported       { get { return true; } set { } }
 
        bool IParentInternationalAddressSynchronizationSourceSupport.IsBeginDateSupported          { get { return true; } set { } }
 
        bool IParentInternationalAddressSynchronizationSourceSupport.IsCountryDescriptorSupported  { get { return true; } set { } }
 
        bool IParentInternationalAddressSynchronizationSourceSupport.IsEndDateSupported            { get { return true; } set { } }
 
        bool IParentInternationalAddressSynchronizationSourceSupport.IsLatitudeSupported           { get { return true; } set { } }
 
        bool IParentInternationalAddressSynchronizationSourceSupport.IsLongitudeSupported          { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.ParentOtherName table of the Parent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ParentOtherName : IParentOtherName, IParentOtherNameSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IParent _parent;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IParent IParentOtherName.Parent
        {
            get { return _parent; }
            set { _parent = value; }
        }

        internal IParent Parent
        {
            set { _parent = value; }
        }

        /// <summary>
        /// The types of alternate names for a person.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="otherNameType"), NaturalKeyMember]
        public string OtherNameType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_parent != null) 
                    hash = hash * 23 + _parent.GetHashCode();
 
                // Standard Property
                if ((this as IParentOtherName).OtherNameType != null) 
                    hash = hash * 23 + (this as IParentOtherName).OtherNameType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IParentOtherName)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IParentOtherName) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IParentOtherNameSynchronizationSourceSupport.IsFirstNameSupported             { get { return true; } set { } }
 
        bool IParentOtherNameSynchronizationSourceSupport.IsGenerationCodeSuffixSupported  { get { return true; } set { } }
 
        bool IParentOtherNameSynchronizationSourceSupport.IsLastSurnameSupported           { get { return true; } set { } }
 
        bool IParentOtherNameSynchronizationSourceSupport.IsMiddleNameSupported            { get { return true; } set { } }
 
        bool IParentOtherNameSynchronizationSourceSupport.IsPersonalTitlePrefixSupported   { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.ParentTelephone table of the Parent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ParentTelephone : IParentTelephone, IParentTelephoneSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IParent _parent;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IParent IParentTelephone.Parent
        {
            get { return _parent; }
            set { _parent = value; }
        }

        internal IParent Parent
        {
            set { _parent = value; }
        }

        /// <summary>
        /// The type of communication number listed for an individual or organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="telephoneNumberType"), NaturalKeyMember]
        public string TelephoneNumberType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_parent != null) 
                    hash = hash * 23 + _parent.GetHashCode();
 
                // Standard Property
                if ((this as IParentTelephone).TelephoneNumberType != null) 
                    hash = hash * 23 + (this as IParentTelephone).TelephoneNumberType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfPriority")]
        public int? OrderOfPriority { get; set; }

        /// <summary>
        /// The telephone number including the area code, and extension, if applicable.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="telephoneNumber")]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="textMessageCapabilityIndicator")]
        public bool? TextMessageCapabilityIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IParentTelephone)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IParentTelephone) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IParentTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported                 { get { return true; } set { } }
 
        bool IParentTelephoneSynchronizationSourceSupport.IsTelephoneNumberSupported                 { get { return true; } set { } }
 
        bool IParentTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: Payroll

namespace EdFi.Ods.Api.Models.Resources.V2.Payroll
{
    /// <summary>
    /// Represents a reference to the Payroll resource.
    /// </summary>
    [DataContract]
    public class PayrollReference
    {
        [DataMember(Name="accountNumber"), NaturalKeyMember]
        public string AccountNumber { get; set; }

        [DataMember(Name="asOfDate"), NaturalKeyMember]
        public DateTime AsOfDate { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="fiscalYear"), NaturalKeyMember]
        public int FiscalYear { get; set; }

        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "Payroll",
                            Href = "/payrolls"
                                    + "?accountNumber=" + WebUtility.UrlEncode(AccountNumber)            
                                    + "&asOfDate=" + JsonConvert.SerializeObject(AsOfDate).Replace("\"", string.Empty)            
                                    + "&educationOrganizationId=" + EducationOrganizationId            
                                    + "&fiscalYear=" + FiscalYear            
                                    + "&staffUniqueId=" + WebUtility.UrlEncode(StaffUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return AccountNumber != default(string)
                && AsOfDate != default(DateTime)
                && EducationOrganizationId != default(int)
                && FiscalYear != default(int)
                && StaffUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Payroll table of the Payroll aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class Payroll : IPayroll, IHasETag, IPayrollSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the Payroll resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _accountReferenceExplicitlyAssigned;
        private Account.AccountReference _accountReference;
        private Account.AccountReference ImplicitAccountReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_accountReference == null && !_accountReferenceExplicitlyAssigned)
                    _accountReference = new Account.AccountReference();

                return _accountReference;
            }
        }

        [DataMember(Name="accountReference")][NaturalKeyMember]
        public Account.AccountReference AccountReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitAccountReference != null
                    && (_accountReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitAccountReference.IsReferenceFullyDefined()))
                    return ImplicitAccountReference;

                return null;
            }
            set 
            { 
                _accountReferenceExplicitlyAssigned = true;
                _accountReference = value;
            }
        }
        private bool _staffReferenceExplicitlyAssigned;
        private Staff.StaffReference _staffReference;
        private Staff.StaffReference ImplicitStaffReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_staffReference == null && !_staffReferenceExplicitlyAssigned)
                    _staffReference = new Staff.StaffReference();

                return _staffReference;
            }
        }

        [DataMember(Name="staffReference")][NaturalKeyMember]
        public Staff.StaffReference StaffReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStaffReference != null
                    && (_staffReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference;

                return null;
            }
            set 
            { 
                _staffReferenceExplicitlyAssigned = true;
                _staffReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The alphanumeric string that identifies the account.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IPayroll.AccountNumber
        {
            get
            {
                if (ImplicitAccountReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAccountReference.IsReferenceFullyDefined()))
                    return ImplicitAccountReference.AccountNumber;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Account
                _accountReferenceExplicitlyAssigned = false;
                ImplicitAccountReference.AccountNumber = value;
            }
        }

        /// <summary>
        /// The date of the reported payroll element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="asOfDate"), NaturalKeyMember]
        public DateTime AsOfDate { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IPayroll.EducationOrganizationId
        {
            get
            {
                if (ImplicitAccountReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAccountReference.IsReferenceFullyDefined()))
                    return ImplicitAccountReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Account
                _accountReferenceExplicitlyAssigned = false;
                ImplicitAccountReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The financial accounting year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IPayroll.FiscalYear
        {
            get
            {
                if (ImplicitAccountReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAccountReference.IsReferenceFullyDefined()))
                    return ImplicitAccountReference.FiscalYear;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Account
                _accountReferenceExplicitlyAssigned = false;
                ImplicitAccountReference.FiscalYear = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IPayroll.StaffUniqueId
        {
            get
            {
                if (ImplicitStaffReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference.StaffUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Staff
                _staffReferenceExplicitlyAssigned = false;
                ImplicitStaffReference.StaffUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IPayroll).AccountNumber != null) 
                    hash = hash * 23 + (this as IPayroll).AccountNumber.GetHashCode();
 
                // Standard Property
                if ((this as IPayroll).AsOfDate != null) 
                    hash = hash * 23 + (this as IPayroll).AsOfDate.GetHashCode();
 
                //Referenced Property
                if ((this as IPayroll).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IPayroll).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IPayroll).FiscalYear != null) 
                    hash = hash * 23 + (this as IPayroll).FiscalYear.GetHashCode();
 
                //Referenced Property
                if ((this as IPayroll).StaffUniqueId != null) 
                    hash = hash * 23 + (this as IPayroll).StaffUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Current balance (amount paid to employee) for account for the fiscal year.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="amountToDate")][Range(typeof(decimal), "-922337203685477.5808", "922337203685477.5807")]
        public decimal AmountToDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IPayroll)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IPayroll) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IPayrollSynchronizationSourceSupport.IsAmountToDateSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: PerformanceBaseConversionType

namespace EdFi.Ods.Api.Models.Resources.V2.PerformanceBaseConversionType
{
    /// <summary>
    /// A class which represents the edfi.PerformanceBaseConversionType table of the PerformanceBaseConversionType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class PerformanceBaseConversionType : IPerformanceBaseConversionType, IHasETag, IPerformanceBaseConversionTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the PerformanceBaseConversionType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for PerformanceBaseConversion
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="performanceBaseConversionTypeId"), NaturalKeyMember]
        public int PerformanceBaseConversionTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IPerformanceBaseConversionType).PerformanceBaseConversionTypeId != null) 
                    hash = hash * 23 + (this as IPerformanceBaseConversionType).PerformanceBaseConversionTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the PerformanceBaseConversion type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the PerformanceBaseConversion type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IPerformanceBaseConversionType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IPerformanceBaseConversionType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IPerformanceBaseConversionTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IPerformanceBaseConversionTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IPerformanceBaseConversionTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: PerformanceLevelDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.PerformanceLevelDescriptor
{
    /// <summary>
    /// A class which represents the edfi.PerformanceLevelDescriptor table of the PerformanceLevelDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class PerformanceLevelDescriptor : IPerformanceLevelDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IPerformanceLevelDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the PerformanceLevelDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="performanceLevelDescriptorId"), NaturalKeyMember]
        public int PerformanceLevelDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return PerformanceLevelDescriptorId; }
            set { PerformanceLevelDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IPerformanceLevelDescriptor).PerformanceLevelDescriptorId != null) 
                    hash = hash * 23 + (this as IPerformanceLevelDescriptor).PerformanceLevelDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A conversion of the level to a standard set of performance levels.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="performanceBaseConversionType")]
        public string PerformanceBaseConversionType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IPerformanceLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IPerformanceLevelDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IPerformanceLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported                      { get { return true; } set { } }
 
        bool IPerformanceLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported                    { get { return true; } set { } }
 
        bool IPerformanceLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported             { get { return true; } set { } }
 
        bool IPerformanceLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported               { get { return true; } set { } }
 
        bool IPerformanceLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported                      { get { return true; } set { } }
 
        bool IPerformanceLevelDescriptorSynchronizationSourceSupport.IsPerformanceBaseConversionTypeSupported  { get { return true; } set { } }
 
        bool IPerformanceLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported              { get { return true; } set { } }
 
        bool IPerformanceLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported               { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: PersonalInformationVerificationType

namespace EdFi.Ods.Api.Models.Resources.V2.PersonalInformationVerificationType
{
    /// <summary>
    /// A class which represents the edfi.PersonalInformationVerificationType table of the PersonalInformationVerificationType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class PersonalInformationVerificationType : IPersonalInformationVerificationType, IHasETag, IPersonalInformationVerificationTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the PersonalInformationVerificationType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for PersonalInformationVerification
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalInformationVerificationTypeId"), NaturalKeyMember]
        public int PersonalInformationVerificationTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IPersonalInformationVerificationType).PersonalInformationVerificationTypeId != null) 
                    hash = hash * 23 + (this as IPersonalInformationVerificationType).PersonalInformationVerificationTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the PersonalInformationVerification type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the PersonalInformationVerification type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IPersonalInformationVerificationType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IPersonalInformationVerificationType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IPersonalInformationVerificationTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IPersonalInformationVerificationTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IPersonalInformationVerificationTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: PopulationServedType

namespace EdFi.Ods.Api.Models.Resources.V2.PopulationServedType
{
    /// <summary>
    /// A class which represents the edfi.PopulationServedType table of the PopulationServedType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class PopulationServedType : IPopulationServedType, IHasETag, IPopulationServedTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the PopulationServedType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for PopulationServed
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="populationServedTypeId"), NaturalKeyMember]
        public int PopulationServedTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IPopulationServedType).PopulationServedTypeId != null) 
                    hash = hash * 23 + (this as IPopulationServedType).PopulationServedTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the PopulationServed type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the PopulationServed type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IPopulationServedType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IPopulationServedType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IPopulationServedTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IPopulationServedTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IPopulationServedTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: PostingResultType

namespace EdFi.Ods.Api.Models.Resources.V2.PostingResultType
{
    /// <summary>
    /// A class which represents the edfi.PostingResultType table of the PostingResultType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class PostingResultType : IPostingResultType, IHasETag, IPostingResultTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the PostingResultType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for PostingResult
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postingResultTypeId"), NaturalKeyMember]
        public int PostingResultTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IPostingResultType).PostingResultTypeId != null) 
                    hash = hash * 23 + (this as IPostingResultType).PostingResultTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the PostingResult type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the PostingResult type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IPostingResultType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IPostingResultType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IPostingResultTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IPostingResultTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IPostingResultTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: PostSecondaryEvent

namespace EdFi.Ods.Api.Models.Resources.V2.PostSecondaryEvent
{
    /// <summary>
    /// Represents a reference to the PostSecondaryEvent resource.
    /// </summary>
    [DataContract]
    public class PostSecondaryEventReference
    {
        [DataMember(Name="eventDate"), NaturalKeyMember]
        public DateTime EventDate { get; set; }

        [DataMember(Name="categoryType"), NaturalKeyMember]
        public string PostSecondaryEventCategoryType { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "PostSecondaryEvent",
                            Href = "/postSecondaryEvents"
                                    + "?eventDate=" + JsonConvert.SerializeObject(EventDate).Replace("\"", string.Empty)            
                                    + "&categoryType=" + WebUtility.UrlEncode(PostSecondaryEventCategoryType)            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EventDate != default(DateTime)
                && PostSecondaryEventCategoryType != default(string)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.PostSecondaryEvent table of the PostSecondaryEvent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class PostSecondaryEvent : IPostSecondaryEvent, IHasETag, IPostSecondaryEventSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the PostSecondaryEvent resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The date the event occurred or was recorded.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eventDate"), NaturalKeyMember]
        public DateTime EventDate { get; set; }

        /// <summary>
        /// The PostSecondaryEvent that is logged (e.g., FAFSA application, college application, college acceptance).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="categoryType"), NaturalKeyMember]
        public string PostSecondaryEventCategoryType { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IPostSecondaryEvent.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IPostSecondaryEvent).EventDate != null) 
                    hash = hash * 23 + (this as IPostSecondaryEvent).EventDate.GetHashCode();
 
                // Standard Property
                if ((this as IPostSecondaryEvent).PostSecondaryEventCategoryType != null) 
                    hash = hash * 23 + (this as IPostSecondaryEvent).PostSecondaryEventCategoryType.GetHashCode();
 
                //Referenced Property
                if ((this as IPostSecondaryEvent).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IPostSecondaryEvent).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// postSecondaryInstitution
        /// </summary> 
        [DataMember(Name = "postSecondaryInstitution")]
        public PostSecondaryEventPostSecondaryInstitution PostSecondaryEventPostSecondaryInstitution { get; set; }

        IPostSecondaryEventPostSecondaryInstitution IPostSecondaryEvent.PostSecondaryEventPostSecondaryInstitution
        {
            get { return PostSecondaryEventPostSecondaryInstitution; }
            set { PostSecondaryEventPostSecondaryInstitution = (PostSecondaryEventPostSecondaryInstitution) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IPostSecondaryEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IPostSecondaryEvent) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IPostSecondaryEventSynchronizationSourceSupport.IsPostSecondaryEventPostSecondaryInstitutionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.PostSecondaryEventPostSecondaryInstitution table of the PostSecondaryEvent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class PostSecondaryEventPostSecondaryInstitution : IPostSecondaryEventPostSecondaryInstitution, IPostSecondaryEventPostSecondaryInstitutionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public PostSecondaryEventPostSecondaryInstitution()
        {
            PostSecondaryEventPostSecondaryInstitutionIdentificationCodes = new List<PostSecondaryEventPostSecondaryInstitutionIdentificationCode>();
            PostSecondaryEventPostSecondaryInstitutionMediumOfInstructions = new List<PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction>();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IPostSecondaryEvent _postSecondaryEvent;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IPostSecondaryEvent IPostSecondaryEventPostSecondaryInstitution.PostSecondaryEvent
        {
            get { return _postSecondaryEvent; }
            set { _postSecondaryEvent = value; }
        }

        internal IPostSecondaryEvent PostSecondaryEvent
        {
            set { _postSecondaryEvent = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_postSecondaryEvent != null) 
                    hash = hash * 23 + _postSecondaryEvent.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="administrativeFundingControlDescriptor")]
        public string AdministrativeFundingControlDescriptor { get; set; }

        /// <summary>
        /// The postsecondary institution associated with the event.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfInstitution")]
        public string NameOfInstitution { get; set; }

        /// <summary>
        /// The ID of the post secondary institution.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postSecondaryInstitutionId")]
        public string PostSecondaryInstitutionId { get; set; }

        /// <summary>
        /// A classification of whether a post secondary institution's highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="postSecondaryInstitutionLevelType")]
        public string PostSecondaryInstitutionLevelType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<PostSecondaryEventPostSecondaryInstitutionIdentificationCode> _postSecondaryEventPostSecondaryInstitutionIdentificationCodes;
        private IList<IPostSecondaryEventPostSecondaryInstitutionIdentificationCode> _postSecondaryEventPostSecondaryInstitutionIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes")]
        public IList<PostSecondaryEventPostSecondaryInstitutionIdentificationCode> PostSecondaryEventPostSecondaryInstitutionIdentificationCodes 
        { 
            get { return _postSecondaryEventPostSecondaryInstitutionIdentificationCodes; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<PostSecondaryEventPostSecondaryInstitutionIdentificationCode>(value,
                    (s, e) => ((IPostSecondaryEventPostSecondaryInstitutionIdentificationCode)e.Item).PostSecondaryEventPostSecondaryInstitution = this);
                _postSecondaryEventPostSecondaryInstitutionIdentificationCodes = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IPostSecondaryEventPostSecondaryInstitutionIdentificationCode, PostSecondaryEventPostSecondaryInstitutionIdentificationCode>(value);
                covariantList.ItemAdded += (s, e) => ((IPostSecondaryEventPostSecondaryInstitutionIdentificationCode)e.Item).PostSecondaryEventPostSecondaryInstitution = this;
                _postSecondaryEventPostSecondaryInstitutionIdentificationCodesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IPostSecondaryEventPostSecondaryInstitutionIdentificationCode> IPostSecondaryEventPostSecondaryInstitution.PostSecondaryEventPostSecondaryInstitutionIdentificationCodes
        {
            get { return _postSecondaryEventPostSecondaryInstitutionIdentificationCodesCovariant; }
            set { PostSecondaryEventPostSecondaryInstitutionIdentificationCodes = new List<PostSecondaryEventPostSecondaryInstitutionIdentificationCode>(value.Cast<PostSecondaryEventPostSecondaryInstitutionIdentificationCode>()); }
        }

        private IList<PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction> _postSecondaryEventPostSecondaryInstitutionMediumOfInstructions;
        private IList<IPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction> _postSecondaryEventPostSecondaryInstitutionMediumOfInstructionsCovariant;

        [DataMember(Name="mediumOfInstructions")]
        public IList<PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction> PostSecondaryEventPostSecondaryInstitutionMediumOfInstructions 
        { 
            get { return _postSecondaryEventPostSecondaryInstitutionMediumOfInstructions; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction>(value,
                    (s, e) => ((IPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction)e.Item).PostSecondaryEventPostSecondaryInstitution = this);
                _postSecondaryEventPostSecondaryInstitutionMediumOfInstructions = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction, PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction>(value);
                covariantList.ItemAdded += (s, e) => ((IPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction)e.Item).PostSecondaryEventPostSecondaryInstitution = this;
                _postSecondaryEventPostSecondaryInstitutionMediumOfInstructionsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction> IPostSecondaryEventPostSecondaryInstitution.PostSecondaryEventPostSecondaryInstitutionMediumOfInstructions
        {
            get { return _postSecondaryEventPostSecondaryInstitutionMediumOfInstructionsCovariant; }
            set { PostSecondaryEventPostSecondaryInstitutionMediumOfInstructions = new List<PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction>(value.Cast<PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction>()); }
        }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_postSecondaryEventPostSecondaryInstitutionIdentificationCodes != null) foreach (var item in _postSecondaryEventPostSecondaryInstitutionIdentificationCodes)
            {
                item.PostSecondaryEventPostSecondaryInstitution = this;
            }
            
            if (_postSecondaryEventPostSecondaryInstitutionMediumOfInstructions != null) foreach (var item in _postSecondaryEventPostSecondaryInstitutionMediumOfInstructions)
            {
                item.PostSecondaryEventPostSecondaryInstitution = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IPostSecondaryEventPostSecondaryInstitution)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IPostSecondaryEventPostSecondaryInstitution) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IPostSecondaryEventPostSecondaryInstitutionSynchronizationSourceSupport.IsAdministrativeFundingControlDescriptorSupported                          { get { return true; } set { } }
 
        bool IPostSecondaryEventPostSecondaryInstitutionSynchronizationSourceSupport.IsNameOfInstitutionSupported                                               { get { return true; } set { } }
 
        bool IPostSecondaryEventPostSecondaryInstitutionSynchronizationSourceSupport.IsPostSecondaryEventPostSecondaryInstitutionIdentificationCodesSupported   { get { return true; } set { } }
 
        bool IPostSecondaryEventPostSecondaryInstitutionSynchronizationSourceSupport.IsPostSecondaryEventPostSecondaryInstitutionMediumOfInstructionsSupported  { get { return true; } set { } }
 
        bool IPostSecondaryEventPostSecondaryInstitutionSynchronizationSourceSupport.IsPostSecondaryInstitutionIdSupported                                      { get { return true; } set { } }
 
        bool IPostSecondaryEventPostSecondaryInstitutionSynchronizationSourceSupport.IsPostSecondaryInstitutionLevelTypeSupported                               { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IPostSecondaryEventPostSecondaryInstitutionIdentificationCode, bool> IPostSecondaryEventPostSecondaryInstitutionSynchronizationSourceSupport.IsPostSecondaryEventPostSecondaryInstitutionIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction, bool> IPostSecondaryEventPostSecondaryInstitutionSynchronizationSourceSupport.IsPostSecondaryEventPostSecondaryInstitutionMediumOfInstructionIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.PostSecondaryEventPostSecondaryInstitutionIdentificationCode table of the PostSecondaryEvent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class PostSecondaryEventPostSecondaryInstitutionIdentificationCode : IPostSecondaryEventPostSecondaryInstitutionIdentificationCode, IPostSecondaryEventPostSecondaryInstitutionIdentificationCodeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IPostSecondaryEventPostSecondaryInstitution _postSecondaryEventPostSecondaryInstitution;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IPostSecondaryEventPostSecondaryInstitution IPostSecondaryEventPostSecondaryInstitutionIdentificationCode.PostSecondaryEventPostSecondaryInstitution
        {
            get { return _postSecondaryEventPostSecondaryInstitution; }
            set { _postSecondaryEventPostSecondaryInstitution = value; }
        }

        internal IPostSecondaryEventPostSecondaryInstitution PostSecondaryEventPostSecondaryInstitution
        {
            set { _postSecondaryEventPostSecondaryInstitution = value; }
        }

        /// <summary>
        /// The school system, state, or agency assigning the identification code.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="educationOrganizationIdentificationSystemDescriptor"), NaturalKeyMember]
        public string EducationOrganizationIdentificationSystemDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_postSecondaryEventPostSecondaryInstitution != null) 
                    hash = hash * 23 + _postSecondaryEventPostSecondaryInstitution.GetHashCode();
 
                // Standard Property
                if ((this as IPostSecondaryEventPostSecondaryInstitutionIdentificationCode).EducationOrganizationIdentificationSystemDescriptor != null) 
                    hash = hash * 23 + (this as IPostSecondaryEventPostSecondaryInstitutionIdentificationCode).EducationOrganizationIdentificationSystemDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode")]
        public string IdentificationCode { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IPostSecondaryEventPostSecondaryInstitutionIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IPostSecondaryEventPostSecondaryInstitutionIdentificationCode) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IPostSecondaryEventPostSecondaryInstitutionIdentificationCodeSynchronizationSourceSupport.IsIdentificationCodeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction table of the PostSecondaryEvent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction : IPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction, IPostSecondaryEventPostSecondaryInstitutionMediumOfInstructionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IPostSecondaryEventPostSecondaryInstitution _postSecondaryEventPostSecondaryInstitution;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IPostSecondaryEventPostSecondaryInstitution IPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction.PostSecondaryEventPostSecondaryInstitution
        {
            get { return _postSecondaryEventPostSecondaryInstitution; }
            set { _postSecondaryEventPostSecondaryInstitution = value; }
        }

        internal IPostSecondaryEventPostSecondaryInstitution PostSecondaryEventPostSecondaryInstitution
        {
            set { _postSecondaryEventPostSecondaryInstitution = value; }
        }

        /// <summary>
        /// The categories in which an institution serves the students.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="mediumOfInstructionType"), NaturalKeyMember]
        public string MediumOfInstructionType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_postSecondaryEventPostSecondaryInstitution != null) 
                    hash = hash * 23 + _postSecondaryEventPostSecondaryInstitution.GetHashCode();
 
                // Standard Property
                if ((this as IPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction).MediumOfInstructionType != null) 
                    hash = hash * 23 + (this as IPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction).MediumOfInstructionType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: PostSecondaryEventCategoryType

namespace EdFi.Ods.Api.Models.Resources.V2.PostSecondaryEventCategoryType
{
    /// <summary>
    /// A class which represents the edfi.PostSecondaryEventCategoryType table of the PostSecondaryEventCategoryType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class PostSecondaryEventCategoryType : IPostSecondaryEventCategoryType, IHasETag, IPostSecondaryEventCategoryTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the PostSecondaryEventCategoryType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for PostSecondaryEventCategory
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postSecondaryEventCategoryTypeId"), NaturalKeyMember]
        public int PostSecondaryEventCategoryTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IPostSecondaryEventCategoryType).PostSecondaryEventCategoryTypeId != null) 
                    hash = hash * 23 + (this as IPostSecondaryEventCategoryType).PostSecondaryEventCategoryTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the PostSecondaryEventCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the PostSecondaryEventCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IPostSecondaryEventCategoryType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IPostSecondaryEventCategoryType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IPostSecondaryEventCategoryTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IPostSecondaryEventCategoryTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IPostSecondaryEventCategoryTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: PostSecondaryInstitutionLevelType

namespace EdFi.Ods.Api.Models.Resources.V2.PostSecondaryInstitutionLevelType
{
    /// <summary>
    /// A class which represents the edfi.PostSecondaryInstitutionLevelType table of the PostSecondaryInstitutionLevelType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class PostSecondaryInstitutionLevelType : IPostSecondaryInstitutionLevelType, IHasETag, IPostSecondaryInstitutionLevelTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the PostSecondaryInstitutionLevelType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for PostSecondaryInstitutionLevel
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postSecondaryInstitutionLevelTypeId"), NaturalKeyMember]
        public int PostSecondaryInstitutionLevelTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IPostSecondaryInstitutionLevelType).PostSecondaryInstitutionLevelTypeId != null) 
                    hash = hash * 23 + (this as IPostSecondaryInstitutionLevelType).PostSecondaryInstitutionLevelTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the PostSecondaryInstitutionLevel type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the PostSecondaryInstitutionLevel type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IPostSecondaryInstitutionLevelType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IPostSecondaryInstitutionLevelType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IPostSecondaryInstitutionLevelTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IPostSecondaryInstitutionLevelTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IPostSecondaryInstitutionLevelTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: Program

namespace EdFi.Ods.Api.Models.Resources.V2.Program
{
    /// <summary>
    /// Represents a reference to the Program resource.
    /// </summary>
    [DataContract]
    public class ProgramReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="name"), NaturalKeyMember]
        public string ProgramName { get; set; }

        [DataMember(Name="type"), NaturalKeyMember]
        public string ProgramType { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "Program",
                            Href = "/programs"
                                    + "?educationOrganizationId=" + EducationOrganizationId            
                                    + "&name=" + WebUtility.UrlEncode(ProgramName)            
                                    + "&type=" + WebUtility.UrlEncode(ProgramType)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int)
                && ProgramName != default(string)
                && ProgramType != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Program table of the Program aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class Program : IProgram, IHasETag, IProgramSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Program()
        {
            ProgramCharacteristics = new List<ProgramCharacteristic>();
            ProgramLearningObjectives = new List<ProgramLearningObjective>();
            ProgramLearningStandards = new List<ProgramLearningStandard>();
            ProgramServices = new List<ProgramService>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Program resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IProgram.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="name"), NaturalKeyMember]
        public string ProgramName { get; set; }

        /// <summary>
        /// The type of program.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="type"), NaturalKeyMember]
        public string ProgramType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IProgram).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IProgram).EducationOrganizationId.GetHashCode();
 
                // Standard Property
                if ((this as IProgram).ProgramName != null) 
                    hash = hash * 23 + (this as IProgram).ProgramName.GetHashCode();
 
                // Standard Property
                if ((this as IProgram).ProgramType != null) 
                    hash = hash * 23 + (this as IProgram).ProgramType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="programId")]
        public string ProgramId { get; set; }

        /// <summary>
        /// Ultimate and intermediate providers of funds for a particular educational or service program or activity, or for an individual's participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Organization).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sponsorType")]
        public string ProgramSponsorType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<ProgramCharacteristic> _programCharacteristics;
        private IList<IProgramCharacteristic> _programCharacteristicsCovariant;

        [DataMember(Name="characteristics")]
        public IList<ProgramCharacteristic> ProgramCharacteristics 
        { 
            get { return _programCharacteristics; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<ProgramCharacteristic>(value,
                    (s, e) => ((IProgramCharacteristic)e.Item).Program = this);
                _programCharacteristics = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IProgramCharacteristic, ProgramCharacteristic>(value);
                covariantList.ItemAdded += (s, e) => ((IProgramCharacteristic)e.Item).Program = this;
                _programCharacteristicsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IProgramCharacteristic> IProgram.ProgramCharacteristics
        {
            get { return _programCharacteristicsCovariant; }
            set { ProgramCharacteristics = new List<ProgramCharacteristic>(value.Cast<ProgramCharacteristic>()); }
        }

        private IList<ProgramLearningObjective> _programLearningObjectives;
        private IList<IProgramLearningObjective> _programLearningObjectivesCovariant;

        [DataMember(Name="learningObjectives")]
        public IList<ProgramLearningObjective> ProgramLearningObjectives 
        { 
            get { return _programLearningObjectives; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<ProgramLearningObjective>(value,
                    (s, e) => ((IProgramLearningObjective)e.Item).Program = this);
                _programLearningObjectives = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IProgramLearningObjective, ProgramLearningObjective>(value);
                covariantList.ItemAdded += (s, e) => ((IProgramLearningObjective)e.Item).Program = this;
                _programLearningObjectivesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IProgramLearningObjective> IProgram.ProgramLearningObjectives
        {
            get { return _programLearningObjectivesCovariant; }
            set { ProgramLearningObjectives = new List<ProgramLearningObjective>(value.Cast<ProgramLearningObjective>()); }
        }

        private IList<ProgramLearningStandard> _programLearningStandards;
        private IList<IProgramLearningStandard> _programLearningStandardsCovariant;

        [DataMember(Name="learningStandards")]
        public IList<ProgramLearningStandard> ProgramLearningStandards 
        { 
            get { return _programLearningStandards; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<ProgramLearningStandard>(value,
                    (s, e) => ((IProgramLearningStandard)e.Item).Program = this);
                _programLearningStandards = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IProgramLearningStandard, ProgramLearningStandard>(value);
                covariantList.ItemAdded += (s, e) => ((IProgramLearningStandard)e.Item).Program = this;
                _programLearningStandardsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IProgramLearningStandard> IProgram.ProgramLearningStandards
        {
            get { return _programLearningStandardsCovariant; }
            set { ProgramLearningStandards = new List<ProgramLearningStandard>(value.Cast<ProgramLearningStandard>()); }
        }

        private IList<ProgramService> _programServices;
        private IList<IProgramService> _programServicesCovariant;

        [DataMember(Name="services")]
        public IList<ProgramService> ProgramServices 
        { 
            get { return _programServices; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<ProgramService>(value,
                    (s, e) => ((IProgramService)e.Item).Program = this);
                _programServices = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IProgramService, ProgramService>(value);
                covariantList.ItemAdded += (s, e) => ((IProgramService)e.Item).Program = this;
                _programServicesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IProgramService> IProgram.ProgramServices
        {
            get { return _programServicesCovariant; }
            set { ProgramServices = new List<ProgramService>(value.Cast<ProgramService>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_programCharacteristics != null) foreach (var item in _programCharacteristics)
            {
                item.Program = this;
            }
            
            if (_programLearningObjectives != null) foreach (var item in _programLearningObjectives)
            {
                item.Program = this;
            }
            
            if (_programLearningStandards != null) foreach (var item in _programLearningStandards)
            {
                item.Program = this;
            }
            
            if (_programServices != null) foreach (var item in _programServices)
            {
                item.Program = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IProgram)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IProgram) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IProgramSynchronizationSourceSupport.IsProgramCharacteristicsSupported     { get { return true; } set { } }
 
        bool IProgramSynchronizationSourceSupport.IsProgramIdSupported                  { get { return true; } set { } }
 
        bool IProgramSynchronizationSourceSupport.IsProgramLearningObjectivesSupported  { get { return true; } set { } }
 
        bool IProgramSynchronizationSourceSupport.IsProgramLearningStandardsSupported   { get { return true; } set { } }
 
        bool IProgramSynchronizationSourceSupport.IsProgramServicesSupported            { get { return true; } set { } }
 
        bool IProgramSynchronizationSourceSupport.IsProgramSponsorTypeSupported         { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IProgramCharacteristic, bool> IProgramSynchronizationSourceSupport.IsProgramCharacteristicIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IProgramLearningObjective, bool> IProgramSynchronizationSourceSupport.IsProgramLearningObjectiveIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IProgramLearningStandard, bool> IProgramSynchronizationSourceSupport.IsProgramLearningStandardIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IProgramService, bool> IProgramSynchronizationSourceSupport.IsProgramServiceIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.ProgramCharacteristic table of the Program aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ProgramCharacteristic : IProgramCharacteristic, IProgramCharacteristicSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IProgram _program;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IProgram IProgramCharacteristic.Program
        {
            get { return _program; }
            set { _program = value; }
        }

        internal IProgram Program
        {
            set { _program = value; }
        }

        /// <summary>
        /// Reflects important characteristics of the Program, such as categories or particular indications.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="descriptor"), NaturalKeyMember]
        public string ProgramCharacteristicDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_program != null) 
                    hash = hash * 23 + _program.GetHashCode();
 
                // Standard Property
                if ((this as IProgramCharacteristic).ProgramCharacteristicDescriptor != null) 
                    hash = hash * 23 + (this as IProgramCharacteristic).ProgramCharacteristicDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IProgramCharacteristic)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IProgramCharacteristic) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.ProgramLearningObjective table of the Program aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ProgramLearningObjective : IProgramLearningObjective, IProgramLearningObjectiveSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _learningObjectiveReferenceExplicitlyAssigned;
        private LearningObjective.LearningObjectiveReference _learningObjectiveReference;
        private LearningObjective.LearningObjectiveReference ImplicitLearningObjectiveReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_learningObjectiveReference == null && !_learningObjectiveReferenceExplicitlyAssigned)
                    _learningObjectiveReference = new LearningObjective.LearningObjectiveReference();

                return _learningObjectiveReference;
            }
        }

        [DataMember(Name="learningObjectiveReference")][NaturalKeyMember]
        public LearningObjective.LearningObjectiveReference LearningObjectiveReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitLearningObjectiveReference != null
                    && (_learningObjectiveReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitLearningObjectiveReference;

                return null;
            }
            set 
            { 
                _learningObjectiveReferenceExplicitlyAssigned = true;
                _learningObjectiveReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IProgram _program;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IProgram IProgramLearningObjective.Program
        {
            get { return _program; }
            set { _program = value; }
        }

        internal IProgram Program
        {
            set { _program = value; }
        }

        /// <summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IProgramLearningObjective.LearningObjectiveId
        {
            get
            {
                if (ImplicitLearningObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitLearningObjectiveReference.LearningObjectiveId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // LearningObjective
                _learningObjectiveReferenceExplicitlyAssigned = false;
                ImplicitLearningObjectiveReference.LearningObjectiveId = value;
            }
        }

        /// <summary>
        /// Namespace for the LearningObjective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IProgramLearningObjective.Namespace
        {
            get
            {
                if (ImplicitLearningObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitLearningObjectiveReference.Namespace;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // LearningObjective
                _learningObjectiveReferenceExplicitlyAssigned = false;
                ImplicitLearningObjectiveReference.Namespace = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_program != null) 
                    hash = hash * 23 + _program.GetHashCode();
 
                //Referenced Property
                if ((this as IProgramLearningObjective).LearningObjectiveId != null) 
                    hash = hash * 23 + (this as IProgramLearningObjective).LearningObjectiveId.GetHashCode();
 
                //Referenced Property
                if ((this as IProgramLearningObjective).Namespace != null) 
                    hash = hash * 23 + (this as IProgramLearningObjective).Namespace.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IProgramLearningObjective)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IProgramLearningObjective) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.ProgramLearningStandard table of the Program aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ProgramLearningStandard : IProgramLearningStandard, IProgramLearningStandardSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _learningStandardReferenceExplicitlyAssigned;
        private LearningStandard.LearningStandardReference _learningStandardReference;
        private LearningStandard.LearningStandardReference ImplicitLearningStandardReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_learningStandardReference == null && !_learningStandardReferenceExplicitlyAssigned)
                    _learningStandardReference = new LearningStandard.LearningStandardReference();

                return _learningStandardReference;
            }
        }

        [DataMember(Name="learningStandardReference")][NaturalKeyMember]
        public LearningStandard.LearningStandardReference LearningStandardReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitLearningStandardReference != null
                    && (_learningStandardReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitLearningStandardReference.IsReferenceFullyDefined()))
                    return ImplicitLearningStandardReference;

                return null;
            }
            set 
            { 
                _learningStandardReferenceExplicitlyAssigned = true;
                _learningStandardReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IProgram _program;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IProgram IProgramLearningStandard.Program
        {
            get { return _program; }
            set { _program = value; }
        }

        internal IProgram Program
        {
            set { _program = value; }
        }

        /// <summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IProgramLearningStandard.LearningStandardId
        {
            get
            {
                if (ImplicitLearningStandardReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitLearningStandardReference.IsReferenceFullyDefined()))
                    return ImplicitLearningStandardReference.LearningStandardId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // LearningStandard
                _learningStandardReferenceExplicitlyAssigned = false;
                ImplicitLearningStandardReference.LearningStandardId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_program != null) 
                    hash = hash * 23 + _program.GetHashCode();
 
                //Referenced Property
                if ((this as IProgramLearningStandard).LearningStandardId != null) 
                    hash = hash * 23 + (this as IProgramLearningStandard).LearningStandardId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IProgramLearningStandard)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IProgramLearningStandard) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.ProgramService table of the Program aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ProgramService : IProgramService, IProgramServiceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IProgram _program;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IProgram IProgramService.Program
        {
            get { return _program; }
            set { _program = value; }
        }

        internal IProgram Program
        {
            set { _program = value; }
        }

        /// <summary>
        /// Defines the services this program provides to students.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="serviceDescriptor"), NaturalKeyMember]
        public string ServiceDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_program != null) 
                    hash = hash * 23 + _program.GetHashCode();
 
                // Standard Property
                if ((this as IProgramService).ServiceDescriptor != null) 
                    hash = hash * 23 + (this as IProgramService).ServiceDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IProgramService)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IProgramService) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: ProgramAssignmentDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.ProgramAssignmentDescriptor
{
    /// <summary>
    /// A class which represents the edfi.ProgramAssignmentDescriptor table of the ProgramAssignmentDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ProgramAssignmentDescriptor : IProgramAssignmentDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IProgramAssignmentDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ProgramAssignmentDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="programAssignmentDescriptorId"), NaturalKeyMember]
        public int ProgramAssignmentDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return ProgramAssignmentDescriptorId; }
            set { ProgramAssignmentDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IProgramAssignmentDescriptor).ProgramAssignmentDescriptorId != null) 
                    hash = hash * 23 + (this as IProgramAssignmentDescriptor).ProgramAssignmentDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="programAssignmentType")]
        public string ProgramAssignmentType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IProgramAssignmentDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IProgramAssignmentDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IProgramAssignmentDescriptorSynchronizationSourceSupport.IsCodeValueSupported              { get { return true; } set { } }
 
        bool IProgramAssignmentDescriptorSynchronizationSourceSupport.IsDescriptionSupported            { get { return true; } set { } }
 
        bool IProgramAssignmentDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported     { get { return true; } set { } }
 
        bool IProgramAssignmentDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported       { get { return true; } set { } }
 
        bool IProgramAssignmentDescriptorSynchronizationSourceSupport.IsNamespaceSupported              { get { return true; } set { } }
 
        bool IProgramAssignmentDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported      { get { return true; } set { } }
 
        bool IProgramAssignmentDescriptorSynchronizationSourceSupport.IsProgramAssignmentTypeSupported  { get { return true; } set { } }
 
        bool IProgramAssignmentDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported       { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ProgramAssignmentType

namespace EdFi.Ods.Api.Models.Resources.V2.ProgramAssignmentType
{
    /// <summary>
    /// A class which represents the edfi.ProgramAssignmentType table of the ProgramAssignmentType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ProgramAssignmentType : IProgramAssignmentType, IHasETag, IProgramAssignmentTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ProgramAssignmentType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for ProgramAssignment
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="programAssignmentTypeId"), NaturalKeyMember]
        public int ProgramAssignmentTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IProgramAssignmentType).ProgramAssignmentTypeId != null) 
                    hash = hash * 23 + (this as IProgramAssignmentType).ProgramAssignmentTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the ProgramAssignment type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the ProgramAssignment type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IProgramAssignmentType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IProgramAssignmentType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IProgramAssignmentTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IProgramAssignmentTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IProgramAssignmentTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ProgramCharacteristicDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.ProgramCharacteristicDescriptor
{
    /// <summary>
    /// A class which represents the edfi.ProgramCharacteristicDescriptor table of the ProgramCharacteristicDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ProgramCharacteristicDescriptor : IProgramCharacteristicDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IProgramCharacteristicDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ProgramCharacteristicDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="programCharacteristicDescriptorId"), NaturalKeyMember]
        public int ProgramCharacteristicDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return ProgramCharacteristicDescriptorId; }
            set { ProgramCharacteristicDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IProgramCharacteristicDescriptor).ProgramCharacteristicDescriptorId != null) 
                    hash = hash * 23 + (this as IProgramCharacteristicDescriptor).ProgramCharacteristicDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="programCharacteristicType")]
        public string ProgramCharacteristicType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IProgramCharacteristicDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IProgramCharacteristicDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IProgramCharacteristicDescriptorSynchronizationSourceSupport.IsCodeValueSupported                  { get { return true; } set { } }
 
        bool IProgramCharacteristicDescriptorSynchronizationSourceSupport.IsDescriptionSupported                { get { return true; } set { } }
 
        bool IProgramCharacteristicDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported         { get { return true; } set { } }
 
        bool IProgramCharacteristicDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported           { get { return true; } set { } }
 
        bool IProgramCharacteristicDescriptorSynchronizationSourceSupport.IsNamespaceSupported                  { get { return true; } set { } }
 
        bool IProgramCharacteristicDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported          { get { return true; } set { } }
 
        bool IProgramCharacteristicDescriptorSynchronizationSourceSupport.IsProgramCharacteristicTypeSupported  { get { return true; } set { } }
 
        bool IProgramCharacteristicDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported           { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ProgramCharacteristicType

namespace EdFi.Ods.Api.Models.Resources.V2.ProgramCharacteristicType
{
    /// <summary>
    /// A class which represents the edfi.ProgramCharacteristicType table of the ProgramCharacteristicType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ProgramCharacteristicType : IProgramCharacteristicType, IHasETag, IProgramCharacteristicTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ProgramCharacteristicType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for ProgramCharacteristic
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="programCharacteristicTypeId"), NaturalKeyMember]
        public int ProgramCharacteristicTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IProgramCharacteristicType).ProgramCharacteristicTypeId != null) 
                    hash = hash * 23 + (this as IProgramCharacteristicType).ProgramCharacteristicTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the ProgramCharacteristic type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the ProgramCharacteristic type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IProgramCharacteristicType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IProgramCharacteristicType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IProgramCharacteristicTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IProgramCharacteristicTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IProgramCharacteristicTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ProgramSponsorType

namespace EdFi.Ods.Api.Models.Resources.V2.ProgramSponsorType
{
    /// <summary>
    /// A class which represents the edfi.ProgramSponsorType table of the ProgramSponsorType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ProgramSponsorType : IProgramSponsorType, IHasETag, IProgramSponsorTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ProgramSponsorType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for ProgramSponsor
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="programSponsorTypeId"), NaturalKeyMember]
        public int ProgramSponsorTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IProgramSponsorType).ProgramSponsorTypeId != null) 
                    hash = hash * 23 + (this as IProgramSponsorType).ProgramSponsorTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the ProgramSponsor type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the ProgramSponsor type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IProgramSponsorType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IProgramSponsorType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IProgramSponsorTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IProgramSponsorTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IProgramSponsorTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ProgramType

namespace EdFi.Ods.Api.Models.Resources.V2.ProgramType
{
    /// <summary>
    /// A class which represents the edfi.ProgramType table of the ProgramType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ProgramType : IProgramType, IHasETag, IProgramTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ProgramType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Program
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="programTypeId"), NaturalKeyMember]
        public int ProgramTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IProgramType).ProgramTypeId != null) 
                    hash = hash * 23 + (this as IProgramType).ProgramTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Program type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Program type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IProgramType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IProgramType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IProgramTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IProgramTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IProgramTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: PublicationStatusType

namespace EdFi.Ods.Api.Models.Resources.V2.PublicationStatusType
{
    /// <summary>
    /// A class which represents the edfi.PublicationStatusType table of the PublicationStatusType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class PublicationStatusType : IPublicationStatusType, IHasETag, IPublicationStatusTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the PublicationStatusType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for PublicationStatus
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="publicationStatusTypeId"), NaturalKeyMember]
        public int PublicationStatusTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IPublicationStatusType).PublicationStatusTypeId != null) 
                    hash = hash * 23 + (this as IPublicationStatusType).PublicationStatusTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the PublicationStatus type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the PublicationStatus type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IPublicationStatusType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IPublicationStatusType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IPublicationStatusTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IPublicationStatusTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IPublicationStatusTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: RaceType

namespace EdFi.Ods.Api.Models.Resources.V2.RaceType
{
    /// <summary>
    /// A class which represents the edfi.RaceType table of the RaceType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class RaceType : IRaceType, IHasETag, IRaceTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the RaceType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Race
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="raceTypeId"), NaturalKeyMember]
        public int RaceTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IRaceType).RaceTypeId != null) 
                    hash = hash * 23 + (this as IRaceType).RaceTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Race type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Race type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IRaceType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IRaceType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IRaceTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IRaceTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IRaceTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ReasonExitedDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.ReasonExitedDescriptor
{
    /// <summary>
    /// A class which represents the edfi.ReasonExitedDescriptor table of the ReasonExitedDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ReasonExitedDescriptor : IReasonExitedDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IReasonExitedDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ReasonExitedDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="reasonExitedDescriptorId"), NaturalKeyMember]
        public int ReasonExitedDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return ReasonExitedDescriptorId; }
            set { ReasonExitedDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IReasonExitedDescriptor).ReasonExitedDescriptorId != null) 
                    hash = hash * 23 + (this as IReasonExitedDescriptor).ReasonExitedDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="reasonExitedType")]
        public string ReasonExitedType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IReasonExitedDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IReasonExitedDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IReasonExitedDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
 
        bool IReasonExitedDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
 
        bool IReasonExitedDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
 
        bool IReasonExitedDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
 
        bool IReasonExitedDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
 
        bool IReasonExitedDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
 
        bool IReasonExitedDescriptorSynchronizationSourceSupport.IsReasonExitedTypeSupported    { get { return true; } set { } }
 
        bool IReasonExitedDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ReasonExitedType

namespace EdFi.Ods.Api.Models.Resources.V2.ReasonExitedType
{
    /// <summary>
    /// A class which represents the edfi.ReasonExitedType table of the ReasonExitedType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ReasonExitedType : IReasonExitedType, IHasETag, IReasonExitedTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ReasonExitedType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for ReasonExited
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="reasonExitedTypeId"), NaturalKeyMember]
        public int ReasonExitedTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IReasonExitedType).ReasonExitedTypeId != null) 
                    hash = hash * 23 + (this as IReasonExitedType).ReasonExitedTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the ReasonExited type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the ReasonExited type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IReasonExitedType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IReasonExitedType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IReasonExitedTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IReasonExitedTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IReasonExitedTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ReasonNotTestedType

namespace EdFi.Ods.Api.Models.Resources.V2.ReasonNotTestedType
{
    /// <summary>
    /// A class which represents the edfi.ReasonNotTestedType table of the ReasonNotTestedType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ReasonNotTestedType : IReasonNotTestedType, IHasETag, IReasonNotTestedTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ReasonNotTestedType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for ReasonNotTested
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="reasonNotTestedTypeId"), NaturalKeyMember]
        public int ReasonNotTestedTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IReasonNotTestedType).ReasonNotTestedTypeId != null) 
                    hash = hash * 23 + (this as IReasonNotTestedType).ReasonNotTestedTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the ReasonNotTested type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the ReasonNotTested type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IReasonNotTestedType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IReasonNotTestedType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IReasonNotTestedTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IReasonNotTestedTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IReasonNotTestedTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: RecognitionType

namespace EdFi.Ods.Api.Models.Resources.V2.RecognitionType
{
    /// <summary>
    /// A class which represents the edfi.RecognitionType table of the RecognitionType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class RecognitionType : IRecognitionType, IHasETag, IRecognitionTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the RecognitionType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Recognition
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionTypeId"), NaturalKeyMember]
        public int RecognitionTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IRecognitionType).RecognitionTypeId != null) 
                    hash = hash * 23 + (this as IRecognitionType).RecognitionTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Recognition type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Recognition type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IRecognitionType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IRecognitionType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IRecognitionTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IRecognitionTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IRecognitionTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: RelationType

namespace EdFi.Ods.Api.Models.Resources.V2.RelationType
{
    /// <summary>
    /// A class which represents the edfi.RelationType table of the RelationType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class RelationType : IRelationType, IHasETag, IRelationTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the RelationType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Relation
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="relationTypeId"), NaturalKeyMember]
        public int RelationTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IRelationType).RelationTypeId != null) 
                    hash = hash * 23 + (this as IRelationType).RelationTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Relation type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Relation type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IRelationType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IRelationType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IRelationTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IRelationTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IRelationTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: RepeatIdentifierType

namespace EdFi.Ods.Api.Models.Resources.V2.RepeatIdentifierType
{
    /// <summary>
    /// A class which represents the edfi.RepeatIdentifierType table of the RepeatIdentifierType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class RepeatIdentifierType : IRepeatIdentifierType, IHasETag, IRepeatIdentifierTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the RepeatIdentifierType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for RepeatIdentifier
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="repeatIdentifierTypeId"), NaturalKeyMember]
        public int RepeatIdentifierTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IRepeatIdentifierType).RepeatIdentifierTypeId != null) 
                    hash = hash * 23 + (this as IRepeatIdentifierType).RepeatIdentifierTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the RepeatIdentifier type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the RepeatIdentifier type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IRepeatIdentifierType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IRepeatIdentifierType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IRepeatIdentifierTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IRepeatIdentifierTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IRepeatIdentifierTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ReportCard

namespace EdFi.Ods.Api.Models.Resources.V2.ReportCard
{
    /// <summary>
    /// Represents a reference to the ReportCard resource.
    /// </summary>
    [DataContract]
    public class ReportCardReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="gradingPeriodBeginDate"), NaturalKeyMember]
        public DateTime GradingPeriodBeginDate { get; set; }

        [DataMember(Name="gradingPeriodDescriptor"), NaturalKeyMember]
        public string GradingPeriodDescriptor { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "ReportCard",
                            Href = "/reportCards"
                                    + "?educationOrganizationId=" + EducationOrganizationId            
                                    + "&gradingPeriodBeginDate=" + JsonConvert.SerializeObject(GradingPeriodBeginDate).Replace("\"", string.Empty)            
                                    + "&gradingPeriodDescriptor=" + WebUtility.UrlEncode(GradingPeriodDescriptor)            
                                    + "&schoolId=" + SchoolId            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int)
                && GradingPeriodBeginDate != default(DateTime)
                && GradingPeriodDescriptor != default(string)
                && SchoolId != default(int)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.ReportCard table of the ReportCard aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ReportCard : IReportCard, IHasETag, IReportCardSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public ReportCard()
        {
            ReportCardGrades = new List<ReportCardGrade>();
            ReportCardStudentCompetencyObjectives = new List<ReportCardStudentCompetencyObjective>();
            ReportCardStudentLearningObjectives = new List<ReportCardStudentLearningObjective>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the ReportCard resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        private bool _gradingPeriodReferenceExplicitlyAssigned;
        private GradingPeriod.GradingPeriodReference _gradingPeriodReference;
        private GradingPeriod.GradingPeriodReference ImplicitGradingPeriodReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_gradingPeriodReference == null && !_gradingPeriodReferenceExplicitlyAssigned)
                    _gradingPeriodReference = new GradingPeriod.GradingPeriodReference();

                return _gradingPeriodReference;
            }
        }

        [DataMember(Name="gradingPeriodReference")][NaturalKeyMember]
        public GradingPeriod.GradingPeriodReference GradingPeriodReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitGradingPeriodReference != null
                    && (_gradingPeriodReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference;

                return null;
            }
            set 
            { 
                _gradingPeriodReferenceExplicitlyAssigned = true;
                _gradingPeriodReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IReportCard.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime IReportCard.GradingPeriodBeginDate
        {
            get
            {
                if (ImplicitGradingPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference.BeginDate;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradingPeriod
                _gradingPeriodReferenceExplicitlyAssigned = false;
                ImplicitGradingPeriodReference.BeginDate = value;
            }
        }

        /// <summary>
        /// The name of the period for which grades are reported.
        /// </summary>

        // IS in a reference (ReportCard.GradingPeriodDescriptorId), IS a lookup column 
        string IReportCard.GradingPeriodDescriptor
        {
            get
            {
                if (ImplicitGradingPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference.GradingPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitGradingPeriodReference.GradingPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IReportCard.SchoolId
        {
            get
            {
                if (ImplicitGradingPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradingPeriod
                _gradingPeriodReferenceExplicitlyAssigned = false;
                ImplicitGradingPeriodReference.SchoolId = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IReportCard.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IReportCard).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IReportCard).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IReportCard).GradingPeriodBeginDate != null) 
                    hash = hash * 23 + (this as IReportCard).GradingPeriodBeginDate.GetHashCode();
 
                //Unified Type Property
                if ((this as IReportCard).GradingPeriodDescriptor != null) 
                    hash = hash * 23 + (this as IReportCard).GradingPeriodDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IReportCard).SchoolId != null) 
                    hash = hash * 23 + (this as IReportCard).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as IReportCard).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IReportCard).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A measure of cumulative average performance in all courses taken by an individual from the beginning of the school year through the current grading period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="gpaCumulative")][Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public decimal? GPACumulative { get; set; }

        /// <summary>
        /// A measure of average performance in all courses taken by an individual for the current grading period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="gpaGivenGradingPeriod")][Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public decimal? GPAGivenGradingPeriod { get; set; }

        /// <summary>
        /// The number of days an individual is absent when school is in session during a given reporting period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="numberOfDaysAbsent")][Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public decimal? NumberOfDaysAbsent { get; set; }

        /// <summary>
        /// The number of days an individual is present when school is in session during a given reporting period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="numberOfDaysInAttendance")][Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public decimal? NumberOfDaysInAttendance { get; set; }

        /// <summary>
        /// The number of days an individual is tardy during a given reporting period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="numberOfDaysTardy")]
        public int? NumberOfDaysTardy { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<ReportCardGrade> _reportCardGrades;
        private IList<IReportCardGrade> _reportCardGradesCovariant;

        [DataMember(Name="grades")]
        public IList<ReportCardGrade> ReportCardGrades 
        { 
            get { return _reportCardGrades; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<ReportCardGrade>(value,
                    (s, e) => ((IReportCardGrade)e.Item).ReportCard = this);
                _reportCardGrades = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IReportCardGrade, ReportCardGrade>(value);
                covariantList.ItemAdded += (s, e) => ((IReportCardGrade)e.Item).ReportCard = this;
                _reportCardGradesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IReportCardGrade> IReportCard.ReportCardGrades
        {
            get { return _reportCardGradesCovariant; }
            set { ReportCardGrades = new List<ReportCardGrade>(value.Cast<ReportCardGrade>()); }
        }

        private IList<ReportCardStudentCompetencyObjective> _reportCardStudentCompetencyObjectives;
        private IList<IReportCardStudentCompetencyObjective> _reportCardStudentCompetencyObjectivesCovariant;

        [DataMember(Name="studentCompetencyObjectives")]
        public IList<ReportCardStudentCompetencyObjective> ReportCardStudentCompetencyObjectives 
        { 
            get { return _reportCardStudentCompetencyObjectives; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<ReportCardStudentCompetencyObjective>(value,
                    (s, e) => ((IReportCardStudentCompetencyObjective)e.Item).ReportCard = this);
                _reportCardStudentCompetencyObjectives = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IReportCardStudentCompetencyObjective, ReportCardStudentCompetencyObjective>(value);
                covariantList.ItemAdded += (s, e) => ((IReportCardStudentCompetencyObjective)e.Item).ReportCard = this;
                _reportCardStudentCompetencyObjectivesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IReportCardStudentCompetencyObjective> IReportCard.ReportCardStudentCompetencyObjectives
        {
            get { return _reportCardStudentCompetencyObjectivesCovariant; }
            set { ReportCardStudentCompetencyObjectives = new List<ReportCardStudentCompetencyObjective>(value.Cast<ReportCardStudentCompetencyObjective>()); }
        }

        private IList<ReportCardStudentLearningObjective> _reportCardStudentLearningObjectives;
        private IList<IReportCardStudentLearningObjective> _reportCardStudentLearningObjectivesCovariant;

        [DataMember(Name="studentLearningObjectives")]
        public IList<ReportCardStudentLearningObjective> ReportCardStudentLearningObjectives 
        { 
            get { return _reportCardStudentLearningObjectives; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<ReportCardStudentLearningObjective>(value,
                    (s, e) => ((IReportCardStudentLearningObjective)e.Item).ReportCard = this);
                _reportCardStudentLearningObjectives = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IReportCardStudentLearningObjective, ReportCardStudentLearningObjective>(value);
                covariantList.ItemAdded += (s, e) => ((IReportCardStudentLearningObjective)e.Item).ReportCard = this;
                _reportCardStudentLearningObjectivesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IReportCardStudentLearningObjective> IReportCard.ReportCardStudentLearningObjectives
        {
            get { return _reportCardStudentLearningObjectivesCovariant; }
            set { ReportCardStudentLearningObjectives = new List<ReportCardStudentLearningObjective>(value.Cast<ReportCardStudentLearningObjective>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_reportCardGrades != null) foreach (var item in _reportCardGrades)
            {
                item.ReportCard = this;
            }
            
            if (_reportCardStudentCompetencyObjectives != null) foreach (var item in _reportCardStudentCompetencyObjectives)
            {
                item.ReportCard = this;
            }
            
            if (_reportCardStudentLearningObjectives != null) foreach (var item in _reportCardStudentLearningObjectives)
            {
                item.ReportCard = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IReportCard)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IReportCard) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IReportCardSynchronizationSourceSupport.IsGPACumulativeSupported                          { get { return true; } set { } }
 
        bool IReportCardSynchronizationSourceSupport.IsGPAGivenGradingPeriodSupported                  { get { return true; } set { } }
 
        bool IReportCardSynchronizationSourceSupport.IsNumberOfDaysAbsentSupported                     { get { return true; } set { } }
 
        bool IReportCardSynchronizationSourceSupport.IsNumberOfDaysInAttendanceSupported               { get { return true; } set { } }
 
        bool IReportCardSynchronizationSourceSupport.IsNumberOfDaysTardySupported                      { get { return true; } set { } }
 
        bool IReportCardSynchronizationSourceSupport.IsReportCardGradesSupported                       { get { return true; } set { } }
 
        bool IReportCardSynchronizationSourceSupport.IsReportCardStudentCompetencyObjectivesSupported  { get { return true; } set { } }
 
        bool IReportCardSynchronizationSourceSupport.IsReportCardStudentLearningObjectivesSupported    { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IReportCardGrade, bool> IReportCardSynchronizationSourceSupport.IsReportCardGradeIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IReportCardStudentCompetencyObjective, bool> IReportCardSynchronizationSourceSupport.IsReportCardStudentCompetencyObjectiveIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IReportCardStudentLearningObjective, bool> IReportCardSynchronizationSourceSupport.IsReportCardStudentLearningObjectiveIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// Represents a reference from the ReportCardGrade entity to the Grade resource.
    /// </summary>
    [DataContract]
    public class ReportCardGradeToGradeReference
    {
        private IReportCardGrade backReference;

        // Parameterless constructor for deserialization
        public ReportCardGradeToGradeReference() { }

        // Constructor for inline initialization in parent
        public ReportCardGradeToGradeReference(IReportCardGrade backReference)
        {
            this.backReference = backReference;
        }

        // Expose back reference internally for access after JSON deserialization to enable link generation
        internal IReportCardGrade BackReference
        {
            get { return backReference; }
            set { backReference = value; }
        }


        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="classPeriodName"), NaturalKeyMember]
        public string ClassPeriodName { get; set; }

        [DataMember(Name="classroomIdentificationCode"), NaturalKeyMember]
        public string ClassroomIdentificationCode { get; set; }

        [DataMember(Name="type"), NaturalKeyMember]
        public string GradeType { get; set; }

        [DataMember(Name="localCourseCode"), NaturalKeyMember]
        public string LocalCourseCode { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sequenceOfCourse"), NaturalKeyMember]
        public int SequenceOfCourse { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        [DataMember(Name="uniqueSectionCode"), NaturalKeyMember]
        public string UniqueSectionCode { get; set; }
        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Can't generate a link without the back reference
                    if (backReference == null)
                        return null;
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "Grade",
                            Href = "/grades"
                                    + "?beginDate=" + JsonConvert.SerializeObject(BeginDate).Replace("\"", string.Empty)            
                                    + "&classPeriodName=" + WebUtility.UrlEncode(ClassPeriodName)            
                                    + "&classroomIdentificationCode=" + WebUtility.UrlEncode(ClassroomIdentificationCode)            
                                    + "&type=" + WebUtility.UrlEncode(GradeType)            
                                    + "&gradingPeriodBeginDate=" + JsonConvert.SerializeObject(backReference.ReportCard.GradingPeriodBeginDate).Replace("\"", string.Empty)            
                                    + "&gradingPeriodDescriptor=" + WebUtility.UrlEncode(backReference.ReportCard.GradingPeriodDescriptor)            
                                    + "&localCourseCode=" + WebUtility.UrlEncode(LocalCourseCode)            
                                    + "&schoolId=" + backReference.ReportCard.SchoolId            
                                    + "&schoolYear=" + SchoolYear            
                                    + "&sequenceOfCourse=" + SequenceOfCourse            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(backReference.ReportCard.StudentUniqueId)            
                                    + "&termDescriptor=" + WebUtility.UrlEncode(TermDescriptor)            
                                    + "&uniqueSectionCode=" + WebUtility.UrlEncode(UniqueSectionCode)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime)
                && ClassPeriodName != default(string)
                && ClassroomIdentificationCode != default(string)
                && GradeType != default(string)
                && backReference.ReportCard != null && backReference.ReportCard.GradingPeriodBeginDate != default(DateTime)
                && backReference.ReportCard != null && backReference.ReportCard.GradingPeriodDescriptor != default(string)
                && LocalCourseCode != default(string)
                && backReference.ReportCard != null && backReference.ReportCard.SchoolId != default(int)
                && SchoolYear != default(short)
                && SequenceOfCourse != default(int)
                && backReference.ReportCard != null && backReference.ReportCard.StudentUniqueId != default(string)
                && TermDescriptor != default(string)
                && UniqueSectionCode != default(string)
                ;
        }
    }

    /// <summary>
    /// A class which represents the edfi.ReportCardGrade table of the ReportCard aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ReportCardGrade : IReportCardGrade, IReportCardGradeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _gradeReferenceExplicitlyAssigned;
        private ReportCardGradeToGradeReference _gradeReference;
        private ReportCardGradeToGradeReference ImplicitGradeReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_gradeReference == null && !_gradeReferenceExplicitlyAssigned)
                    _gradeReference = new ReportCardGradeToGradeReference(this);

                return _gradeReference;
            }
        }

        [DataMember(Name="gradeReference")][NaturalKeyMember]
        public ReportCardGradeToGradeReference GradeReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitGradeReference != null
                    && (_gradeReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitGradeReference.IsReferenceFullyDefined()))
                    return ImplicitGradeReference;

                return null;
            }
            set 
            { 
                _gradeReferenceExplicitlyAssigned = true;
                _gradeReference = value;
                _gradeReference.BackReference = this;             }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IReportCard _reportCard;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IReportCard IReportCardGrade.ReportCard
        {
            get { return _reportCard; }
            set { _reportCard = value; }
        }

        internal IReportCard ReportCard
        {
            set { _reportCard = value; }
        }

        /// <summary>
        /// Month, day, and year of the Student's entry or assignment to the Section.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime IReportCardGrade.BeginDate
        {
            get
            {
                if (ImplicitGradeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradeReference.IsReferenceFullyDefined()))
                    return ImplicitGradeReference.BeginDate;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Grade
                _gradeReferenceExplicitlyAssigned = false;
                ImplicitGradeReference.BeginDate = value;
            }
        }

        /// <summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IReportCardGrade.ClassPeriodName
        {
            get
            {
                if (ImplicitGradeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradeReference.IsReferenceFullyDefined()))
                    return ImplicitGradeReference.ClassPeriodName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Grade
                _gradeReferenceExplicitlyAssigned = false;
                ImplicitGradeReference.ClassPeriodName = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IReportCardGrade.ClassroomIdentificationCode
        {
            get
            {
                if (ImplicitGradeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradeReference.IsReferenceFullyDefined()))
                    return ImplicitGradeReference.ClassroomIdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Grade
                _gradeReferenceExplicitlyAssigned = false;
                ImplicitGradeReference.ClassroomIdentificationCode = value;
            }
        }

        /// <summary>
        /// The type of grade reported (e.g., Exam, Final, Grading Period).
        /// </summary>

        // IS in a reference (ReportCardGrade.GradeTypeId), IS a lookup column 
        string IReportCardGrade.GradeType
        {
            get
            {
                if (ImplicitGradeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradeReference.IsReferenceFullyDefined()))
                    return ImplicitGradeReference.GradeType;

                return null;
            }
            set
            {
                ImplicitGradeReference.GradeType = value;
            }
        }

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IReportCardGrade.LocalCourseCode
        {
            get
            {
                if (ImplicitGradeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradeReference.IsReferenceFullyDefined()))
                    return ImplicitGradeReference.LocalCourseCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Grade
                _gradeReferenceExplicitlyAssigned = false;
                ImplicitGradeReference.LocalCourseCode = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short IReportCardGrade.SchoolYear
        {
            get
            {
                if (ImplicitGradeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradeReference.IsReferenceFullyDefined()))
                    return ImplicitGradeReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Grade
                _gradeReferenceExplicitlyAssigned = false;
                ImplicitGradeReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IReportCardGrade.SequenceOfCourse
        {
            get
            {
                if (ImplicitGradeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradeReference.IsReferenceFullyDefined()))
                    return ImplicitGradeReference.SequenceOfCourse;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Grade
                _gradeReferenceExplicitlyAssigned = false;
                ImplicitGradeReference.SequenceOfCourse = value;
            }
        }

        /// <summary>
        /// The term for the Session during the school year.
        /// </summary>

        // IS in a reference (ReportCardGrade.TermDescriptorId), IS a lookup column 
        string IReportCardGrade.TermDescriptor
        {
            get
            {
                if (ImplicitGradeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradeReference.IsReferenceFullyDefined()))
                    return ImplicitGradeReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitGradeReference.TermDescriptor = value;
            }
        }

        /// <summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IReportCardGrade.UniqueSectionCode
        {
            get
            {
                if (ImplicitGradeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradeReference.IsReferenceFullyDefined()))
                    return ImplicitGradeReference.UniqueSectionCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Grade
                _gradeReferenceExplicitlyAssigned = false;
                ImplicitGradeReference.UniqueSectionCode = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_reportCard != null) 
                    hash = hash * 23 + _reportCard.GetHashCode();
 
                //Referenced Property
                if ((this as IReportCardGrade).BeginDate != null) 
                    hash = hash * 23 + (this as IReportCardGrade).BeginDate.GetHashCode();
 
                //Referenced Property
                if ((this as IReportCardGrade).ClassPeriodName != null) 
                    hash = hash * 23 + (this as IReportCardGrade).ClassPeriodName.GetHashCode();
 
                //Referenced Property
                if ((this as IReportCardGrade).ClassroomIdentificationCode != null) 
                    hash = hash * 23 + (this as IReportCardGrade).ClassroomIdentificationCode.GetHashCode();
 
                //Unified Type Property
                if ((this as IReportCardGrade).GradeType != null) 
                    hash = hash * 23 + (this as IReportCardGrade).GradeType.GetHashCode();
 
                //Referenced Property
                if ((this as IReportCardGrade).LocalCourseCode != null) 
                    hash = hash * 23 + (this as IReportCardGrade).LocalCourseCode.GetHashCode();
 
                //Referenced Property
                if ((this as IReportCardGrade).SchoolYear != null) 
                    hash = hash * 23 + (this as IReportCardGrade).SchoolYear.GetHashCode();
 
                //Referenced Property
                if ((this as IReportCardGrade).SequenceOfCourse != null) 
                    hash = hash * 23 + (this as IReportCardGrade).SequenceOfCourse.GetHashCode();
 
                //Unified Type Property
                if ((this as IReportCardGrade).TermDescriptor != null) 
                    hash = hash * 23 + (this as IReportCardGrade).TermDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IReportCardGrade).UniqueSectionCode != null) 
                    hash = hash * 23 + (this as IReportCardGrade).UniqueSectionCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_gradeReference != null)
                _gradeReference.BackReference = this;
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IReportCardGrade)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IReportCardGrade) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// Represents a reference from the ReportCardStudentCompetencyObjective entity to the StudentCompetencyObjective resource.
    /// </summary>
    [DataContract]
    public class ReportCardStudentCompetencyObjectiveToStudentCompetencyObjectiveReference
    {
        private IReportCardStudentCompetencyObjective backReference;

        // Parameterless constructor for deserialization
        public ReportCardStudentCompetencyObjectiveToStudentCompetencyObjectiveReference() { }

        // Constructor for inline initialization in parent
        public ReportCardStudentCompetencyObjectiveToStudentCompetencyObjectiveReference(IReportCardStudentCompetencyObjective backReference)
        {
            this.backReference = backReference;
        }

        // Expose back reference internally for access after JSON deserialization to enable link generation
        internal IReportCardStudentCompetencyObjective BackReference
        {
            get { return backReference; }
            set { backReference = value; }
        }


        [DataMember(Name="objective"), NaturalKeyMember]
        public string Objective { get; set; }

        [DataMember(Name="objectiveEducationOrganizationId"), NaturalKeyMember]
        public int ObjectiveEducationOrganizationId { get; set; }

        [DataMember(Name="objectiveGradeLevelDescriptor"), NaturalKeyMember]
        public string ObjectiveGradeLevelDescriptor { get; set; }
        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Can't generate a link without the back reference
                    if (backReference == null)
                        return null;
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentCompetencyObjective",
                            Href = "/studentCompetencyObjectives"
                                    + "?gradingPeriodBeginDate=" + JsonConvert.SerializeObject(backReference.ReportCard.GradingPeriodBeginDate).Replace("\"", string.Empty)            
                                    + "&gradingPeriodDescriptor=" + WebUtility.UrlEncode(backReference.ReportCard.GradingPeriodDescriptor)            
                                    + "&objective=" + WebUtility.UrlEncode(Objective)            
                                    + "&objectiveEducationOrganizationId=" + ObjectiveEducationOrganizationId            
                                    + "&objectiveGradeLevelDescriptor=" + WebUtility.UrlEncode(ObjectiveGradeLevelDescriptor)            
                                    + "&schoolId=" + backReference.ReportCard.SchoolId            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(backReference.ReportCard.StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return backReference.ReportCard != null && backReference.ReportCard.GradingPeriodBeginDate != default(DateTime)
                && backReference.ReportCard != null && backReference.ReportCard.GradingPeriodDescriptor != default(string)
                && Objective != default(string)
                && ObjectiveEducationOrganizationId != default(int)
                && ObjectiveGradeLevelDescriptor != default(string)
                && backReference.ReportCard != null && backReference.ReportCard.SchoolId != default(int)
                && backReference.ReportCard != null && backReference.ReportCard.StudentUniqueId != default(string)
                ;
        }
    }

    /// <summary>
    /// A class which represents the edfi.ReportCardStudentCompetencyObjective table of the ReportCard aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ReportCardStudentCompetencyObjective : IReportCardStudentCompetencyObjective, IReportCardStudentCompetencyObjectiveSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _studentCompetencyObjectiveReferenceExplicitlyAssigned;
        private ReportCardStudentCompetencyObjectiveToStudentCompetencyObjectiveReference _studentCompetencyObjectiveReference;
        private ReportCardStudentCompetencyObjectiveToStudentCompetencyObjectiveReference ImplicitStudentCompetencyObjectiveReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentCompetencyObjectiveReference == null && !_studentCompetencyObjectiveReferenceExplicitlyAssigned)
                    _studentCompetencyObjectiveReference = new ReportCardStudentCompetencyObjectiveToStudentCompetencyObjectiveReference(this);

                return _studentCompetencyObjectiveReference;
            }
        }

        [DataMember(Name="studentCompetencyObjectiveReference")][NaturalKeyMember]
        public ReportCardStudentCompetencyObjectiveToStudentCompetencyObjectiveReference StudentCompetencyObjectiveReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentCompetencyObjectiveReference != null
                    && (_studentCompetencyObjectiveReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentCompetencyObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitStudentCompetencyObjectiveReference;

                return null;
            }
            set 
            { 
                _studentCompetencyObjectiveReferenceExplicitlyAssigned = true;
                _studentCompetencyObjectiveReference = value;
                _studentCompetencyObjectiveReference.BackReference = this;             }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IReportCard _reportCard;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IReportCard IReportCardStudentCompetencyObjective.ReportCard
        {
            get { return _reportCard; }
            set { _reportCard = value; }
        }

        internal IReportCard ReportCard
        {
            set { _reportCard = value; }
        }

        /// <summary>
        /// The designated title of the CompetencyObjective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IReportCardStudentCompetencyObjective.Objective
        {
            get
            {
                if (ImplicitStudentCompetencyObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentCompetencyObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitStudentCompetencyObjectiveReference.Objective;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentCompetencyObjective
                _studentCompetencyObjectiveReferenceExplicitlyAssigned = false;
                ImplicitStudentCompetencyObjectiveReference.Objective = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IReportCardStudentCompetencyObjective.ObjectiveEducationOrganizationId
        {
            get
            {
                if (ImplicitStudentCompetencyObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentCompetencyObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitStudentCompetencyObjectiveReference.ObjectiveEducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentCompetencyObjective
                _studentCompetencyObjectiveReferenceExplicitlyAssigned = false;
                ImplicitStudentCompetencyObjectiveReference.ObjectiveEducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The grade level for which the CompetencyObjective is targeted.
        /// </summary>

        // IS in a reference (ReportCardStudentCompetencyObjective.ObjectiveGradeLevelDescriptorId), IS a lookup column 
        string IReportCardStudentCompetencyObjective.ObjectiveGradeLevelDescriptor
        {
            get
            {
                if (ImplicitStudentCompetencyObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentCompetencyObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitStudentCompetencyObjectiveReference.ObjectiveGradeLevelDescriptor;

                return null;
            }
            set
            {
                ImplicitStudentCompetencyObjectiveReference.ObjectiveGradeLevelDescriptor = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_reportCard != null) 
                    hash = hash * 23 + _reportCard.GetHashCode();
 
                //Referenced Property
                if ((this as IReportCardStudentCompetencyObjective).Objective != null) 
                    hash = hash * 23 + (this as IReportCardStudentCompetencyObjective).Objective.GetHashCode();
 
                //Referenced Property
                if ((this as IReportCardStudentCompetencyObjective).ObjectiveEducationOrganizationId != null) 
                    hash = hash * 23 + (this as IReportCardStudentCompetencyObjective).ObjectiveEducationOrganizationId.GetHashCode();
 
                //Unified Type Property
                if ((this as IReportCardStudentCompetencyObjective).ObjectiveGradeLevelDescriptor != null) 
                    hash = hash * 23 + (this as IReportCardStudentCompetencyObjective).ObjectiveGradeLevelDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_studentCompetencyObjectiveReference != null)
                _studentCompetencyObjectiveReference.BackReference = this;
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IReportCardStudentCompetencyObjective)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IReportCardStudentCompetencyObjective) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// Represents a reference from the ReportCardStudentLearningObjective entity to the StudentLearningObjective resource.
    /// </summary>
    [DataContract]
    public class ReportCardStudentLearningObjectiveToStudentLearningObjectiveReference
    {
        private IReportCardStudentLearningObjective backReference;

        // Parameterless constructor for deserialization
        public ReportCardStudentLearningObjectiveToStudentLearningObjectiveReference() { }

        // Constructor for inline initialization in parent
        public ReportCardStudentLearningObjectiveToStudentLearningObjectiveReference(IReportCardStudentLearningObjective backReference)
        {
            this.backReference = backReference;
        }

        // Expose back reference internally for access after JSON deserialization to enable link generation
        internal IReportCardStudentLearningObjective BackReference
        {
            get { return backReference; }
            set { backReference = value; }
        }


        [DataMember(Name="learningObjectiveId"), NaturalKeyMember]
        public string LearningObjectiveId { get; set; }

        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }
        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Can't generate a link without the back reference
                    if (backReference == null)
                        return null;
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentLearningObjective",
                            Href = "/studentLearningObjectives"
                                    + "?gradingPeriodBeginDate=" + JsonConvert.SerializeObject(backReference.ReportCard.GradingPeriodBeginDate).Replace("\"", string.Empty)            
                                    + "&gradingPeriodDescriptor=" + WebUtility.UrlEncode(backReference.ReportCard.GradingPeriodDescriptor)            
                                    + "&learningObjectiveId=" + WebUtility.UrlEncode(LearningObjectiveId)            
                                    + "&namespace=" + WebUtility.UrlEncode(Namespace)            
                                    + "&schoolId=" + backReference.ReportCard.SchoolId            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(backReference.ReportCard.StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return backReference.ReportCard != null && backReference.ReportCard.GradingPeriodBeginDate != default(DateTime)
                && backReference.ReportCard != null && backReference.ReportCard.GradingPeriodDescriptor != default(string)
                && LearningObjectiveId != default(string)
                && Namespace != default(string)
                && backReference.ReportCard != null && backReference.ReportCard.SchoolId != default(int)
                && backReference.ReportCard != null && backReference.ReportCard.StudentUniqueId != default(string)
                ;
        }
    }

    /// <summary>
    /// A class which represents the edfi.ReportCardStudentLearningObjective table of the ReportCard aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ReportCardStudentLearningObjective : IReportCardStudentLearningObjective, IReportCardStudentLearningObjectiveSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _studentLearningObjectiveReferenceExplicitlyAssigned;
        private ReportCardStudentLearningObjectiveToStudentLearningObjectiveReference _studentLearningObjectiveReference;
        private ReportCardStudentLearningObjectiveToStudentLearningObjectiveReference ImplicitStudentLearningObjectiveReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentLearningObjectiveReference == null && !_studentLearningObjectiveReferenceExplicitlyAssigned)
                    _studentLearningObjectiveReference = new ReportCardStudentLearningObjectiveToStudentLearningObjectiveReference(this);

                return _studentLearningObjectiveReference;
            }
        }

        [DataMember(Name="studentLearningObjectiveReference")][NaturalKeyMember]
        public ReportCardStudentLearningObjectiveToStudentLearningObjectiveReference StudentLearningObjectiveReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentLearningObjectiveReference != null
                    && (_studentLearningObjectiveReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitStudentLearningObjectiveReference;

                return null;
            }
            set 
            { 
                _studentLearningObjectiveReferenceExplicitlyAssigned = true;
                _studentLearningObjectiveReference = value;
                _studentLearningObjectiveReference.BackReference = this;             }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IReportCard _reportCard;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IReportCard IReportCardStudentLearningObjective.ReportCard
        {
            get { return _reportCard; }
            set { _reportCard = value; }
        }

        internal IReportCard ReportCard
        {
            set { _reportCard = value; }
        }

        /// <summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IReportCardStudentLearningObjective.LearningObjectiveId
        {
            get
            {
                if (ImplicitStudentLearningObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitStudentLearningObjectiveReference.LearningObjectiveId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentLearningObjective
                _studentLearningObjectiveReferenceExplicitlyAssigned = false;
                ImplicitStudentLearningObjectiveReference.LearningObjectiveId = value;
            }
        }

        /// <summary>
        /// Namespace for the LearningObjective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IReportCardStudentLearningObjective.Namespace
        {
            get
            {
                if (ImplicitStudentLearningObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitStudentLearningObjectiveReference.Namespace;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentLearningObjective
                _studentLearningObjectiveReferenceExplicitlyAssigned = false;
                ImplicitStudentLearningObjectiveReference.Namespace = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_reportCard != null) 
                    hash = hash * 23 + _reportCard.GetHashCode();
 
                //Referenced Property
                if ((this as IReportCardStudentLearningObjective).LearningObjectiveId != null) 
                    hash = hash * 23 + (this as IReportCardStudentLearningObjective).LearningObjectiveId.GetHashCode();
 
                //Referenced Property
                if ((this as IReportCardStudentLearningObjective).Namespace != null) 
                    hash = hash * 23 + (this as IReportCardStudentLearningObjective).Namespace.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_studentLearningObjectiveReference != null)
                _studentLearningObjectiveReference.BackReference = this;
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IReportCardStudentLearningObjective)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IReportCardStudentLearningObjective) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: ReporterDescriptionDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.ReporterDescriptionDescriptor
{
    /// <summary>
    /// A class which represents the edfi.ReporterDescriptionDescriptor table of the ReporterDescriptionDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ReporterDescriptionDescriptor : IReporterDescriptionDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IReporterDescriptionDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ReporterDescriptionDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="reporterDescriptionDescriptorId"), NaturalKeyMember]
        public int ReporterDescriptionDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return ReporterDescriptionDescriptorId; }
            set { ReporterDescriptionDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IReporterDescriptionDescriptor).ReporterDescriptionDescriptorId != null) 
                    hash = hash * 23 + (this as IReporterDescriptionDescriptor).ReporterDescriptionDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="reporterDescriptionType")]
        public string ReporterDescriptionType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IReporterDescriptionDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IReporterDescriptionDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IReporterDescriptionDescriptorSynchronizationSourceSupport.IsCodeValueSupported                { get { return true; } set { } }
 
        bool IReporterDescriptionDescriptorSynchronizationSourceSupport.IsDescriptionSupported              { get { return true; } set { } }
 
        bool IReporterDescriptionDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported       { get { return true; } set { } }
 
        bool IReporterDescriptionDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported         { get { return true; } set { } }
 
        bool IReporterDescriptionDescriptorSynchronizationSourceSupport.IsNamespaceSupported                { get { return true; } set { } }
 
        bool IReporterDescriptionDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported        { get { return true; } set { } }
 
        bool IReporterDescriptionDescriptorSynchronizationSourceSupport.IsReporterDescriptionTypeSupported  { get { return true; } set { } }
 
        bool IReporterDescriptionDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported         { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ReporterDescriptionType

namespace EdFi.Ods.Api.Models.Resources.V2.ReporterDescriptionType
{
    /// <summary>
    /// A class which represents the edfi.ReporterDescriptionType table of the ReporterDescriptionType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ReporterDescriptionType : IReporterDescriptionType, IHasETag, IReporterDescriptionTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ReporterDescriptionType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for ReporterDescription
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="reporterDescriptionTypeId"), NaturalKeyMember]
        public int ReporterDescriptionTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IReporterDescriptionType).ReporterDescriptionTypeId != null) 
                    hash = hash * 23 + (this as IReporterDescriptionType).ReporterDescriptionTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the ReporterDescription type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the ReporterDescription type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IReporterDescriptionType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IReporterDescriptionType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IReporterDescriptionTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IReporterDescriptionTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IReporterDescriptionTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ResidencyStatusDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.ResidencyStatusDescriptor
{
    /// <summary>
    /// A class which represents the edfi.ResidencyStatusDescriptor table of the ResidencyStatusDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ResidencyStatusDescriptor : IResidencyStatusDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IResidencyStatusDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ResidencyStatusDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="residencyStatusDescriptorId"), NaturalKeyMember]
        public int ResidencyStatusDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return ResidencyStatusDescriptorId; }
            set { ResidencyStatusDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IResidencyStatusDescriptor).ResidencyStatusDescriptorId != null) 
                    hash = hash * 23 + (this as IResidencyStatusDescriptor).ResidencyStatusDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="residencyStatusType")]
        public string ResidencyStatusType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IResidencyStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IResidencyStatusDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IResidencyStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported            { get { return true; } set { } }
 
        bool IResidencyStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported          { get { return true; } set { } }
 
        bool IResidencyStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported   { get { return true; } set { } }
 
        bool IResidencyStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported     { get { return true; } set { } }
 
        bool IResidencyStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported            { get { return true; } set { } }
 
        bool IResidencyStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported    { get { return true; } set { } }
 
        bool IResidencyStatusDescriptorSynchronizationSourceSupport.IsResidencyStatusTypeSupported  { get { return true; } set { } }
 
        bool IResidencyStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported     { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ResidencyStatusType

namespace EdFi.Ods.Api.Models.Resources.V2.ResidencyStatusType
{
    /// <summary>
    /// A class which represents the edfi.ResidencyStatusType table of the ResidencyStatusType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ResidencyStatusType : IResidencyStatusType, IHasETag, IResidencyStatusTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ResidencyStatusType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for ResidencyStatus
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="residencyStatusTypeId"), NaturalKeyMember]
        public int ResidencyStatusTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IResidencyStatusType).ResidencyStatusTypeId != null) 
                    hash = hash * 23 + (this as IResidencyStatusType).ResidencyStatusTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the ResidencyStatus type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the ResidencyStatus type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IResidencyStatusType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IResidencyStatusType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IResidencyStatusTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IResidencyStatusTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IResidencyStatusTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ResponseIndicatorType

namespace EdFi.Ods.Api.Models.Resources.V2.ResponseIndicatorType
{
    /// <summary>
    /// A class which represents the edfi.ResponseIndicatorType table of the ResponseIndicatorType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ResponseIndicatorType : IResponseIndicatorType, IHasETag, IResponseIndicatorTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ResponseIndicatorType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for ResponseIndicator
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="responseIndicatorTypeId"), NaturalKeyMember]
        public int ResponseIndicatorTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IResponseIndicatorType).ResponseIndicatorTypeId != null) 
                    hash = hash * 23 + (this as IResponseIndicatorType).ResponseIndicatorTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the ResponseIndicator type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the ResponseIndicator type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IResponseIndicatorType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IResponseIndicatorType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IResponseIndicatorTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IResponseIndicatorTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IResponseIndicatorTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ResponsibilityDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.ResponsibilityDescriptor
{
    /// <summary>
    /// A class which represents the edfi.ResponsibilityDescriptor table of the ResponsibilityDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ResponsibilityDescriptor : IResponsibilityDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IResponsibilityDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ResponsibilityDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="responsibilityDescriptorId"), NaturalKeyMember]
        public int ResponsibilityDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return ResponsibilityDescriptorId; }
            set { ResponsibilityDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IResponsibilityDescriptor).ResponsibilityDescriptorId != null) 
                    hash = hash * 23 + (this as IResponsibilityDescriptor).ResponsibilityDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="responsibilityType")]
        public string ResponsibilityType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IResponsibilityDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IResponsibilityDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IResponsibilityDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
 
        bool IResponsibilityDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
 
        bool IResponsibilityDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
 
        bool IResponsibilityDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
 
        bool IResponsibilityDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
 
        bool IResponsibilityDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
 
        bool IResponsibilityDescriptorSynchronizationSourceSupport.IsResponsibilityTypeSupported  { get { return true; } set { } }
 
        bool IResponsibilityDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ResponsibilityType

namespace EdFi.Ods.Api.Models.Resources.V2.ResponsibilityType
{
    /// <summary>
    /// A class which represents the edfi.ResponsibilityType table of the ResponsibilityType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ResponsibilityType : IResponsibilityType, IHasETag, IResponsibilityTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ResponsibilityType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Responsibility
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="responsibilityTypeId"), NaturalKeyMember]
        public int ResponsibilityTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IResponsibilityType).ResponsibilityTypeId != null) 
                    hash = hash * 23 + (this as IResponsibilityType).ResponsibilityTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Responsibility type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Responsibility type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IResponsibilityType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IResponsibilityType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IResponsibilityTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IResponsibilityTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IResponsibilityTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: RestraintEvent

namespace EdFi.Ods.Api.Models.Resources.V2.RestraintEvent
{
    /// <summary>
    /// Represents a reference to the RestraintEvent resource.
    /// </summary>
    [DataContract]
    public class RestraintEventReference
    {
        [DataMember(Name="eventDate"), NaturalKeyMember]
        public DateTime EventDate { get; set; }

        [DataMember(Name="identifier"), NaturalKeyMember]
        public string RestraintEventIdentifier { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "RestraintEvent",
                            Href = "/restraintEvents"
                                    + "?eventDate=" + JsonConvert.SerializeObject(EventDate).Replace("\"", string.Empty)            
                                    + "&identifier=" + WebUtility.UrlEncode(RestraintEventIdentifier)            
                                    + "&schoolId=" + SchoolId            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EventDate != default(DateTime)
                && RestraintEventIdentifier != default(string)
                && SchoolId != default(int)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.RestraintEvent table of the RestraintEvent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class RestraintEvent : IRestraintEvent, IHasETag, IRestraintEventSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public RestraintEvent()
        {
            RestraintEventPrograms = new List<RestraintEventProgram>();
            RestraintEventReasons = new List<RestraintEventReason>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the RestraintEvent resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _schoolReferenceExplicitlyAssigned;
        private School.SchoolReference _schoolReference;
        private School.SchoolReference ImplicitSchoolReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolReference == null && !_schoolReferenceExplicitlyAssigned)
                    _schoolReference = new School.SchoolReference();

                return _schoolReference;
            }
        }

        [DataMember(Name="schoolReference")][NaturalKeyMember]
        public School.SchoolReference SchoolReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolReference != null
                    && (_schoolReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference;

                return null;
            }
            set 
            { 
                _schoolReferenceExplicitlyAssigned = true;
                _schoolReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Month, day, and year of the RestraintEvent.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eventDate"), NaturalKeyMember]
        public DateTime EventDate { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a restraint event by a school, school system, state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identifier"), NaturalKeyMember]
        public string RestraintEventIdentifier { get; set; }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IRestraintEvent.SchoolId
        {
            get
            {
                if (ImplicitSchoolReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // School
                _schoolReferenceExplicitlyAssigned = false;
                ImplicitSchoolReference.SchoolId = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IRestraintEvent.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IRestraintEvent).EventDate != null) 
                    hash = hash * 23 + (this as IRestraintEvent).EventDate.GetHashCode();
 
                // Standard Property
                if ((this as IRestraintEvent).RestraintEventIdentifier != null) 
                    hash = hash * 23 + (this as IRestraintEvent).RestraintEventIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as IRestraintEvent).SchoolId != null) 
                    hash = hash * 23 + (this as IRestraintEvent).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as IRestraintEvent).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IRestraintEvent).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The setting where the RestraintEvent was exercised.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="educationalEnvironmentType")]
        public string EducationalEnvironmentType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<RestraintEventProgram> _restraintEventPrograms;
        private IList<IRestraintEventProgram> _restraintEventProgramsCovariant;

        [DataMember(Name="programs")]
        public IList<RestraintEventProgram> RestraintEventPrograms 
        { 
            get { return _restraintEventPrograms; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<RestraintEventProgram>(value,
                    (s, e) => ((IRestraintEventProgram)e.Item).RestraintEvent = this);
                _restraintEventPrograms = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IRestraintEventProgram, RestraintEventProgram>(value);
                covariantList.ItemAdded += (s, e) => ((IRestraintEventProgram)e.Item).RestraintEvent = this;
                _restraintEventProgramsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IRestraintEventProgram> IRestraintEvent.RestraintEventPrograms
        {
            get { return _restraintEventProgramsCovariant; }
            set { RestraintEventPrograms = new List<RestraintEventProgram>(value.Cast<RestraintEventProgram>()); }
        }

        private IList<RestraintEventReason> _restraintEventReasons;
        private IList<IRestraintEventReason> _restraintEventReasonsCovariant;

        [DataMember(Name="reasons")]
        public IList<RestraintEventReason> RestraintEventReasons 
        { 
            get { return _restraintEventReasons; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<RestraintEventReason>(value,
                    (s, e) => ((IRestraintEventReason)e.Item).RestraintEvent = this);
                _restraintEventReasons = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IRestraintEventReason, RestraintEventReason>(value);
                covariantList.ItemAdded += (s, e) => ((IRestraintEventReason)e.Item).RestraintEvent = this;
                _restraintEventReasonsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IRestraintEventReason> IRestraintEvent.RestraintEventReasons
        {
            get { return _restraintEventReasonsCovariant; }
            set { RestraintEventReasons = new List<RestraintEventReason>(value.Cast<RestraintEventReason>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_restraintEventPrograms != null) foreach (var item in _restraintEventPrograms)
            {
                item.RestraintEvent = this;
            }
            
            if (_restraintEventReasons != null) foreach (var item in _restraintEventReasons)
            {
                item.RestraintEvent = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IRestraintEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IRestraintEvent) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IRestraintEventSynchronizationSourceSupport.IsEducationalEnvironmentTypeSupported  { get { return true; } set { } }
 
        bool IRestraintEventSynchronizationSourceSupport.IsRestraintEventProgramsSupported      { get { return true; } set { } }
 
        bool IRestraintEventSynchronizationSourceSupport.IsRestraintEventReasonsSupported       { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IRestraintEventProgram, bool> IRestraintEventSynchronizationSourceSupport.IsRestraintEventProgramIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IRestraintEventReason, bool> IRestraintEventSynchronizationSourceSupport.IsRestraintEventReasonIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.RestraintEventProgram table of the RestraintEvent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class RestraintEventProgram : IRestraintEventProgram, IRestraintEventProgramSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _programReferenceExplicitlyAssigned;
        private Program.ProgramReference _programReference;
        private Program.ProgramReference ImplicitProgramReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_programReference == null && !_programReferenceExplicitlyAssigned)
                    _programReference = new Program.ProgramReference();

                return _programReference;
            }
        }

        [DataMember(Name="programReference")][NaturalKeyMember]
        public Program.ProgramReference ProgramReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitProgramReference != null
                    && (_programReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference;

                return null;
            }
            set 
            { 
                _programReferenceExplicitlyAssigned = true;
                _programReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IRestraintEvent _restraintEvent;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IRestraintEvent IRestraintEventProgram.RestraintEvent
        {
            get { return _restraintEvent; }
            set { _restraintEvent = value; }
        }

        internal IRestraintEvent RestraintEvent
        {
            set { _restraintEvent = value; }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IRestraintEventProgram.EducationOrganizationId
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IRestraintEventProgram.ProgramName
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.ProgramName = value;
            }
        }

        /// <summary>
        /// The type of program.
        /// </summary>

        // IS in a reference (RestraintEventProgram.ProgramTypeId), IS a lookup column 
        string IRestraintEventProgram.ProgramType
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramType;

                return null;
            }
            set
            {
                ImplicitProgramReference.ProgramType = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_restraintEvent != null) 
                    hash = hash * 23 + _restraintEvent.GetHashCode();
 
                //Referenced Property
                if ((this as IRestraintEventProgram).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IRestraintEventProgram).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IRestraintEventProgram).ProgramName != null) 
                    hash = hash * 23 + (this as IRestraintEventProgram).ProgramName.GetHashCode();
 
                //Unified Type Property
                if ((this as IRestraintEventProgram).ProgramType != null) 
                    hash = hash * 23 + (this as IRestraintEventProgram).ProgramType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IRestraintEventProgram)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IRestraintEventProgram) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.RestraintEventReason table of the RestraintEvent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class RestraintEventReason : IRestraintEventReason, IRestraintEventReasonSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IRestraintEvent _restraintEvent;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IRestraintEvent IRestraintEventReason.RestraintEvent
        {
            get { return _restraintEvent; }
            set { _restraintEvent = value; }
        }

        internal IRestraintEvent RestraintEvent
        {
            set { _restraintEvent = value; }
        }

        /// <summary>
        /// A categorization of the circumstances or reason for the RestraintEvent.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="type"), NaturalKeyMember]
        public string RestraintEventReasonType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_restraintEvent != null) 
                    hash = hash * 23 + _restraintEvent.GetHashCode();
 
                // Standard Property
                if ((this as IRestraintEventReason).RestraintEventReasonType != null) 
                    hash = hash * 23 + (this as IRestraintEventReason).RestraintEventReasonType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IRestraintEventReason)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IRestraintEventReason) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: RestraintEventReasonType

namespace EdFi.Ods.Api.Models.Resources.V2.RestraintEventReasonType
{
    /// <summary>
    /// A class which represents the edfi.RestraintEventReasonType table of the RestraintEventReasonType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class RestraintEventReasonType : IRestraintEventReasonType, IHasETag, IRestraintEventReasonTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the RestraintEventReasonType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for RestraintEventReason
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="restraintEventReasonTypeId"), NaturalKeyMember]
        public int RestraintEventReasonTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IRestraintEventReasonType).RestraintEventReasonTypeId != null) 
                    hash = hash * 23 + (this as IRestraintEventReasonType).RestraintEventReasonTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the RestraintEventReason type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the RestraintEventReason type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IRestraintEventReasonType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IRestraintEventReasonType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IRestraintEventReasonTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IRestraintEventReasonTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IRestraintEventReasonTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ResultDatatypeType

namespace EdFi.Ods.Api.Models.Resources.V2.ResultDatatypeType
{
    /// <summary>
    /// A class which represents the edfi.ResultDatatypeType table of the ResultDatatypeType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ResultDatatypeType : IResultDatatypeType, IHasETag, IResultDatatypeTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ResultDatatypeType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for ResultDatatype
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="resultDatatypeTypeId"), NaturalKeyMember]
        public int ResultDatatypeTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IResultDatatypeType).ResultDatatypeTypeId != null) 
                    hash = hash * 23 + (this as IResultDatatypeType).ResultDatatypeTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the ResultDatatype type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the ResultDatatype type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IResultDatatypeType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IResultDatatypeType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IResultDatatypeTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IResultDatatypeTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IResultDatatypeTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: RetestIndicatorType

namespace EdFi.Ods.Api.Models.Resources.V2.RetestIndicatorType
{
    /// <summary>
    /// A class which represents the edfi.RetestIndicatorType table of the RetestIndicatorType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class RetestIndicatorType : IRetestIndicatorType, IHasETag, IRetestIndicatorTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the RetestIndicatorType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for RetestIndicator
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="retestIndicatorTypeId"), NaturalKeyMember]
        public int RetestIndicatorTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IRetestIndicatorType).RetestIndicatorTypeId != null) 
                    hash = hash * 23 + (this as IRetestIndicatorType).RetestIndicatorTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the RetestIndicator type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the RetestIndicator type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IRetestIndicatorType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IRetestIndicatorType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IRetestIndicatorTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IRetestIndicatorTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IRetestIndicatorTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: School

namespace EdFi.Ods.Api.Models.Resources.V2.School
{
    /// <summary>
    /// Represents a reference to the School resource.
    /// </summary>
    [DataContract]
    public class SchoolReference
    {
        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "School",
                            Href = "/schools"
                                    + "?schoolId=" + SchoolId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return SchoolId != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.School table of the School aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class School : ISchool, EdFi.Ods.Entities.Common.IEducationOrganization, IHasETag, ISchoolSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public School()
        {
            SchoolCategories = new List<SchoolCategory>();
            SchoolGradeLevels = new List<SchoolGradeLevel>();

            // Inherited lists
            EducationOrganizationAddresses = new List<EducationOrganization.EducationOrganizationAddress>();
            EducationOrganizationCategories = new List<EducationOrganization.EducationOrganizationCategory>();
            EducationOrganizationIdentificationCodes = new List<EducationOrganization.EducationOrganizationIdentificationCode>();
            EducationOrganizationInstitutionTelephones = new List<EducationOrganization.EducationOrganizationInstitutionTelephone>();
            EducationOrganizationInternationalAddresses = new List<EducationOrganization.EducationOrganizationInternationalAddress>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the School resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _charterApprovalSchoolYearTypeReferenceExplicitlyAssigned;
        private SchoolYearType.SchoolYearTypeReference _charterApprovalSchoolYearTypeReference;
        private SchoolYearType.SchoolYearTypeReference ImplicitCharterApprovalSchoolYearTypeReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_charterApprovalSchoolYearTypeReference == null && !_charterApprovalSchoolYearTypeReferenceExplicitlyAssigned)
                    _charterApprovalSchoolYearTypeReference = new SchoolYearType.SchoolYearTypeReference();

                return _charterApprovalSchoolYearTypeReference;
            }
        }

        [DataMember(Name="charterApprovalSchoolYearTypeReference")]
        public SchoolYearType.SchoolYearTypeReference CharterApprovalSchoolYearTypeReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitCharterApprovalSchoolYearTypeReference != null
                    && (_charterApprovalSchoolYearTypeReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCharterApprovalSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitCharterApprovalSchoolYearTypeReference;

                return null;
            }
            set 
            { 
                _charterApprovalSchoolYearTypeReferenceExplicitlyAssigned = true;
                _charterApprovalSchoolYearTypeReference = value;
            }
        }
        private bool _localEducationAgencyReferenceExplicitlyAssigned;
        private LocalEducationAgency.LocalEducationAgencyReference _localEducationAgencyReference;
        private LocalEducationAgency.LocalEducationAgencyReference ImplicitLocalEducationAgencyReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_localEducationAgencyReference == null && !_localEducationAgencyReferenceExplicitlyAssigned)
                    _localEducationAgencyReference = new LocalEducationAgency.LocalEducationAgencyReference();

                return _localEducationAgencyReference;
            }
        }

        [DataMember(Name="localEducationAgencyReference")]
        public LocalEducationAgency.LocalEducationAgencyReference LocalEducationAgencyReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitLocalEducationAgencyReference != null
                    && (_localEducationAgencyReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitLocalEducationAgencyReference.IsReferenceFullyDefined()))
                    return ImplicitLocalEducationAgencyReference;

                return null;
            }
            set 
            { 
                _localEducationAgencyReferenceExplicitlyAssigned = true;
                _localEducationAgencyReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        int IEducationOrganization.EducationOrganizationId
        {
            get { return SchoolId; }
            set { SchoolId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as ISchool).SchoolId != null) 
                    hash = hash * 23 + (this as ISchool).SchoolId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The full, legally accepted name of the institution.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfInstitution")]
        public string NameOfInstitution { get; set; }

        /// <summary>
        /// The current operational status of the EducationOrganization (e.g., active, inactive).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="operationalStatusType")]
        public string OperationalStatusType { get; set; }

        /// <summary>
        /// A short name for the institution.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortNameOfInstitution")]
        public string ShortNameOfInstitution { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization by the StateEducationAgency (SEA).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="stateOrganizationId")]
        public string StateOrganizationId { get; set; }

        /// <summary>
        /// The public web site address (URL) for the EducationOrganization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="webSite")]
        public string WebSite { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The type of education institution as classified by its funding source, for example public or private.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="administrativeFundingControlDescriptor")]
        public string AdministrativeFundingControlDescriptor { get; set; }

        /// <summary>
        /// The type of agency that approved the establishment or continuation of a charter school.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="charterApprovalAgencyType")]
        public string CharterApprovalAgencyType { get; set; }

        /// <summary>
        /// The school year in which a charter school was initially approved.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short? ISchool.CharterApprovalSchoolYear
        {
            get
            {
                if (ImplicitCharterApprovalSchoolYearTypeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCharterApprovalSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitCharterApprovalSchoolYearTypeReference.SchoolYear;

                return default(short?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // CharterApprovalSchoolYearType
                _charterApprovalSchoolYearTypeReferenceExplicitlyAssigned = false;
                ImplicitCharterApprovalSchoolYearTypeReference.SchoolYear = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="charterStatusType")]
        public string CharterStatusType { get; set; }

        /// <summary>
        /// The type of Internet access available.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="internetAccessType")]
        public string InternetAccessType { get; set; }

        /// <summary>
        /// The identifier assigned to a local education agency by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? ISchool.LocalEducationAgencyId
        {
            get
            {
                if (ImplicitLocalEducationAgencyReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitLocalEducationAgencyReference.IsReferenceFullyDefined()))
                    return ImplicitLocalEducationAgencyReference.LocalEducationAgencyId;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // LocalEducationAgency
                _localEducationAgencyReferenceExplicitlyAssigned = false;
                ImplicitLocalEducationAgencyReference.LocalEducationAgencyId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// A school that has been designed: 1) to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing, or eliminating racial isolation; and/or 2) to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="magnetSpecialProgramEmphasisSchoolType")]
        public string MagnetSpecialProgramEmphasisSchoolType { get; set; }

        /// <summary>
        /// The type of education institution as classified by its primary focus.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="type")]
        public string SchoolType { get; set; }

        /// <summary>
        /// Denotes the Title I Part A designation for the school.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="titleIPartASchoolDesignationType")]
        public string TitleIPartASchoolDesignationType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        private IList<EducationOrganization.EducationOrganizationAddress> _educationOrganizationAddresses;
        private IList<IEducationOrganizationAddress> _educationOrganizationAddressesCovariant;

        [DataMember(Name="addresses")]
        public IList<EducationOrganization.EducationOrganizationAddress> EducationOrganizationAddresses 
        {
            get { return _educationOrganizationAddresses; }
            set 
            {
                _educationOrganizationAddresses = value;
                _educationOrganizationAddressesCovariant = new CovariantIListAdapter<IEducationOrganizationAddress, EducationOrganization.EducationOrganizationAddress>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationAddress> IEducationOrganization.EducationOrganizationAddresses
        {
            get { return _educationOrganizationAddressesCovariant; }
            set { EducationOrganizationAddresses = new List<EducationOrganization.EducationOrganizationAddress>(value.Cast<EducationOrganization.EducationOrganizationAddress>()); }
        }
        private IList<EducationOrganization.EducationOrganizationCategory> _educationOrganizationCategories;
        private IList<IEducationOrganizationCategory> _educationOrganizationCategoriesCovariant;

        [DataMember(Name="educationOrganizationCategories")]
        public IList<EducationOrganization.EducationOrganizationCategory> EducationOrganizationCategories 
        {
            get { return _educationOrganizationCategories; }
            set 
            {
                _educationOrganizationCategories = value;
                _educationOrganizationCategoriesCovariant = new CovariantIListAdapter<IEducationOrganizationCategory, EducationOrganization.EducationOrganizationCategory>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationCategory> IEducationOrganization.EducationOrganizationCategories
        {
            get { return _educationOrganizationCategoriesCovariant; }
            set { EducationOrganizationCategories = new List<EducationOrganization.EducationOrganizationCategory>(value.Cast<EducationOrganization.EducationOrganizationCategory>()); }
        }
        private IList<EducationOrganization.EducationOrganizationIdentificationCode> _educationOrganizationIdentificationCodes;
        private IList<IEducationOrganizationIdentificationCode> _educationOrganizationIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes")]
        public IList<EducationOrganization.EducationOrganizationIdentificationCode> EducationOrganizationIdentificationCodes 
        {
            get { return _educationOrganizationIdentificationCodes; }
            set 
            {
                _educationOrganizationIdentificationCodes = value;
                _educationOrganizationIdentificationCodesCovariant = new CovariantIListAdapter<IEducationOrganizationIdentificationCode, EducationOrganization.EducationOrganizationIdentificationCode>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationIdentificationCode> IEducationOrganization.EducationOrganizationIdentificationCodes
        {
            get { return _educationOrganizationIdentificationCodesCovariant; }
            set { EducationOrganizationIdentificationCodes = new List<EducationOrganization.EducationOrganizationIdentificationCode>(value.Cast<EducationOrganization.EducationOrganizationIdentificationCode>()); }
        }
        private IList<EducationOrganization.EducationOrganizationInstitutionTelephone> _educationOrganizationInstitutionTelephones;
        private IList<IEducationOrganizationInstitutionTelephone> _educationOrganizationInstitutionTelephonesCovariant;

        [DataMember(Name="institutionTelephones")]
        public IList<EducationOrganization.EducationOrganizationInstitutionTelephone> EducationOrganizationInstitutionTelephones 
        {
            get { return _educationOrganizationInstitutionTelephones; }
            set 
            {
                _educationOrganizationInstitutionTelephones = value;
                _educationOrganizationInstitutionTelephonesCovariant = new CovariantIListAdapter<IEducationOrganizationInstitutionTelephone, EducationOrganization.EducationOrganizationInstitutionTelephone>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationInstitutionTelephone> IEducationOrganization.EducationOrganizationInstitutionTelephones
        {
            get { return _educationOrganizationInstitutionTelephonesCovariant; }
            set { EducationOrganizationInstitutionTelephones = new List<EducationOrganization.EducationOrganizationInstitutionTelephone>(value.Cast<EducationOrganization.EducationOrganizationInstitutionTelephone>()); }
        }
        private IList<EducationOrganization.EducationOrganizationInternationalAddress> _educationOrganizationInternationalAddresses;
        private IList<IEducationOrganizationInternationalAddress> _educationOrganizationInternationalAddressesCovariant;

        [DataMember(Name="internationalAddresses")]
        public IList<EducationOrganization.EducationOrganizationInternationalAddress> EducationOrganizationInternationalAddresses 
        {
            get { return _educationOrganizationInternationalAddresses; }
            set 
            {
                _educationOrganizationInternationalAddresses = value;
                _educationOrganizationInternationalAddressesCovariant = new CovariantIListAdapter<IEducationOrganizationInternationalAddress, EducationOrganization.EducationOrganizationInternationalAddress>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationInternationalAddress> IEducationOrganization.EducationOrganizationInternationalAddresses
        {
            get { return _educationOrganizationInternationalAddressesCovariant; }
            set { EducationOrganizationInternationalAddresses = new List<EducationOrganization.EducationOrganizationInternationalAddress>(value.Cast<EducationOrganization.EducationOrganizationInternationalAddress>()); }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<SchoolCategory> _schoolCategories;
        private IList<ISchoolCategory> _schoolCategoriesCovariant;

        [DataMember(Name="schoolCategories")]
        public IList<SchoolCategory> SchoolCategories 
        { 
            get { return _schoolCategories; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<SchoolCategory>(value,
                    (s, e) => ((ISchoolCategory)e.Item).School = this);
                _schoolCategories = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ISchoolCategory, SchoolCategory>(value);
                covariantList.ItemAdded += (s, e) => ((ISchoolCategory)e.Item).School = this;
                _schoolCategoriesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ISchoolCategory> ISchool.SchoolCategories
        {
            get { return _schoolCategoriesCovariant; }
            set { SchoolCategories = new List<SchoolCategory>(value.Cast<SchoolCategory>()); }
        }

        private IList<SchoolGradeLevel> _schoolGradeLevels;
        private IList<ISchoolGradeLevel> _schoolGradeLevelsCovariant;

        [DataMember(Name="gradeLevels")]
        public IList<SchoolGradeLevel> SchoolGradeLevels 
        { 
            get { return _schoolGradeLevels; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<SchoolGradeLevel>(value,
                    (s, e) => ((ISchoolGradeLevel)e.Item).School = this);
                _schoolGradeLevels = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ISchoolGradeLevel, SchoolGradeLevel>(value);
                covariantList.ItemAdded += (s, e) => ((ISchoolGradeLevel)e.Item).School = this;
                _schoolGradeLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ISchoolGradeLevel> ISchool.SchoolGradeLevels
        {
            get { return _schoolGradeLevelsCovariant; }
            set { SchoolGradeLevels = new List<SchoolGradeLevel>(value.Cast<SchoolGradeLevel>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            // _educationOrganizationAddresses
            // _educationOrganizationCategories
            // _educationOrganizationIdentificationCodes
            // _educationOrganizationInstitutionTelephones
            // _educationOrganizationInternationalAddresses
            if (_schoolCategories != null) foreach (var item in _schoolCategories)
            {
                item.School = this;
            }
            
            if (_schoolGradeLevels != null) foreach (var item in _schoolGradeLevels)
            {
                item.School = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISchool)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISchool) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ISchoolSynchronizationSourceSupport.IsAdministrativeFundingControlDescriptorSupported       { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsCharterApprovalAgencyTypeSupported                    { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsCharterApprovalSchoolYearSupported                    { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsCharterStatusTypeSupported                            { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsEducationOrganizationAddressesSupported               { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsEducationOrganizationCategoriesSupported              { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsEducationOrganizationIdentificationCodesSupported     { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsEducationOrganizationInstitutionTelephonesSupported   { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsEducationOrganizationInternationalAddressesSupported  { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsInternetAccessTypeSupported                           { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsLocalEducationAgencyIdSupported                       { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsMagnetSpecialProgramEmphasisSchoolTypeSupported       { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsNameOfInstitutionSupported                            { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsOperationalStatusTypeSupported                        { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsSchoolCategoriesSupported                             { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsSchoolGradeLevelsSupported                            { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsSchoolTypeSupported                                   { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsShortNameOfInstitutionSupported                       { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsStateOrganizationIdSupported                          { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsTitleIPartASchoolDesignationTypeSupported             { get { return true; } set { } }
 
        bool ISchoolSynchronizationSourceSupport.IsWebSiteSupported                                      { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IEducationOrganizationAddress, bool> ISchoolSynchronizationSourceSupport.IsEducationOrganizationAddressIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationCategory, bool> ISchoolSynchronizationSourceSupport.IsEducationOrganizationCategoryIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationIdentificationCode, bool> ISchoolSynchronizationSourceSupport.IsEducationOrganizationIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationInstitutionTelephone, bool> ISchoolSynchronizationSourceSupport.IsEducationOrganizationInstitutionTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationInternationalAddress, bool> ISchoolSynchronizationSourceSupport.IsEducationOrganizationInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<ISchoolCategory, bool> ISchoolSynchronizationSourceSupport.IsSchoolCategoryIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<ISchoolGradeLevel, bool> ISchoolSynchronizationSourceSupport.IsSchoolGradeLevelIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.SchoolCategory table of the School aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SchoolCategory : ISchoolCategory, ISchoolCategorySynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ISchool _school;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ISchool ISchoolCategory.School
        {
            get { return _school; }
            set { _school = value; }
        }

        internal ISchool School
        {
            set { _school = value; }
        }

        /// <summary>
        /// The one or more categories of school. For example: High School, Middle School, and/or Elementary School.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="type"), NaturalKeyMember]
        public string SchoolCategoryType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_school != null) 
                    hash = hash * 23 + _school.GetHashCode();
 
                // Standard Property
                if ((this as ISchoolCategory).SchoolCategoryType != null) 
                    hash = hash * 23 + (this as ISchoolCategory).SchoolCategoryType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISchoolCategory)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISchoolCategory) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.SchoolGradeLevel table of the School aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SchoolGradeLevel : ISchoolGradeLevel, ISchoolGradeLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ISchool _school;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ISchool ISchoolGradeLevel.School
        {
            get { return _school; }
            set { _school = value; }
        }

        internal ISchool School
        {
            set { _school = value; }
        }

        /// <summary>
        /// The grade levels served at the school.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_school != null) 
                    hash = hash * 23 + _school.GetHashCode();
 
                // Standard Property
                if ((this as ISchoolGradeLevel).GradeLevelDescriptor != null) 
                    hash = hash * 23 + (this as ISchoolGradeLevel).GradeLevelDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISchoolGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISchoolGradeLevel) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: SchoolCategoryType

namespace EdFi.Ods.Api.Models.Resources.V2.SchoolCategoryType
{
    /// <summary>
    /// A class which represents the edfi.SchoolCategoryType table of the SchoolCategoryType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SchoolCategoryType : ISchoolCategoryType, IHasETag, ISchoolCategoryTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the SchoolCategoryType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for SchoolCategory
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="schoolCategoryTypeId"), NaturalKeyMember]
        public int SchoolCategoryTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ISchoolCategoryType).SchoolCategoryTypeId != null) 
                    hash = hash * 23 + (this as ISchoolCategoryType).SchoolCategoryTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the SchoolCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the SchoolCategory type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISchoolCategoryType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISchoolCategoryType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ISchoolCategoryTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ISchoolCategoryTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ISchoolCategoryTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: SchoolChoiceImplementStatusType

namespace EdFi.Ods.Api.Models.Resources.V2.SchoolChoiceImplementStatusType
{
    /// <summary>
    /// A class which represents the edfi.SchoolChoiceImplementStatusType table of the SchoolChoiceImplementStatusType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SchoolChoiceImplementStatusType : ISchoolChoiceImplementStatusType, IHasETag, ISchoolChoiceImplementStatusTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the SchoolChoiceImplementStatusType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for SchoolChoiceImplementStatus
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="schoolChoiceImplementStatusTypeId"), NaturalKeyMember]
        public int SchoolChoiceImplementStatusTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ISchoolChoiceImplementStatusType).SchoolChoiceImplementStatusTypeId != null) 
                    hash = hash * 23 + (this as ISchoolChoiceImplementStatusType).SchoolChoiceImplementStatusTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the SchoolChoiceImplementStatus type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the SchoolChoiceImplementStatus type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISchoolChoiceImplementStatusType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISchoolChoiceImplementStatusType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ISchoolChoiceImplementStatusTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ISchoolChoiceImplementStatusTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ISchoolChoiceImplementStatusTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: SchoolFoodServicesEligibilityDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.SchoolFoodServicesEligibilityDescriptor
{
    /// <summary>
    /// A class which represents the edfi.SchoolFoodServicesEligibilityDescriptor table of the SchoolFoodServicesEligibilityDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SchoolFoodServicesEligibilityDescriptor : ISchoolFoodServicesEligibilityDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, ISchoolFoodServicesEligibilityDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the SchoolFoodServicesEligibilityDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="schoolFoodServicesEligibilityDescriptorId"), NaturalKeyMember]
        public int SchoolFoodServicesEligibilityDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return SchoolFoodServicesEligibilityDescriptorId; }
            set { SchoolFoodServicesEligibilityDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as ISchoolFoodServicesEligibilityDescriptor).SchoolFoodServicesEligibilityDescriptorId != null) 
                    hash = hash * 23 + (this as ISchoolFoodServicesEligibilityDescriptor).SchoolFoodServicesEligibilityDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="schoolFoodServicesEligibilityType")]
        public string SchoolFoodServicesEligibilityType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISchoolFoodServicesEligibilityDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISchoolFoodServicesEligibilityDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ISchoolFoodServicesEligibilityDescriptorSynchronizationSourceSupport.IsCodeValueSupported                          { get { return true; } set { } }
 
        bool ISchoolFoodServicesEligibilityDescriptorSynchronizationSourceSupport.IsDescriptionSupported                        { get { return true; } set { } }
 
        bool ISchoolFoodServicesEligibilityDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported                 { get { return true; } set { } }
 
        bool ISchoolFoodServicesEligibilityDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported                   { get { return true; } set { } }
 
        bool ISchoolFoodServicesEligibilityDescriptorSynchronizationSourceSupport.IsNamespaceSupported                          { get { return true; } set { } }
 
        bool ISchoolFoodServicesEligibilityDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported                  { get { return true; } set { } }
 
        bool ISchoolFoodServicesEligibilityDescriptorSynchronizationSourceSupport.IsSchoolFoodServicesEligibilityTypeSupported  { get { return true; } set { } }
 
        bool ISchoolFoodServicesEligibilityDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported                   { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: SchoolFoodServicesEligibilityType

namespace EdFi.Ods.Api.Models.Resources.V2.SchoolFoodServicesEligibilityType
{
    /// <summary>
    /// A class which represents the edfi.SchoolFoodServicesEligibilityType table of the SchoolFoodServicesEligibilityType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SchoolFoodServicesEligibilityType : ISchoolFoodServicesEligibilityType, IHasETag, ISchoolFoodServicesEligibilityTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the SchoolFoodServicesEligibilityType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for SchoolFoodServicesEligibility
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="schoolFoodServicesEligibilityTypeId"), NaturalKeyMember]
        public int SchoolFoodServicesEligibilityTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ISchoolFoodServicesEligibilityType).SchoolFoodServicesEligibilityTypeId != null) 
                    hash = hash * 23 + (this as ISchoolFoodServicesEligibilityType).SchoolFoodServicesEligibilityTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the SchoolFoodServicesEligibility type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the SchoolFoodServicesEligibility type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISchoolFoodServicesEligibilityType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISchoolFoodServicesEligibilityType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ISchoolFoodServicesEligibilityTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ISchoolFoodServicesEligibilityTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ISchoolFoodServicesEligibilityTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: SchoolType

namespace EdFi.Ods.Api.Models.Resources.V2.SchoolType
{
    /// <summary>
    /// A class which represents the edfi.SchoolType table of the SchoolType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SchoolType : ISchoolType, IHasETag, ISchoolTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the SchoolType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for School
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="schoolTypeId"), NaturalKeyMember]
        public int SchoolTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ISchoolType).SchoolTypeId != null) 
                    hash = hash * 23 + (this as ISchoolType).SchoolTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the School type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the School type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISchoolType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISchoolType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ISchoolTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ISchoolTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ISchoolTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: SchoolYearType

namespace EdFi.Ods.Api.Models.Resources.V2.SchoolYearType
{
    /// <summary>
    /// Represents a reference to the SchoolYearType resource.
    /// </summary>
    [DataContract]
    public class SchoolYearTypeReference
    {
        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "SchoolYearType",
                            Href = "/schoolYearTypes"
                                    + "?schoolYear=" + SchoolYear            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return SchoolYear != default(short)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.SchoolYearType table of the SchoolYearType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SchoolYearType : ISchoolYearType, IHasETag, ISchoolYearTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the SchoolYearType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for School Year
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ISchoolYearType).SchoolYear != null) 
                    hash = hash * 23 + (this as ISchoolYearType).SchoolYear.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The code for the current school year.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="currentSchoolYear")]
        public bool CurrentSchoolYear { get; set; }

        /// <summary>
        /// The description for the SchoolYear type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="schoolYearDescription")]
        public string SchoolYearDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISchoolYearType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISchoolYearType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ISchoolYearTypeSynchronizationSourceSupport.IsCurrentSchoolYearSupported      { get { return true; } set { } }
 
        bool ISchoolYearTypeSynchronizationSourceSupport.IsSchoolYearDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: Section

namespace EdFi.Ods.Api.Models.Resources.V2.Section
{
    /// <summary>
    /// Represents a reference to the Section resource.
    /// </summary>
    [DataContract]
    public class SectionReference
    {
        [DataMember(Name="classPeriodName"), NaturalKeyMember]
        public string ClassPeriodName { get; set; }

        [DataMember(Name="classroomIdentificationCode"), NaturalKeyMember]
        public string ClassroomIdentificationCode { get; set; }

        [DataMember(Name="localCourseCode"), NaturalKeyMember]
        public string LocalCourseCode { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sequenceOfCourse"), NaturalKeyMember]
        public int SequenceOfCourse { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        [DataMember(Name="uniqueSectionCode"), NaturalKeyMember]
        public string UniqueSectionCode { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "Section",
                            Href = "/sections"
                                    + "?classPeriodName=" + WebUtility.UrlEncode(ClassPeriodName)            
                                    + "&classroomIdentificationCode=" + WebUtility.UrlEncode(ClassroomIdentificationCode)            
                                    + "&localCourseCode=" + WebUtility.UrlEncode(LocalCourseCode)            
                                    + "&schoolId=" + SchoolId            
                                    + "&schoolYear=" + SchoolYear            
                                    + "&sequenceOfCourse=" + SequenceOfCourse            
                                    + "&termDescriptor=" + WebUtility.UrlEncode(TermDescriptor)            
                                    + "&uniqueSectionCode=" + WebUtility.UrlEncode(UniqueSectionCode)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ClassPeriodName != default(string)
                && ClassroomIdentificationCode != default(string)
                && LocalCourseCode != default(string)
                && SchoolId != default(int)
                && SchoolYear != default(short)
                && SequenceOfCourse != default(int)
                && TermDescriptor != default(string)
                && UniqueSectionCode != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Section table of the Section aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class Section : ISection, IHasETag, ISectionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Section()
        {
            SectionCharacteristics = new List<SectionCharacteristic>();
            SectionPrograms = new List<SectionProgram>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Section resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _classPeriodReferenceExplicitlyAssigned;
        private ClassPeriod.ClassPeriodReference _classPeriodReference;
        private ClassPeriod.ClassPeriodReference ImplicitClassPeriodReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_classPeriodReference == null && !_classPeriodReferenceExplicitlyAssigned)
                    _classPeriodReference = new ClassPeriod.ClassPeriodReference();

                return _classPeriodReference;
            }
        }

        [DataMember(Name="classPeriodReference")][NaturalKeyMember]
        public ClassPeriod.ClassPeriodReference ClassPeriodReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitClassPeriodReference != null
                    && (_classPeriodReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitClassPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitClassPeriodReference;

                return null;
            }
            set 
            { 
                _classPeriodReferenceExplicitlyAssigned = true;
                _classPeriodReference = value;
            }
        }
        private bool _courseOfferingReferenceExplicitlyAssigned;
        private CourseOffering.CourseOfferingReference _courseOfferingReference;
        private CourseOffering.CourseOfferingReference ImplicitCourseOfferingReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_courseOfferingReference == null && !_courseOfferingReferenceExplicitlyAssigned)
                    _courseOfferingReference = new CourseOffering.CourseOfferingReference();

                return _courseOfferingReference;
            }
        }

        [DataMember(Name="courseOfferingReference")][NaturalKeyMember]
        public CourseOffering.CourseOfferingReference CourseOfferingReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitCourseOfferingReference != null
                    && (_courseOfferingReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCourseOfferingReference.IsReferenceFullyDefined()))
                    return ImplicitCourseOfferingReference;

                return null;
            }
            set 
            { 
                _courseOfferingReferenceExplicitlyAssigned = true;
                _courseOfferingReference = value;
            }
        }
        private bool _locationReferenceExplicitlyAssigned;
        private Location.LocationReference _locationReference;
        private Location.LocationReference ImplicitLocationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_locationReference == null && !_locationReferenceExplicitlyAssigned)
                    _locationReference = new Location.LocationReference();

                return _locationReference;
            }
        }

        [DataMember(Name="locationReference")][NaturalKeyMember]
        public Location.LocationReference LocationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitLocationReference != null
                    && (_locationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitLocationReference.IsReferenceFullyDefined()))
                    return ImplicitLocationReference;

                return null;
            }
            set 
            { 
                _locationReferenceExplicitlyAssigned = true;
                _locationReference = value;
            }
        }
        private bool _schoolReferenceExplicitlyAssigned;
        private School.SchoolReference _schoolReference;
        private School.SchoolReference ImplicitSchoolReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolReference == null && !_schoolReferenceExplicitlyAssigned)
                    _schoolReference = new School.SchoolReference();

                return _schoolReference;
            }
        }

        [DataMember(Name="schoolReference")][NaturalKeyMember]
        public School.SchoolReference SchoolReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolReference != null
                    && (_schoolReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference;

                return null;
            }
            set 
            { 
                _schoolReferenceExplicitlyAssigned = true;
                _schoolReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ISection.ClassPeriodName
        {
            get
            {
                if (ImplicitClassPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitClassPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitClassPeriodReference.ClassPeriodName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ClassPeriod
                _classPeriodReferenceExplicitlyAssigned = false;
                ImplicitClassPeriodReference.ClassPeriodName = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ISection.ClassroomIdentificationCode
        {
            get
            {
                if (ImplicitLocationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitLocationReference.IsReferenceFullyDefined()))
                    return ImplicitLocationReference.ClassroomIdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Location
                _locationReferenceExplicitlyAssigned = false;
                ImplicitLocationReference.ClassroomIdentificationCode = value;
            }
        }

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ISection.LocalCourseCode
        {
            get
            {
                if (ImplicitCourseOfferingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCourseOfferingReference.IsReferenceFullyDefined()))
                    return ImplicitCourseOfferingReference.LocalCourseCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // CourseOffering
                _courseOfferingReferenceExplicitlyAssigned = false;
                ImplicitCourseOfferingReference.LocalCourseCode = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int ISection.SchoolId
        {
            get
            {
                if (ImplicitClassPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitClassPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitClassPeriodReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ClassPeriod
                _classPeriodReferenceExplicitlyAssigned = false;
                ImplicitClassPeriodReference.SchoolId = value;

                // CourseOffering
                _courseOfferingReferenceExplicitlyAssigned = false;
                ImplicitCourseOfferingReference.SchoolId = value;

                // Location
                _locationReferenceExplicitlyAssigned = false;
                ImplicitLocationReference.SchoolId = value;

                // School
                _schoolReferenceExplicitlyAssigned = false;
                ImplicitSchoolReference.SchoolId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short ISection.SchoolYear
        {
            get
            {
                if (ImplicitCourseOfferingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCourseOfferingReference.IsReferenceFullyDefined()))
                    return ImplicitCourseOfferingReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // CourseOffering
                _courseOfferingReferenceExplicitlyAssigned = false;
                ImplicitCourseOfferingReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="sequenceOfCourse"), NaturalKeyMember]
        public int SequenceOfCourse { get; set; }

        /// <summary>
        /// The term for the Session during the school year.
        /// </summary>

        // IS in a reference (Section.TermDescriptorId), IS a lookup column 
        string ISection.TermDescriptor
        {
            get
            {
                if (ImplicitCourseOfferingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCourseOfferingReference.IsReferenceFullyDefined()))
                    return ImplicitCourseOfferingReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitCourseOfferingReference.TermDescriptor = value;
            }
        }

        /// <summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="uniqueSectionCode"), NaturalKeyMember]
        public string UniqueSectionCode { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as ISection).ClassPeriodName != null) 
                    hash = hash * 23 + (this as ISection).ClassPeriodName.GetHashCode();
 
                //Referenced Property
                if ((this as ISection).ClassroomIdentificationCode != null) 
                    hash = hash * 23 + (this as ISection).ClassroomIdentificationCode.GetHashCode();
 
                //Referenced Property
                if ((this as ISection).LocalCourseCode != null) 
                    hash = hash * 23 + (this as ISection).LocalCourseCode.GetHashCode();
 
                //Referenced Property
                if ((this as ISection).SchoolId != null) 
                    hash = hash * 23 + (this as ISection).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as ISection).SchoolYear != null) 
                    hash = hash * 23 + (this as ISection).SchoolYear.GetHashCode();
 
                // Standard Property
                if ((this as ISection).SequenceOfCourse != null) 
                    hash = hash * 23 + (this as ISection).SequenceOfCourse.GetHashCode();
 
                //Unified Type Property
                if ((this as ISection).TermDescriptor != null) 
                    hash = hash * 23 + (this as ISection).TermDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as ISection).UniqueSectionCode != null) 
                    hash = hash * 23 + (this as ISection).UniqueSectionCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="availableCreditConversion")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? AvailableCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="availableCredits")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? AvailableCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="availableCreditType")]
        public string AvailableCreditType { get; set; }

        /// <summary>
        /// The setting in which a child receives education and related services; for example:          Center-based instruction          Home-based instruction          Hospital class          Mainstream          Residential care and treatment facility          ...
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="educationalEnvironmentType")]
        public string EducationalEnvironmentType { get; set; }

        /// <summary>
        /// The primary language of instruction, if omitted English is assumed.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="instructionLanguageDescriptor")]
        public string InstructionLanguageDescriptor { get; set; }

        /// <summary>
        /// The media through which teachers provide instruction to students and students and teachers communicate about instructional matters; for example:          Technology-based instruction in classroom          Correspondence instruction          Face-to-face instruction          Virtual/On-line Distance learning          Center-based instruction          ...
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="mediumOfInstructionType")]
        public string MediumOfInstructionType { get; set; }

        /// <summary>
        /// The type of students the Section is offered and tailored to; for example:          Bilingual students          Remedial education students          Gifted and talented students          Career and Technical Education students          Special education students          ...
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="populationServedType")]
        public string PopulationServedType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<SectionCharacteristic> _sectionCharacteristics;
        private IList<ISectionCharacteristic> _sectionCharacteristicsCovariant;

        [DataMember(Name="characteristics")]
        public IList<SectionCharacteristic> SectionCharacteristics 
        { 
            get { return _sectionCharacteristics; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<SectionCharacteristic>(value,
                    (s, e) => ((ISectionCharacteristic)e.Item).Section = this);
                _sectionCharacteristics = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ISectionCharacteristic, SectionCharacteristic>(value);
                covariantList.ItemAdded += (s, e) => ((ISectionCharacteristic)e.Item).Section = this;
                _sectionCharacteristicsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ISectionCharacteristic> ISection.SectionCharacteristics
        {
            get { return _sectionCharacteristicsCovariant; }
            set { SectionCharacteristics = new List<SectionCharacteristic>(value.Cast<SectionCharacteristic>()); }
        }

        private IList<SectionProgram> _sectionPrograms;
        private IList<ISectionProgram> _sectionProgramsCovariant;

        [DataMember(Name="programs")]
        public IList<SectionProgram> SectionPrograms 
        { 
            get { return _sectionPrograms; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<SectionProgram>(value,
                    (s, e) => ((ISectionProgram)e.Item).Section = this);
                _sectionPrograms = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ISectionProgram, SectionProgram>(value);
                covariantList.ItemAdded += (s, e) => ((ISectionProgram)e.Item).Section = this;
                _sectionProgramsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ISectionProgram> ISection.SectionPrograms
        {
            get { return _sectionProgramsCovariant; }
            set { SectionPrograms = new List<SectionProgram>(value.Cast<SectionProgram>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_sectionCharacteristics != null) foreach (var item in _sectionCharacteristics)
            {
                item.Section = this;
            }
            
            if (_sectionPrograms != null) foreach (var item in _sectionPrograms)
            {
                item.Section = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISection)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISection) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ISectionSynchronizationSourceSupport.IsAvailableCreditConversionSupported      { get { return true; } set { } }
 
        bool ISectionSynchronizationSourceSupport.IsAvailableCreditsSupported               { get { return true; } set { } }
 
        bool ISectionSynchronizationSourceSupport.IsAvailableCreditTypeSupported            { get { return true; } set { } }
 
        bool ISectionSynchronizationSourceSupport.IsEducationalEnvironmentTypeSupported     { get { return true; } set { } }
 
        bool ISectionSynchronizationSourceSupport.IsInstructionLanguageDescriptorSupported  { get { return true; } set { } }
 
        bool ISectionSynchronizationSourceSupport.IsMediumOfInstructionTypeSupported        { get { return true; } set { } }
 
        bool ISectionSynchronizationSourceSupport.IsPopulationServedTypeSupported           { get { return true; } set { } }
 
        bool ISectionSynchronizationSourceSupport.IsSectionCharacteristicsSupported         { get { return true; } set { } }
 
        bool ISectionSynchronizationSourceSupport.IsSectionProgramsSupported                { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<ISectionCharacteristic, bool> ISectionSynchronizationSourceSupport.IsSectionCharacteristicIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<ISectionProgram, bool> ISectionSynchronizationSourceSupport.IsSectionProgramIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.SectionCharacteristic table of the Section aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SectionCharacteristic : ISectionCharacteristic, ISectionCharacteristicSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ISection _section;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ISection ISectionCharacteristic.Section
        {
            get { return _section; }
            set { _section = value; }
        }

        internal ISection Section
        {
            set { _section = value; }
        }

        /// <summary>
        /// Reflects important characteristics of the Section, such as whether or not attendance is taken and the Section is graded.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="descriptor"), NaturalKeyMember]
        public string SectionCharacteristicDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_section != null) 
                    hash = hash * 23 + _section.GetHashCode();
 
                // Standard Property
                if ((this as ISectionCharacteristic).SectionCharacteristicDescriptor != null) 
                    hash = hash * 23 + (this as ISectionCharacteristic).SectionCharacteristicDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISectionCharacteristic)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISectionCharacteristic) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.SectionProgram table of the Section aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SectionProgram : ISectionProgram, ISectionProgramSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _programReferenceExplicitlyAssigned;
        private Program.ProgramReference _programReference;
        private Program.ProgramReference ImplicitProgramReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_programReference == null && !_programReferenceExplicitlyAssigned)
                    _programReference = new Program.ProgramReference();

                return _programReference;
            }
        }

        [DataMember(Name="programReference")][NaturalKeyMember]
        public Program.ProgramReference ProgramReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitProgramReference != null
                    && (_programReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference;

                return null;
            }
            set 
            { 
                _programReferenceExplicitlyAssigned = true;
                _programReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ISection _section;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ISection ISectionProgram.Section
        {
            get { return _section; }
            set { _section = value; }
        }

        internal ISection Section
        {
            set { _section = value; }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int ISectionProgram.EducationOrganizationId
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ISectionProgram.ProgramName
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.ProgramName = value;
            }
        }

        /// <summary>
        /// The type of program.
        /// </summary>

        // IS in a reference (SectionProgram.ProgramTypeId), IS a lookup column 
        string ISectionProgram.ProgramType
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramType;

                return null;
            }
            set
            {
                ImplicitProgramReference.ProgramType = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_section != null) 
                    hash = hash * 23 + _section.GetHashCode();
 
                //Referenced Property
                if ((this as ISectionProgram).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as ISectionProgram).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as ISectionProgram).ProgramName != null) 
                    hash = hash * 23 + (this as ISectionProgram).ProgramName.GetHashCode();
 
                //Unified Type Property
                if ((this as ISectionProgram).ProgramType != null) 
                    hash = hash * 23 + (this as ISectionProgram).ProgramType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISectionProgram)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISectionProgram) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: SectionAttendanceTakenEvent

namespace EdFi.Ods.Api.Models.Resources.V2.SectionAttendanceTakenEvent
{
    /// <summary>
    /// Represents a reference to the SectionAttendanceTakenEvent resource.
    /// </summary>
    [DataContract]
    public class SectionAttendanceTakenEventReference
    {
        [DataMember(Name="classPeriodName"), NaturalKeyMember]
        public string ClassPeriodName { get; set; }

        [DataMember(Name="classroomIdentificationCode"), NaturalKeyMember]
        public string ClassroomIdentificationCode { get; set; }

        [DataMember(Name="date"), NaturalKeyMember]
        public DateTime Date { get; set; }

        [DataMember(Name="localCourseCode"), NaturalKeyMember]
        public string LocalCourseCode { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sequenceOfCourse"), NaturalKeyMember]
        public int SequenceOfCourse { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        [DataMember(Name="uniqueSectionCode"), NaturalKeyMember]
        public string UniqueSectionCode { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "SectionAttendanceTakenEvent",
                            Href = "/sectionAttendanceTakenEvents"
                                    + "?classPeriodName=" + WebUtility.UrlEncode(ClassPeriodName)            
                                    + "&classroomIdentificationCode=" + WebUtility.UrlEncode(ClassroomIdentificationCode)            
                                    + "&date=" + JsonConvert.SerializeObject(Date).Replace("\"", string.Empty)            
                                    + "&localCourseCode=" + WebUtility.UrlEncode(LocalCourseCode)            
                                    + "&schoolId=" + SchoolId            
                                    + "&schoolYear=" + SchoolYear            
                                    + "&sequenceOfCourse=" + SequenceOfCourse            
                                    + "&termDescriptor=" + WebUtility.UrlEncode(TermDescriptor)            
                                    + "&uniqueSectionCode=" + WebUtility.UrlEncode(UniqueSectionCode)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ClassPeriodName != default(string)
                && ClassroomIdentificationCode != default(string)
                && Date != default(DateTime)
                && LocalCourseCode != default(string)
                && SchoolId != default(int)
                && SchoolYear != default(short)
                && SequenceOfCourse != default(int)
                && TermDescriptor != default(string)
                && UniqueSectionCode != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.SectionAttendanceTakenEvent table of the SectionAttendanceTakenEvent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SectionAttendanceTakenEvent : ISectionAttendanceTakenEvent, IHasETag, ISectionAttendanceTakenEventSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the SectionAttendanceTakenEvent resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _calendarDateReferenceExplicitlyAssigned;
        private CalendarDate.CalendarDateReference _calendarDateReference;
        private CalendarDate.CalendarDateReference ImplicitCalendarDateReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_calendarDateReference == null && !_calendarDateReferenceExplicitlyAssigned)
                    _calendarDateReference = new CalendarDate.CalendarDateReference();

                return _calendarDateReference;
            }
        }

        [DataMember(Name="calendarDateReference")][NaturalKeyMember]
        public CalendarDate.CalendarDateReference CalendarDateReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitCalendarDateReference != null
                    && (_calendarDateReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCalendarDateReference.IsReferenceFullyDefined()))
                    return ImplicitCalendarDateReference;

                return null;
            }
            set 
            { 
                _calendarDateReferenceExplicitlyAssigned = true;
                _calendarDateReference = value;
            }
        }
        private bool _sectionReferenceExplicitlyAssigned;
        private Section.SectionReference _sectionReference;
        private Section.SectionReference ImplicitSectionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_sectionReference == null && !_sectionReferenceExplicitlyAssigned)
                    _sectionReference = new Section.SectionReference();

                return _sectionReference;
            }
        }

        [DataMember(Name="sectionReference")][NaturalKeyMember]
        public Section.SectionReference SectionReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSectionReference != null
                    && (_sectionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference;

                return null;
            }
            set 
            { 
                _sectionReferenceExplicitlyAssigned = true;
                _sectionReference = value;
            }
        }
        private bool _staffReferenceExplicitlyAssigned;
        private Staff.StaffReference _staffReference;
        private Staff.StaffReference ImplicitStaffReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_staffReference == null && !_staffReferenceExplicitlyAssigned)
                    _staffReference = new Staff.StaffReference();

                return _staffReference;
            }
        }

        [DataMember(Name="staffReference")]
        public Staff.StaffReference StaffReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStaffReference != null
                    && (_staffReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference;

                return null;
            }
            set 
            { 
                _staffReferenceExplicitlyAssigned = true;
                _staffReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ISectionAttendanceTakenEvent.ClassPeriodName
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.ClassPeriodName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.ClassPeriodName = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ISectionAttendanceTakenEvent.ClassroomIdentificationCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.ClassroomIdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.ClassroomIdentificationCode = value;
            }
        }

        /// <summary>
        /// The month, day, and year of the CalendarDate.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime ISectionAttendanceTakenEvent.Date
        {
            get
            {
                if (ImplicitCalendarDateReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCalendarDateReference.IsReferenceFullyDefined()))
                    return ImplicitCalendarDateReference.Date;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // CalendarDate
                _calendarDateReferenceExplicitlyAssigned = false;
                ImplicitCalendarDateReference.Date = value;
            }
        }

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ISectionAttendanceTakenEvent.LocalCourseCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.LocalCourseCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.LocalCourseCode = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int ISectionAttendanceTakenEvent.SchoolId
        {
            get
            {
                if (ImplicitCalendarDateReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCalendarDateReference.IsReferenceFullyDefined()))
                    return ImplicitCalendarDateReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // CalendarDate
                _calendarDateReferenceExplicitlyAssigned = false;
                ImplicitCalendarDateReference.SchoolId = value;

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short ISectionAttendanceTakenEvent.SchoolYear
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int ISectionAttendanceTakenEvent.SequenceOfCourse
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SequenceOfCourse;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SequenceOfCourse = value;
            }
        }

        /// <summary>
        /// The term for the Session during the school year.
        /// </summary>

        // IS in a reference (SectionAttendanceTakenEvent.TermDescriptorId), IS a lookup column 
        string ISectionAttendanceTakenEvent.TermDescriptor
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitSectionReference.TermDescriptor = value;
            }
        }

        /// <summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ISectionAttendanceTakenEvent.UniqueSectionCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.UniqueSectionCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.UniqueSectionCode = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as ISectionAttendanceTakenEvent).ClassPeriodName != null) 
                    hash = hash * 23 + (this as ISectionAttendanceTakenEvent).ClassPeriodName.GetHashCode();
 
                //Referenced Property
                if ((this as ISectionAttendanceTakenEvent).ClassroomIdentificationCode != null) 
                    hash = hash * 23 + (this as ISectionAttendanceTakenEvent).ClassroomIdentificationCode.GetHashCode();
 
                //Referenced Property
                if ((this as ISectionAttendanceTakenEvent).Date != null) 
                    hash = hash * 23 + (this as ISectionAttendanceTakenEvent).Date.GetHashCode();
 
                //Referenced Property
                if ((this as ISectionAttendanceTakenEvent).LocalCourseCode != null) 
                    hash = hash * 23 + (this as ISectionAttendanceTakenEvent).LocalCourseCode.GetHashCode();
 
                //Referenced Property
                if ((this as ISectionAttendanceTakenEvent).SchoolId != null) 
                    hash = hash * 23 + (this as ISectionAttendanceTakenEvent).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as ISectionAttendanceTakenEvent).SchoolYear != null) 
                    hash = hash * 23 + (this as ISectionAttendanceTakenEvent).SchoolYear.GetHashCode();
 
                //Referenced Property
                if ((this as ISectionAttendanceTakenEvent).SequenceOfCourse != null) 
                    hash = hash * 23 + (this as ISectionAttendanceTakenEvent).SequenceOfCourse.GetHashCode();
 
                //Unified Type Property
                if ((this as ISectionAttendanceTakenEvent).TermDescriptor != null) 
                    hash = hash * 23 + (this as ISectionAttendanceTakenEvent).TermDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as ISectionAttendanceTakenEvent).UniqueSectionCode != null) 
                    hash = hash * 23 + (this as ISectionAttendanceTakenEvent).UniqueSectionCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date the SectionAttendanceTakenEvent was submitted, which could be a different date than the instructional day.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eventDate")]
        public DateTime EventDate { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ISectionAttendanceTakenEvent.StaffUniqueId
        {
            get
            {
                if (ImplicitStaffReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference.StaffUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Staff
                _staffReferenceExplicitlyAssigned = false;
                ImplicitStaffReference.StaffUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISectionAttendanceTakenEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISectionAttendanceTakenEvent) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ISectionAttendanceTakenEventSynchronizationSourceSupport.IsEventDateSupported      { get { return true; } set { } }
 
        bool ISectionAttendanceTakenEventSynchronizationSourceSupport.IsStaffUniqueIdSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: SectionCharacteristicDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.SectionCharacteristicDescriptor
{
    /// <summary>
    /// A class which represents the edfi.SectionCharacteristicDescriptor table of the SectionCharacteristicDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SectionCharacteristicDescriptor : ISectionCharacteristicDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, ISectionCharacteristicDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the SectionCharacteristicDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="sectionCharacteristicDescriptorId"), NaturalKeyMember]
        public int SectionCharacteristicDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return SectionCharacteristicDescriptorId; }
            set { SectionCharacteristicDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as ISectionCharacteristicDescriptor).SectionCharacteristicDescriptorId != null) 
                    hash = hash * 23 + (this as ISectionCharacteristicDescriptor).SectionCharacteristicDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sectionCharacteristicType")]
        public string SectionCharacteristicType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISectionCharacteristicDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISectionCharacteristicDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ISectionCharacteristicDescriptorSynchronizationSourceSupport.IsCodeValueSupported                  { get { return true; } set { } }
 
        bool ISectionCharacteristicDescriptorSynchronizationSourceSupport.IsDescriptionSupported                { get { return true; } set { } }
 
        bool ISectionCharacteristicDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported         { get { return true; } set { } }
 
        bool ISectionCharacteristicDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported           { get { return true; } set { } }
 
        bool ISectionCharacteristicDescriptorSynchronizationSourceSupport.IsNamespaceSupported                  { get { return true; } set { } }
 
        bool ISectionCharacteristicDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported          { get { return true; } set { } }
 
        bool ISectionCharacteristicDescriptorSynchronizationSourceSupport.IsSectionCharacteristicTypeSupported  { get { return true; } set { } }
 
        bool ISectionCharacteristicDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported           { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: SectionCharacteristicType

namespace EdFi.Ods.Api.Models.Resources.V2.SectionCharacteristicType
{
    /// <summary>
    /// A class which represents the edfi.SectionCharacteristicType table of the SectionCharacteristicType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SectionCharacteristicType : ISectionCharacteristicType, IHasETag, ISectionCharacteristicTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the SectionCharacteristicType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for SectionCharacteristic
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="sectionCharacteristicTypeId"), NaturalKeyMember]
        public int SectionCharacteristicTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ISectionCharacteristicType).SectionCharacteristicTypeId != null) 
                    hash = hash * 23 + (this as ISectionCharacteristicType).SectionCharacteristicTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the SectionCharacteristic type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the SectionCharacteristic type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISectionCharacteristicType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISectionCharacteristicType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ISectionCharacteristicTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ISectionCharacteristicTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ISectionCharacteristicTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: SeparationReasonDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.SeparationReasonDescriptor
{
    /// <summary>
    /// A class which represents the edfi.SeparationReasonDescriptor table of the SeparationReasonDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SeparationReasonDescriptor : ISeparationReasonDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, ISeparationReasonDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the SeparationReasonDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="separationReasonDescriptorId"), NaturalKeyMember]
        public int SeparationReasonDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return SeparationReasonDescriptorId; }
            set { SeparationReasonDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as ISeparationReasonDescriptor).SeparationReasonDescriptorId != null) 
                    hash = hash * 23 + (this as ISeparationReasonDescriptor).SeparationReasonDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="separationReasonType")]
        public string SeparationReasonType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISeparationReasonDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISeparationReasonDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ISeparationReasonDescriptorSynchronizationSourceSupport.IsCodeValueSupported             { get { return true; } set { } }
 
        bool ISeparationReasonDescriptorSynchronizationSourceSupport.IsDescriptionSupported           { get { return true; } set { } }
 
        bool ISeparationReasonDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported    { get { return true; } set { } }
 
        bool ISeparationReasonDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported      { get { return true; } set { } }
 
        bool ISeparationReasonDescriptorSynchronizationSourceSupport.IsNamespaceSupported             { get { return true; } set { } }
 
        bool ISeparationReasonDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported     { get { return true; } set { } }
 
        bool ISeparationReasonDescriptorSynchronizationSourceSupport.IsSeparationReasonTypeSupported  { get { return true; } set { } }
 
        bool ISeparationReasonDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported      { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: SeparationReasonType

namespace EdFi.Ods.Api.Models.Resources.V2.SeparationReasonType
{
    /// <summary>
    /// A class which represents the edfi.SeparationReasonType table of the SeparationReasonType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SeparationReasonType : ISeparationReasonType, IHasETag, ISeparationReasonTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the SeparationReasonType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for SeparationReason
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="separationReasonTypeId"), NaturalKeyMember]
        public int SeparationReasonTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ISeparationReasonType).SeparationReasonTypeId != null) 
                    hash = hash * 23 + (this as ISeparationReasonType).SeparationReasonTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the SeparationReason type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the SeparationReason type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISeparationReasonType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISeparationReasonType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ISeparationReasonTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ISeparationReasonTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ISeparationReasonTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: SeparationType

namespace EdFi.Ods.Api.Models.Resources.V2.SeparationType
{
    /// <summary>
    /// A class which represents the edfi.SeparationType table of the SeparationType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SeparationType : ISeparationType, IHasETag, ISeparationTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the SeparationType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Separation
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="separationTypeId"), NaturalKeyMember]
        public int SeparationTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ISeparationType).SeparationTypeId != null) 
                    hash = hash * 23 + (this as ISeparationType).SeparationTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Separation type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Separation type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISeparationType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISeparationType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ISeparationTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ISeparationTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ISeparationTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: ServiceDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.ServiceDescriptor
{
    /// <summary>
    /// A class which represents the edfi.ServiceDescriptor table of the ServiceDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class ServiceDescriptor : IServiceDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IServiceDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the ServiceDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="serviceDescriptorId"), NaturalKeyMember]
        public int ServiceDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return ServiceDescriptorId; }
            set { ServiceDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IServiceDescriptor).ServiceDescriptorId != null) 
                    hash = hash * 23 + (this as IServiceDescriptor).ServiceDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A classification of the behavior for reporting types.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="serviceCategory")]
        public string ServiceCategory { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IServiceDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IServiceDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IServiceDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
 
        bool IServiceDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
 
        bool IServiceDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
 
        bool IServiceDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
 
        bool IServiceDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
 
        bool IServiceDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
 
        bool IServiceDescriptorSynchronizationSourceSupport.IsServiceCategorySupported     { get { return true; } set { } }
 
        bool IServiceDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: Session

namespace EdFi.Ods.Api.Models.Resources.V2.Session
{
    /// <summary>
    /// Represents a reference to the Session resource.
    /// </summary>
    [DataContract]
    public class SessionReference
    {
        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "Session",
                            Href = "/sessions"
                                    + "?schoolId=" + SchoolId            
                                    + "&schoolYear=" + SchoolYear            
                                    + "&termDescriptor=" + WebUtility.UrlEncode(TermDescriptor)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return SchoolId != default(int)
                && SchoolYear != default(short)
                && TermDescriptor != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Session table of the Session aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class Session : ISession, IHasETag, ISessionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Session()
        {
            SessionAcademicWeeks = new List<SessionAcademicWeek>();
            SessionGradingPeriods = new List<SessionGradingPeriod>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Session resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _schoolReferenceExplicitlyAssigned;
        private School.SchoolReference _schoolReference;
        private School.SchoolReference ImplicitSchoolReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolReference == null && !_schoolReferenceExplicitlyAssigned)
                    _schoolReference = new School.SchoolReference();

                return _schoolReference;
            }
        }

        [DataMember(Name="schoolReference")][NaturalKeyMember]
        public School.SchoolReference SchoolReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolReference != null
                    && (_schoolReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference;

                return null;
            }
            set 
            { 
                _schoolReferenceExplicitlyAssigned = true;
                _schoolReference = value;
            }
        }
        private bool _schoolYearTypeReferenceExplicitlyAssigned;
        private SchoolYearType.SchoolYearTypeReference _schoolYearTypeReference;
        private SchoolYearType.SchoolYearTypeReference ImplicitSchoolYearTypeReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolYearTypeReference == null && !_schoolYearTypeReferenceExplicitlyAssigned)
                    _schoolYearTypeReference = new SchoolYearType.SchoolYearTypeReference();

                return _schoolYearTypeReference;
            }
        }

        [DataMember(Name="schoolYearTypeReference")][NaturalKeyMember]
        public SchoolYearType.SchoolYearTypeReference SchoolYearTypeReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolYearTypeReference != null
                    && (_schoolYearTypeReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference;

                return null;
            }
            set 
            { 
                _schoolYearTypeReferenceExplicitlyAssigned = true;
                _schoolYearTypeReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int ISession.SchoolId
        {
            get
            {
                if (ImplicitSchoolReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // School
                _schoolReferenceExplicitlyAssigned = false;
                ImplicitSchoolReference.SchoolId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short ISession.SchoolYear
        {
            get
            {
                if (ImplicitSchoolYearTypeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SchoolYearType
                _schoolYearTypeReferenceExplicitlyAssigned = false;
                ImplicitSchoolYearTypeReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// The term for the Session during the school year.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as ISession).SchoolId != null) 
                    hash = hash * 23 + (this as ISession).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as ISession).SchoolYear != null) 
                    hash = hash * 23 + (this as ISession).SchoolYear.GetHashCode();
 
                // Standard Property
                if ((this as ISession).TermDescriptor != null) 
                    hash = hash * 23 + (this as ISession).TermDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Month, day, and year of the first day of the Session.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// Month, day and year of the last day of the Session.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="name")]
        public string SessionName { get; set; }

        /// <summary>
        /// The total number of instructional days in the school calendar.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="totalInstructionalDays")]
        public int TotalInstructionalDays { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<SessionAcademicWeek> _sessionAcademicWeeks;
        private IList<ISessionAcademicWeek> _sessionAcademicWeeksCovariant;

        [DataMember(Name="academicWeeks")]
        public IList<SessionAcademicWeek> SessionAcademicWeeks 
        { 
            get { return _sessionAcademicWeeks; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<SessionAcademicWeek>(value,
                    (s, e) => ((ISessionAcademicWeek)e.Item).Session = this);
                _sessionAcademicWeeks = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ISessionAcademicWeek, SessionAcademicWeek>(value);
                covariantList.ItemAdded += (s, e) => ((ISessionAcademicWeek)e.Item).Session = this;
                _sessionAcademicWeeksCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ISessionAcademicWeek> ISession.SessionAcademicWeeks
        {
            get { return _sessionAcademicWeeksCovariant; }
            set { SessionAcademicWeeks = new List<SessionAcademicWeek>(value.Cast<SessionAcademicWeek>()); }
        }

        private IList<SessionGradingPeriod> _sessionGradingPeriods;
        private IList<ISessionGradingPeriod> _sessionGradingPeriodsCovariant;

        [DataMember(Name="gradingPeriods")]
        public IList<SessionGradingPeriod> SessionGradingPeriods 
        { 
            get { return _sessionGradingPeriods; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<SessionGradingPeriod>(value,
                    (s, e) => ((ISessionGradingPeriod)e.Item).Session = this);
                _sessionGradingPeriods = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<ISessionGradingPeriod, SessionGradingPeriod>(value);
                covariantList.ItemAdded += (s, e) => ((ISessionGradingPeriod)e.Item).Session = this;
                _sessionGradingPeriodsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<ISessionGradingPeriod> ISession.SessionGradingPeriods
        {
            get { return _sessionGradingPeriodsCovariant; }
            set { SessionGradingPeriods = new List<SessionGradingPeriod>(value.Cast<SessionGradingPeriod>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_sessionAcademicWeeks != null) foreach (var item in _sessionAcademicWeeks)
            {
                item.Session = this;
            }
            
            if (_sessionGradingPeriods != null) foreach (var item in _sessionGradingPeriods)
            {
                item.Session = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISession)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISession) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ISessionSynchronizationSourceSupport.IsBeginDateSupported               { get { return true; } set { } }
 
        bool ISessionSynchronizationSourceSupport.IsEndDateSupported                 { get { return true; } set { } }
 
        bool ISessionSynchronizationSourceSupport.IsSessionAcademicWeeksSupported    { get { return true; } set { } }
 
        bool ISessionSynchronizationSourceSupport.IsSessionGradingPeriodsSupported   { get { return true; } set { } }
 
        bool ISessionSynchronizationSourceSupport.IsSessionNameSupported             { get { return true; } set { } }
 
        bool ISessionSynchronizationSourceSupport.IsTotalInstructionalDaysSupported  { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<ISessionAcademicWeek, bool> ISessionSynchronizationSourceSupport.IsSessionAcademicWeekIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<ISessionGradingPeriod, bool> ISessionSynchronizationSourceSupport.IsSessionGradingPeriodIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// Represents a reference from the SessionAcademicWeek entity to the AcademicWeek resource.
    /// </summary>
    [DataContract]
    public class SessionAcademicWeekToAcademicWeekReference
    {
        private ISessionAcademicWeek backReference;

        // Parameterless constructor for deserialization
        public SessionAcademicWeekToAcademicWeekReference() { }

        // Constructor for inline initialization in parent
        public SessionAcademicWeekToAcademicWeekReference(ISessionAcademicWeek backReference)
        {
            this.backReference = backReference;
        }

        // Expose back reference internally for access after JSON deserialization to enable link generation
        internal ISessionAcademicWeek BackReference
        {
            get { return backReference; }
            set { backReference = value; }
        }


        [DataMember(Name="weekIdentifier"), NaturalKeyMember]
        public string WeekIdentifier { get; set; }
        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Can't generate a link without the back reference
                    if (backReference == null)
                        return null;
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "AcademicWeek",
                            Href = "/academicWeeks"
                                    + "?schoolId=" + backReference.Session.SchoolId            
                                    + "&weekIdentifier=" + WebUtility.UrlEncode(WeekIdentifier)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return backReference.Session != null && backReference.Session.SchoolId != default(int)
                && WeekIdentifier != default(string)
                ;
        }
    }

    /// <summary>
    /// A class which represents the edfi.SessionAcademicWeek table of the Session aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SessionAcademicWeek : ISessionAcademicWeek, ISessionAcademicWeekSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _academicWeekReferenceExplicitlyAssigned;
        private SessionAcademicWeekToAcademicWeekReference _academicWeekReference;
        private SessionAcademicWeekToAcademicWeekReference ImplicitAcademicWeekReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_academicWeekReference == null && !_academicWeekReferenceExplicitlyAssigned)
                    _academicWeekReference = new SessionAcademicWeekToAcademicWeekReference(this);

                return _academicWeekReference;
            }
        }

        [DataMember(Name="academicWeekReference")][NaturalKeyMember]
        public SessionAcademicWeekToAcademicWeekReference AcademicWeekReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitAcademicWeekReference != null
                    && (_academicWeekReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitAcademicWeekReference.IsReferenceFullyDefined()))
                    return ImplicitAcademicWeekReference;

                return null;
            }
            set 
            { 
                _academicWeekReferenceExplicitlyAssigned = true;
                _academicWeekReference = value;
                _academicWeekReference.BackReference = this;             }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ISession _session;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ISession ISessionAcademicWeek.Session
        {
            get { return _session; }
            set { _session = value; }
        }

        internal ISession Session
        {
            set { _session = value; }
        }

        /// <summary>
        /// The school label for the week.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string ISessionAcademicWeek.WeekIdentifier
        {
            get
            {
                if (ImplicitAcademicWeekReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAcademicWeekReference.IsReferenceFullyDefined()))
                    return ImplicitAcademicWeekReference.WeekIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // AcademicWeek
                _academicWeekReferenceExplicitlyAssigned = false;
                ImplicitAcademicWeekReference.WeekIdentifier = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_session != null) 
                    hash = hash * 23 + _session.GetHashCode();
 
                //Referenced Property
                if ((this as ISessionAcademicWeek).WeekIdentifier != null) 
                    hash = hash * 23 + (this as ISessionAcademicWeek).WeekIdentifier.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_academicWeekReference != null)
                _academicWeekReference.BackReference = this;
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISessionAcademicWeek)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISessionAcademicWeek) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// Represents a reference from the SessionGradingPeriod entity to the GradingPeriod resource.
    /// </summary>
    [DataContract]
    public class SessionGradingPeriodToGradingPeriodReference
    {
        private ISessionGradingPeriod backReference;

        // Parameterless constructor for deserialization
        public SessionGradingPeriodToGradingPeriodReference() { }

        // Constructor for inline initialization in parent
        public SessionGradingPeriodToGradingPeriodReference(ISessionGradingPeriod backReference)
        {
            this.backReference = backReference;
        }

        // Expose back reference internally for access after JSON deserialization to enable link generation
        internal ISessionGradingPeriod BackReference
        {
            get { return backReference; }
            set { backReference = value; }
        }


        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="descriptor"), NaturalKeyMember]
        public string GradingPeriodDescriptor { get; set; }
        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Can't generate a link without the back reference
                    if (backReference == null)
                        return null;
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "GradingPeriod",
                            Href = "/gradingPeriods"
                                    + "?beginDate=" + JsonConvert.SerializeObject(BeginDate).Replace("\"", string.Empty)            
                                    + "&descriptor=" + WebUtility.UrlEncode(GradingPeriodDescriptor)            
                                    + "&schoolId=" + backReference.Session.SchoolId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime)
                && GradingPeriodDescriptor != default(string)
                && backReference.Session != null && backReference.Session.SchoolId != default(int)
                ;
        }
    }

    /// <summary>
    /// A class which represents the edfi.SessionGradingPeriod table of the Session aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SessionGradingPeriod : ISessionGradingPeriod, ISessionGradingPeriodSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _gradingPeriodReferenceExplicitlyAssigned;
        private SessionGradingPeriodToGradingPeriodReference _gradingPeriodReference;
        private SessionGradingPeriodToGradingPeriodReference ImplicitGradingPeriodReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_gradingPeriodReference == null && !_gradingPeriodReferenceExplicitlyAssigned)
                    _gradingPeriodReference = new SessionGradingPeriodToGradingPeriodReference(this);

                return _gradingPeriodReference;
            }
        }

        [DataMember(Name="gradingPeriodReference")][NaturalKeyMember]
        public SessionGradingPeriodToGradingPeriodReference GradingPeriodReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitGradingPeriodReference != null
                    && (_gradingPeriodReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference;

                return null;
            }
            set 
            { 
                _gradingPeriodReferenceExplicitlyAssigned = true;
                _gradingPeriodReference = value;
                _gradingPeriodReference.BackReference = this;             }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private ISession _session;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        ISession ISessionGradingPeriod.Session
        {
            get { return _session; }
            set { _session = value; }
        }

        internal ISession Session
        {
            set { _session = value; }
        }

        /// <summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime ISessionGradingPeriod.BeginDate
        {
            get
            {
                if (ImplicitGradingPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference.BeginDate;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradingPeriod
                _gradingPeriodReferenceExplicitlyAssigned = false;
                ImplicitGradingPeriodReference.BeginDate = value;
            }
        }

        /// <summary>
        /// The name of the period for which grades are reported.
        /// </summary>

        // IS in a reference (SessionGradingPeriod.GradingPeriodDescriptorId), IS a lookup column 
        string ISessionGradingPeriod.GradingPeriodDescriptor
        {
            get
            {
                if (ImplicitGradingPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference.GradingPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitGradingPeriodReference.GradingPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_session != null) 
                    hash = hash * 23 + _session.GetHashCode();
 
                //Referenced Property
                if ((this as ISessionGradingPeriod).BeginDate != null) 
                    hash = hash * 23 + (this as ISessionGradingPeriod).BeginDate.GetHashCode();
 
                //Unified Type Property
                if ((this as ISessionGradingPeriod).GradingPeriodDescriptor != null) 
                    hash = hash * 23 + (this as ISessionGradingPeriod).GradingPeriodDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_gradingPeriodReference != null)
                _gradingPeriodReference.BackReference = this;
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISessionGradingPeriod)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISessionGradingPeriod) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: SexType

namespace EdFi.Ods.Api.Models.Resources.V2.SexType
{
    /// <summary>
    /// A class which represents the edfi.SexType table of the SexType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SexType : ISexType, IHasETag, ISexTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the SexType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Sex
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="sexTypeId"), NaturalKeyMember]
        public int SexTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ISexType).SexTypeId != null) 
                    hash = hash * 23 + (this as ISexType).SexTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Sex type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Sex type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISexType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISexType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ISexTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ISexTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ISexTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: SpecialEducationSettingDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.SpecialEducationSettingDescriptor
{
    /// <summary>
    /// A class which represents the edfi.SpecialEducationSettingDescriptor table of the SpecialEducationSettingDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SpecialEducationSettingDescriptor : ISpecialEducationSettingDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, ISpecialEducationSettingDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the SpecialEducationSettingDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="specialEducationSettingDescriptorId"), NaturalKeyMember]
        public int SpecialEducationSettingDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return SpecialEducationSettingDescriptorId; }
            set { SpecialEducationSettingDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as ISpecialEducationSettingDescriptor).SpecialEducationSettingDescriptorId != null) 
                    hash = hash * 23 + (this as ISpecialEducationSettingDescriptor).SpecialEducationSettingDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="specialEducationSettingType")]
        public string SpecialEducationSettingType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISpecialEducationSettingDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISpecialEducationSettingDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ISpecialEducationSettingDescriptorSynchronizationSourceSupport.IsCodeValueSupported                    { get { return true; } set { } }
 
        bool ISpecialEducationSettingDescriptorSynchronizationSourceSupport.IsDescriptionSupported                  { get { return true; } set { } }
 
        bool ISpecialEducationSettingDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported           { get { return true; } set { } }
 
        bool ISpecialEducationSettingDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported             { get { return true; } set { } }
 
        bool ISpecialEducationSettingDescriptorSynchronizationSourceSupport.IsNamespaceSupported                    { get { return true; } set { } }
 
        bool ISpecialEducationSettingDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported            { get { return true; } set { } }
 
        bool ISpecialEducationSettingDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported             { get { return true; } set { } }
 
        bool ISpecialEducationSettingDescriptorSynchronizationSourceSupport.IsSpecialEducationSettingTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: SpecialEducationSettingType

namespace EdFi.Ods.Api.Models.Resources.V2.SpecialEducationSettingType
{
    /// <summary>
    /// A class which represents the edfi.SpecialEducationSettingType table of the SpecialEducationSettingType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class SpecialEducationSettingType : ISpecialEducationSettingType, IHasETag, ISpecialEducationSettingTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the SpecialEducationSettingType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for SpecialEducationSetting
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="specialEducationSettingTypeId"), NaturalKeyMember]
        public int SpecialEducationSettingTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ISpecialEducationSettingType).SpecialEducationSettingTypeId != null) 
                    hash = hash * 23 + (this as ISpecialEducationSettingType).SpecialEducationSettingTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the SpecialEducationSetting type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the SpecialEducationSetting type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ISpecialEducationSettingType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ISpecialEducationSettingType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ISpecialEducationSettingTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ISpecialEducationSettingTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ISpecialEducationSettingTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.V2.Staff
{
    /// <summary>
    /// Represents a reference to the Staff resource.
    /// </summary>
    [DataContract]
    public class StaffReference
    {
        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "Staff",
                            Href = "/staffs"
                                    + "?staffUniqueId=" + WebUtility.UrlEncode(StaffUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return StaffUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Staff table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class Staff : IStaff, IHasETag, IStaffSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Staff()
        {
            StaffAddresses = new List<StaffAddress>();
            StaffCredentials = new List<StaffCredential>();
            StaffElectronicMails = new List<StaffElectronicMail>();
            StaffIdentificationCodes = new List<StaffIdentificationCode>();
            StaffIdentificationDocuments = new List<StaffIdentificationDocument>();
            StaffInternationalAddresses = new List<StaffInternationalAddress>();
            StaffLanguages = new List<StaffLanguage>();
            StaffOtherNames = new List<StaffOtherName>();
            StaffRaces = new List<StaffRace>();
            StaffTelephones = new List<StaffTelephone>();
            StaffVisas = new List<StaffVisa>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Staff resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="staffUniqueId"), NaturalKeyMember, UniqueId]
        public string StaffUniqueId { get; set; }
 
        string IIdentifiablePerson.UniqueId { get { return StaffUniqueId; } }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Property
                if ((this as IStaff).StaffUniqueId != null) 
                    hash = hash * 23 + (this as IStaff).StaffUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusType")]
        public string CitizenshipStatusType { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor")]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Previous definition of Ethnicity combining Hispanic/Latino and race:          1 - American Indian or Alaskan Native          2 - Asian or Pacific Islander          3 - Black, not of Hispanic origin          4 - Hispanic          5 - White, not of Hispanic origin.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="oldEthnicityType")]
        public string OldEthnicityType { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexType")]
        public string SexType { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorProfessionalExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorTeachingExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorTeachingExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<StaffAddress> _staffAddresses;
        private IList<IStaffAddress> _staffAddressesCovariant;

        [DataMember(Name="addresses")]
        public IList<StaffAddress> StaffAddresses 
        { 
            get { return _staffAddresses; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StaffAddress>(value,
                    (s, e) => ((IStaffAddress)e.Item).Staff = this);
                _staffAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStaffAddress, StaffAddress>(value);
                covariantList.ItemAdded += (s, e) => ((IStaffAddress)e.Item).Staff = this;
                _staffAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStaffAddress> IStaff.StaffAddresses
        {
            get { return _staffAddressesCovariant; }
            set { StaffAddresses = new List<StaffAddress>(value.Cast<StaffAddress>()); }
        }

        private IList<StaffCredential> _staffCredentials;
        private IList<IStaffCredential> _staffCredentialsCovariant;

        [DataMember(Name="credentials")]
        public IList<StaffCredential> StaffCredentials 
        { 
            get { return _staffCredentials; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StaffCredential>(value,
                    (s, e) => ((IStaffCredential)e.Item).Staff = this);
                _staffCredentials = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStaffCredential, StaffCredential>(value);
                covariantList.ItemAdded += (s, e) => ((IStaffCredential)e.Item).Staff = this;
                _staffCredentialsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStaffCredential> IStaff.StaffCredentials
        {
            get { return _staffCredentialsCovariant; }
            set { StaffCredentials = new List<StaffCredential>(value.Cast<StaffCredential>()); }
        }

        private IList<StaffElectronicMail> _staffElectronicMails;
        private IList<IStaffElectronicMail> _staffElectronicMailsCovariant;

        [DataMember(Name="electronicMails")]
        public IList<StaffElectronicMail> StaffElectronicMails 
        { 
            get { return _staffElectronicMails; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StaffElectronicMail>(value,
                    (s, e) => ((IStaffElectronicMail)e.Item).Staff = this);
                _staffElectronicMails = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStaffElectronicMail, StaffElectronicMail>(value);
                covariantList.ItemAdded += (s, e) => ((IStaffElectronicMail)e.Item).Staff = this;
                _staffElectronicMailsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStaffElectronicMail> IStaff.StaffElectronicMails
        {
            get { return _staffElectronicMailsCovariant; }
            set { StaffElectronicMails = new List<StaffElectronicMail>(value.Cast<StaffElectronicMail>()); }
        }

        private IList<StaffIdentificationCode> _staffIdentificationCodes;
        private IList<IStaffIdentificationCode> _staffIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes")]
        public IList<StaffIdentificationCode> StaffIdentificationCodes 
        { 
            get { return _staffIdentificationCodes; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StaffIdentificationCode>(value,
                    (s, e) => ((IStaffIdentificationCode)e.Item).Staff = this);
                _staffIdentificationCodes = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStaffIdentificationCode, StaffIdentificationCode>(value);
                covariantList.ItemAdded += (s, e) => ((IStaffIdentificationCode)e.Item).Staff = this;
                _staffIdentificationCodesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStaffIdentificationCode> IStaff.StaffIdentificationCodes
        {
            get { return _staffIdentificationCodesCovariant; }
            set { StaffIdentificationCodes = new List<StaffIdentificationCode>(value.Cast<StaffIdentificationCode>()); }
        }

        private IList<StaffIdentificationDocument> _staffIdentificationDocuments;
        private IList<IStaffIdentificationDocument> _staffIdentificationDocumentsCovariant;

        [DataMember(Name="identificationDocuments")]
        public IList<StaffIdentificationDocument> StaffIdentificationDocuments 
        { 
            get { return _staffIdentificationDocuments; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StaffIdentificationDocument>(value,
                    (s, e) => ((IStaffIdentificationDocument)e.Item).Staff = this);
                _staffIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStaffIdentificationDocument, StaffIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((IStaffIdentificationDocument)e.Item).Staff = this;
                _staffIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStaffIdentificationDocument> IStaff.StaffIdentificationDocuments
        {
            get { return _staffIdentificationDocumentsCovariant; }
            set { StaffIdentificationDocuments = new List<StaffIdentificationDocument>(value.Cast<StaffIdentificationDocument>()); }
        }

        private IList<StaffInternationalAddress> _staffInternationalAddresses;
        private IList<IStaffInternationalAddress> _staffInternationalAddressesCovariant;

        [DataMember(Name="internationalAddresses")]
        public IList<StaffInternationalAddress> StaffInternationalAddresses 
        { 
            get { return _staffInternationalAddresses; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StaffInternationalAddress>(value,
                    (s, e) => ((IStaffInternationalAddress)e.Item).Staff = this);
                _staffInternationalAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStaffInternationalAddress, StaffInternationalAddress>(value);
                covariantList.ItemAdded += (s, e) => ((IStaffInternationalAddress)e.Item).Staff = this;
                _staffInternationalAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStaffInternationalAddress> IStaff.StaffInternationalAddresses
        {
            get { return _staffInternationalAddressesCovariant; }
            set { StaffInternationalAddresses = new List<StaffInternationalAddress>(value.Cast<StaffInternationalAddress>()); }
        }

        private IList<StaffLanguage> _staffLanguages;
        private IList<IStaffLanguage> _staffLanguagesCovariant;

        [DataMember(Name="languages")]
        public IList<StaffLanguage> StaffLanguages 
        { 
            get { return _staffLanguages; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StaffLanguage>(value,
                    (s, e) => ((IStaffLanguage)e.Item).Staff = this);
                _staffLanguages = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStaffLanguage, StaffLanguage>(value);
                covariantList.ItemAdded += (s, e) => ((IStaffLanguage)e.Item).Staff = this;
                _staffLanguagesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStaffLanguage> IStaff.StaffLanguages
        {
            get { return _staffLanguagesCovariant; }
            set { StaffLanguages = new List<StaffLanguage>(value.Cast<StaffLanguage>()); }
        }

        private IList<StaffOtherName> _staffOtherNames;
        private IList<IStaffOtherName> _staffOtherNamesCovariant;

        [DataMember(Name="otherNames")]
        public IList<StaffOtherName> StaffOtherNames 
        { 
            get { return _staffOtherNames; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StaffOtherName>(value,
                    (s, e) => ((IStaffOtherName)e.Item).Staff = this);
                _staffOtherNames = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStaffOtherName, StaffOtherName>(value);
                covariantList.ItemAdded += (s, e) => ((IStaffOtherName)e.Item).Staff = this;
                _staffOtherNamesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStaffOtherName> IStaff.StaffOtherNames
        {
            get { return _staffOtherNamesCovariant; }
            set { StaffOtherNames = new List<StaffOtherName>(value.Cast<StaffOtherName>()); }
        }

        private IList<StaffRace> _staffRaces;
        private IList<IStaffRace> _staffRacesCovariant;

        [DataMember(Name="races")]
        public IList<StaffRace> StaffRaces 
        { 
            get { return _staffRaces; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StaffRace>(value,
                    (s, e) => ((IStaffRace)e.Item).Staff = this);
                _staffRaces = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStaffRace, StaffRace>(value);
                covariantList.ItemAdded += (s, e) => ((IStaffRace)e.Item).Staff = this;
                _staffRacesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStaffRace> IStaff.StaffRaces
        {
            get { return _staffRacesCovariant; }
            set { StaffRaces = new List<StaffRace>(value.Cast<StaffRace>()); }
        }

        private IList<StaffTelephone> _staffTelephones;
        private IList<IStaffTelephone> _staffTelephonesCovariant;

        [DataMember(Name="telephones")]
        public IList<StaffTelephone> StaffTelephones 
        { 
            get { return _staffTelephones; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StaffTelephone>(value,
                    (s, e) => ((IStaffTelephone)e.Item).Staff = this);
                _staffTelephones = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStaffTelephone, StaffTelephone>(value);
                covariantList.ItemAdded += (s, e) => ((IStaffTelephone)e.Item).Staff = this;
                _staffTelephonesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStaffTelephone> IStaff.StaffTelephones
        {
            get { return _staffTelephonesCovariant; }
            set { StaffTelephones = new List<StaffTelephone>(value.Cast<StaffTelephone>()); }
        }

        private IList<StaffVisa> _staffVisas;
        private IList<IStaffVisa> _staffVisasCovariant;

        [DataMember(Name="visas")]
        public IList<StaffVisa> StaffVisas 
        { 
            get { return _staffVisas; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StaffVisa>(value,
                    (s, e) => ((IStaffVisa)e.Item).Staff = this);
                _staffVisas = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStaffVisa, StaffVisa>(value);
                covariantList.ItemAdded += (s, e) => ((IStaffVisa)e.Item).Staff = this;
                _staffVisasCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStaffVisa> IStaff.StaffVisas
        {
            get { return _staffVisasCovariant; }
            set { StaffVisas = new List<StaffVisa>(value.Cast<StaffVisa>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffAddresses != null) foreach (var item in _staffAddresses)
            {
                item.Staff = this;
            }
            
            if (_staffCredentials != null) foreach (var item in _staffCredentials)
            {
                item.Staff = this;
            }
            
            if (_staffElectronicMails != null) foreach (var item in _staffElectronicMails)
            {
                item.Staff = this;
            }
            
            if (_staffIdentificationCodes != null) foreach (var item in _staffIdentificationCodes)
            {
                item.Staff = this;
            }
            
            if (_staffIdentificationDocuments != null) foreach (var item in _staffIdentificationDocuments)
            {
                item.Staff = this;
            }
            
            if (_staffInternationalAddresses != null) foreach (var item in _staffInternationalAddresses)
            {
                item.Staff = this;
            }
            
            if (_staffLanguages != null) foreach (var item in _staffLanguages)
            {
                item.Staff = this;
            }
            
            if (_staffOtherNames != null) foreach (var item in _staffOtherNames)
            {
                item.Staff = this;
            }
            
            if (_staffRaces != null) foreach (var item in _staffRaces)
            {
                item.Staff = this;
            }
            
            if (_staffTelephones != null) foreach (var item in _staffTelephones)
            {
                item.Staff = this;
            }
            
            if (_staffVisas != null) foreach (var item in _staffVisas)
            {
                item.Staff = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaff)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaff) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsCitizenshipStatusTypeSupported                       { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsOldEthnicityTypeSupported                            { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsSexTypeSupported                                     { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsStaffAddressesSupported                              { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsStaffCredentialsSupported                            { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsStaffElectronicMailsSupported                        { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsStaffIdentificationCodesSupported                    { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentsSupported                { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsStaffInternationalAddressesSupported                 { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsStaffLanguagesSupported                              { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsStaffOtherNamesSupported                             { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsStaffRacesSupported                                  { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsStaffTelephonesSupported                             { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsStaffUniqueIdSupported                               { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsStaffVisasSupported                                  { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return true; } set { } }
 
        bool IStaffSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IStaffAddress, bool> IStaffSynchronizationSourceSupport.IsStaffAddressIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStaffCredential, bool> IStaffSynchronizationSourceSupport.IsStaffCredentialIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStaffElectronicMail, bool> IStaffSynchronizationSourceSupport.IsStaffElectronicMailIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStaffIdentificationCode, bool> IStaffSynchronizationSourceSupport.IsStaffIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStaffIdentificationDocument, bool> IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStaffInternationalAddress, bool> IStaffSynchronizationSourceSupport.IsStaffInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStaffLanguage, bool> IStaffSynchronizationSourceSupport.IsStaffLanguageIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStaffOtherName, bool> IStaffSynchronizationSourceSupport.IsStaffOtherNameIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStaffRace, bool> IStaffSynchronizationSourceSupport.IsStaffRaceIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStaffTelephone, bool> IStaffSynchronizationSourceSupport.IsStaffTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStaffVisa, bool> IStaffSynchronizationSourceSupport.IsStaffVisaIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StaffAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffAddress : IStaffAddress, IStaffAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStaff _staff;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStaff IStaffAddress.Staff
        {
            get { return _staff; }
            set { _staff = value; }
        }

        internal IStaff Staff
        {
            set { _staff = value; }
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressType"), NaturalKeyMember]
        public string AddressType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null) 
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as IStaffAddress).AddressType != null) 
                    hash = hash * 23 + (this as IStaffAddress).AddressType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                         'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationType")]
        public string StateAbbreviationType { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName")]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffAddress)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffAddress) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported  { get { return true; } set { } }
 
        bool IStaffAddressSynchronizationSourceSupport.IsBeginDateSupported                 { get { return true; } set { } }
 
        bool IStaffAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported        { get { return true; } set { } }
 
        bool IStaffAddressSynchronizationSourceSupport.IsCitySupported                      { get { return true; } set { } }
 
        bool IStaffAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported            { get { return true; } set { } }
 
        bool IStaffAddressSynchronizationSourceSupport.IsEndDateSupported                   { get { return true; } set { } }
 
        bool IStaffAddressSynchronizationSourceSupport.IsLatitudeSupported                  { get { return true; } set { } }
 
        bool IStaffAddressSynchronizationSourceSupport.IsLongitudeSupported                 { get { return true; } set { } }
 
        bool IStaffAddressSynchronizationSourceSupport.IsNameOfCountySupported              { get { return true; } set { } }
 
        bool IStaffAddressSynchronizationSourceSupport.IsPostalCodeSupported                { get { return true; } set { } }
 
        bool IStaffAddressSynchronizationSourceSupport.IsStateAbbreviationTypeSupported     { get { return true; } set { } }
 
        bool IStaffAddressSynchronizationSourceSupport.IsStreetNumberNameSupported          { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StaffCredential table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffCredential : IStaffCredential, IStaffCredentialSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStaff _staff;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStaff IStaffCredential.Staff
        {
            get { return _staff; }
            set { _staff = value; }
        }

        internal IStaff Staff
        {
            set { _staff = value; }
        }

        /// <summary>
        /// The field of certification for the certificate (e.g., Mathematics, Music).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="credentialFieldDescriptor"), NaturalKeyMember]
        public string CredentialFieldDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year on which an active credential was issued to an individual.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="credentialIssuanceDate"), NaturalKeyMember]
        public DateTime CredentialIssuanceDate { get; set; }

        /// <summary>
        /// An indication of the category of credential an individual holds.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="credentialType"), NaturalKeyMember]
        public string CredentialType { get; set; }

        /// <summary>
        /// The grade level(s) certified for teaching.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="levelDescriptor"), NaturalKeyMember]
        public string LevelDescriptor { get; set; }

        /// <summary>
        /// An indication of the category of a legal document giving authorization to perform teaching assignment services.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="teachingCredentialDescriptor"), NaturalKeyMember]
        public string TeachingCredentialDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null) 
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as IStaffCredential).CredentialFieldDescriptor != null) 
                    hash = hash * 23 + (this as IStaffCredential).CredentialFieldDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as IStaffCredential).CredentialIssuanceDate != null) 
                    hash = hash * 23 + (this as IStaffCredential).CredentialIssuanceDate.GetHashCode();
 
                // Standard Property
                if ((this as IStaffCredential).CredentialType != null) 
                    hash = hash * 23 + (this as IStaffCredential).CredentialType.GetHashCode();
 
                // Standard Property
                if ((this as IStaffCredential).LevelDescriptor != null) 
                    hash = hash * 23 + (this as IStaffCredential).LevelDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as IStaffCredential).TeachingCredentialDescriptor != null) 
                    hash = hash * 23 + (this as IStaffCredential).TeachingCredentialDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an active credential held by an individual will expire.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="credentialExpirationDate")]
        public DateTime? CredentialExpirationDate { get; set; }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateOfIssueStateAbbreviationType")]
        public string StateOfIssueStateAbbreviationType { get; set; }

        /// <summary>
        /// An indication of the pre-determined criteria for granting the teaching credential that an individual holds.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="teachingCredentialBasisType")]
        public string TeachingCredentialBasisType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffCredential)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffCredential) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffCredentialSynchronizationSourceSupport.IsCredentialExpirationDateSupported           { get { return true; } set { } }
 
        bool IStaffCredentialSynchronizationSourceSupport.IsStateOfIssueStateAbbreviationTypeSupported  { get { return true; } set { } }
 
        bool IStaffCredentialSynchronizationSourceSupport.IsTeachingCredentialBasisTypeSupported        { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StaffElectronicMail table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffElectronicMail : IStaffElectronicMail, IStaffElectronicMailSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStaff _staff;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStaff IStaffElectronicMail.Staff
        {
            get { return _staff; }
            set { _staff = value; }
        }

        internal IStaff Staff
        {
            set { _staff = value; }
        }

        /// <summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="electronicMailType"), NaturalKeyMember]
        public string ElectronicMailType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null) 
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as IStaffElectronicMail).ElectronicMailType != null) 
                    hash = hash * 23 + (this as IStaffElectronicMail).ElectronicMailType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="electronicMailAddress")]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primaryEmailAddressIndicator")]
        public bool? PrimaryEmailAddressIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffElectronicMail)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffElectronicMail) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffElectronicMailSynchronizationSourceSupport.IsElectronicMailAddressSupported         { get { return true; } set { } }
 
        bool IStaffElectronicMailSynchronizationSourceSupport.IsPrimaryEmailAddressIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StaffIdentificationCode table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffIdentificationCode : IStaffIdentificationCode, IStaffIdentificationCodeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStaff _staff;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStaff IStaffIdentificationCode.Staff
        {
            get { return _staff; }
            set { _staff = value; }
        }

        internal IStaff Staff
        {
            set { _staff = value; }
        }

        /// <summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="staffIdentificationSystemDescriptor"), NaturalKeyMember]
        public string StaffIdentificationSystemDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null) 
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as IStaffIdentificationCode).StaffIdentificationSystemDescriptor != null) 
                    hash = hash * 23 + (this as IStaffIdentificationCode).StaffIdentificationSystemDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The organization code or name assigning the staff Identification Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assigningOrganizationIdentificationCode")]
        public string AssigningOrganizationIdentificationCode { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode")]
        public string IdentificationCode { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffIdentificationCode) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffIdentificationCodeSynchronizationSourceSupport.IsAssigningOrganizationIdentificationCodeSupported  { get { return true; } set { } }
 
        bool IStaffIdentificationCodeSynchronizationSourceSupport.IsIdentificationCodeSupported                       { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StaffIdentificationDocument table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffIdentificationDocument : IStaffIdentificationDocument, IStaffIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStaff _staff;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStaff IStaffIdentificationDocument.Staff
        {
            get { return _staff; }
            set { _staff = value; }
        }

        internal IStaff Staff
        {
            set { _staff = value; }
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseType"), NaturalKeyMember]
        public string IdentificationDocumentUseType { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationType"), NaturalKeyMember]
        public string PersonalInformationVerificationType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null) 
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as IStaffIdentificationDocument).IdentificationDocumentUseType != null) 
                    hash = hash * 23 + (this as IStaffIdentificationDocument).IdentificationDocumentUseType.GetHashCode();
 
                // Standard Property
                if ((this as IStaffIdentificationDocument).PersonalInformationVerificationType != null) 
                    hash = hash * 23 + (this as IStaffIdentificationDocument).PersonalInformationVerificationType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffIdentificationDocument) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
 
        bool IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
 
        bool IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
 
        bool IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
 
        bool IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StaffInternationalAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffInternationalAddress : IStaffInternationalAddress, IStaffInternationalAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStaff _staff;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStaff IStaffInternationalAddress.Staff
        {
            get { return _staff; }
            set { _staff = value; }
        }

        internal IStaff Staff
        {
            set { _staff = value; }
        }

        /// <summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressType"), NaturalKeyMember]
        public string AddressType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null) 
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as IStaffInternationalAddress).AddressType != null) 
                    hash = hash * 23 + (this as IStaffInternationalAddress).AddressType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The first line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine1")]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine2")]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine3")]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The fourth line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine4")]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The name of the country.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="countryDescriptor")]
        public string CountryDescriptor { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffInternationalAddress)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffInternationalAddress) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine1Supported       { get { return true; } set { } }
 
        bool IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine2Supported       { get { return true; } set { } }
 
        bool IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine3Supported       { get { return true; } set { } }
 
        bool IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine4Supported       { get { return true; } set { } }
 
        bool IStaffInternationalAddressSynchronizationSourceSupport.IsBeginDateSupported          { get { return true; } set { } }
 
        bool IStaffInternationalAddressSynchronizationSourceSupport.IsCountryDescriptorSupported  { get { return true; } set { } }
 
        bool IStaffInternationalAddressSynchronizationSourceSupport.IsEndDateSupported            { get { return true; } set { } }
 
        bool IStaffInternationalAddressSynchronizationSourceSupport.IsLatitudeSupported           { get { return true; } set { } }
 
        bool IStaffInternationalAddressSynchronizationSourceSupport.IsLongitudeSupported          { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StaffLanguage table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffLanguage : IStaffLanguage, IStaffLanguageSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffLanguage()
        {
            StaffLanguageUses = new List<StaffLanguageUse>();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStaff _staff;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStaff IStaffLanguage.Staff
        {
            get { return _staff; }
            set { _staff = value; }
        }

        internal IStaff Staff
        {
            set { _staff = value; }
        }

        /// <summary>
        /// A specification of which written or spoken communication is being used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageDescriptor"), NaturalKeyMember]
        public string LanguageDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null) 
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as IStaffLanguage).LanguageDescriptor != null) 
                    hash = hash * 23 + (this as IStaffLanguage).LanguageDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<StaffLanguageUse> _staffLanguageUses;
        private IList<IStaffLanguageUse> _staffLanguageUsesCovariant;

        [DataMember(Name="uses")]
        public IList<StaffLanguageUse> StaffLanguageUses 
        { 
            get { return _staffLanguageUses; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StaffLanguageUse>(value,
                    (s, e) => ((IStaffLanguageUse)e.Item).StaffLanguage = this);
                _staffLanguageUses = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStaffLanguageUse, StaffLanguageUse>(value);
                covariantList.ItemAdded += (s, e) => ((IStaffLanguageUse)e.Item).StaffLanguage = this;
                _staffLanguageUsesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStaffLanguageUse> IStaffLanguage.StaffLanguageUses
        {
            get { return _staffLanguageUsesCovariant; }
            set { StaffLanguageUses = new List<StaffLanguageUse>(value.Cast<StaffLanguageUse>()); }
        }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffLanguageUses != null) foreach (var item in _staffLanguageUses)
            {
                item.StaffLanguage = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffLanguage)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffLanguage) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUsesSupported  { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IStaffLanguageUse, bool> IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUseIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StaffLanguageUse table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffLanguageUse : IStaffLanguageUse, IStaffLanguageUseSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStaffLanguage _staffLanguage;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStaffLanguage IStaffLanguageUse.StaffLanguage
        {
            get { return _staffLanguage; }
            set { _staffLanguage = value; }
        }

        internal IStaffLanguage StaffLanguage
        {
            set { _staffLanguage = value; }
        }

        /// <summary>
        /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageUseType"), NaturalKeyMember]
        public string LanguageUseType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffLanguage != null) 
                    hash = hash * 23 + _staffLanguage.GetHashCode();
 
                // Standard Property
                if ((this as IStaffLanguageUse).LanguageUseType != null) 
                    hash = hash * 23 + (this as IStaffLanguageUse).LanguageUseType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffLanguageUse)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffLanguageUse) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StaffOtherName table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffOtherName : IStaffOtherName, IStaffOtherNameSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStaff _staff;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStaff IStaffOtherName.Staff
        {
            get { return _staff; }
            set { _staff = value; }
        }

        internal IStaff Staff
        {
            set { _staff = value; }
        }

        /// <summary>
        /// The types of alternate names for a person.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="otherNameType"), NaturalKeyMember]
        public string OtherNameType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null) 
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as IStaffOtherName).OtherNameType != null) 
                    hash = hash * 23 + (this as IStaffOtherName).OtherNameType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffOtherName)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffOtherName) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffOtherNameSynchronizationSourceSupport.IsFirstNameSupported             { get { return true; } set { } }
 
        bool IStaffOtherNameSynchronizationSourceSupport.IsGenerationCodeSuffixSupported  { get { return true; } set { } }
 
        bool IStaffOtherNameSynchronizationSourceSupport.IsLastSurnameSupported           { get { return true; } set { } }
 
        bool IStaffOtherNameSynchronizationSourceSupport.IsMiddleNameSupported            { get { return true; } set { } }
 
        bool IStaffOtherNameSynchronizationSourceSupport.IsPersonalTitlePrefixSupported   { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StaffRace table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffRace : IStaffRace, IStaffRaceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStaff _staff;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStaff IStaffRace.Staff
        {
            get { return _staff; }
            set { _staff = value; }
        }

        internal IStaff Staff
        {
            set { _staff = value; }
        }

        /// <summary>
        /// The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="raceType"), NaturalKeyMember]
        public string RaceType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null) 
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as IStaffRace).RaceType != null) 
                    hash = hash * 23 + (this as IStaffRace).RaceType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffRace)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffRace) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StaffTelephone table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffTelephone : IStaffTelephone, IStaffTelephoneSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStaff _staff;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStaff IStaffTelephone.Staff
        {
            get { return _staff; }
            set { _staff = value; }
        }

        internal IStaff Staff
        {
            set { _staff = value; }
        }

        /// <summary>
        /// The type of communication number listed for an individual or organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="telephoneNumberType"), NaturalKeyMember]
        public string TelephoneNumberType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null) 
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as IStaffTelephone).TelephoneNumberType != null) 
                    hash = hash * 23 + (this as IStaffTelephone).TelephoneNumberType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfPriority")]
        public int? OrderOfPriority { get; set; }

        /// <summary>
        /// The telephone number including the area code, and extension, if applicable.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="telephoneNumber")]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="textMessageCapabilityIndicator")]
        public bool? TextMessageCapabilityIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffTelephone)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffTelephone) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported                 { get { return true; } set { } }
 
        bool IStaffTelephoneSynchronizationSourceSupport.IsTelephoneNumberSupported                 { get { return true; } set { } }
 
        bool IStaffTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StaffVisa table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffVisa : IStaffVisa, IStaffVisaSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStaff _staff;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStaff IStaffVisa.Staff
        {
            get { return _staff; }
            set { _staff = value; }
        }

        internal IStaff Staff
        {
            set { _staff = value; }
        }

        /// <summary>
        /// An indicator of a non-US citizen's Visa type.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="visaType"), NaturalKeyMember]
        public string VisaType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null) 
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as IStaffVisa).VisaType != null) 
                    hash = hash * 23 + (this as IStaffVisa).VisaType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffVisa)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffVisa) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: StaffClassificationDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.StaffClassificationDescriptor
{
    /// <summary>
    /// A class which represents the edfi.StaffClassificationDescriptor table of the StaffClassificationDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffClassificationDescriptor : IStaffClassificationDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IStaffClassificationDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StaffClassificationDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="staffClassificationDescriptorId"), NaturalKeyMember]
        public int StaffClassificationDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return StaffClassificationDescriptorId; }
            set { StaffClassificationDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IStaffClassificationDescriptor).StaffClassificationDescriptorId != null) 
                    hash = hash * 23 + (this as IStaffClassificationDescriptor).StaffClassificationDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="staffClassificationType")]
        public string StaffClassificationType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffClassificationDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffClassificationDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffClassificationDescriptorSynchronizationSourceSupport.IsCodeValueSupported                { get { return true; } set { } }
 
        bool IStaffClassificationDescriptorSynchronizationSourceSupport.IsDescriptionSupported              { get { return true; } set { } }
 
        bool IStaffClassificationDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported       { get { return true; } set { } }
 
        bool IStaffClassificationDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported         { get { return true; } set { } }
 
        bool IStaffClassificationDescriptorSynchronizationSourceSupport.IsNamespaceSupported                { get { return true; } set { } }
 
        bool IStaffClassificationDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported        { get { return true; } set { } }
 
        bool IStaffClassificationDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported         { get { return true; } set { } }
 
        bool IStaffClassificationDescriptorSynchronizationSourceSupport.IsStaffClassificationTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StaffClassificationType

namespace EdFi.Ods.Api.Models.Resources.V2.StaffClassificationType
{
    /// <summary>
    /// A class which represents the edfi.StaffClassificationType table of the StaffClassificationType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffClassificationType : IStaffClassificationType, IHasETag, IStaffClassificationTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StaffClassificationType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for StaffClassification
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="staffClassificationTypeId"), NaturalKeyMember]
        public int StaffClassificationTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStaffClassificationType).StaffClassificationTypeId != null) 
                    hash = hash * 23 + (this as IStaffClassificationType).StaffClassificationTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the StaffClassification type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the StaffClassification type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffClassificationType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffClassificationType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffClassificationTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IStaffClassificationTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IStaffClassificationTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StaffCohortAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.StaffCohortAssociation
{
    /// <summary>
    /// Represents a reference to the StaffCohortAssociation resource.
    /// </summary>
    [DataContract]
    public class StaffCohortAssociationReference
    {
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="cohortIdentifier"), NaturalKeyMember]
        public string CohortIdentifier { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StaffCohortAssociation",
                            Href = "/staffCohortAssociations"
                                    + "?beginDate=" + JsonConvert.SerializeObject(BeginDate).Replace("\"", string.Empty)            
                                    + "&cohortIdentifier=" + WebUtility.UrlEncode(CohortIdentifier)            
                                    + "&educationOrganizationId=" + EducationOrganizationId            
                                    + "&staffUniqueId=" + WebUtility.UrlEncode(StaffUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime)
                && CohortIdentifier != default(string)
                && EducationOrganizationId != default(int)
                && StaffUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StaffCohortAssociation table of the StaffCohortAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffCohortAssociation : IStaffCohortAssociation, IHasETag, IStaffCohortAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StaffCohortAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _cohortReferenceExplicitlyAssigned;
        private Cohort.CohortReference _cohortReference;
        private Cohort.CohortReference ImplicitCohortReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_cohortReference == null && !_cohortReferenceExplicitlyAssigned)
                    _cohortReference = new Cohort.CohortReference();

                return _cohortReference;
            }
        }

        [DataMember(Name="cohortReference")][NaturalKeyMember]
        public Cohort.CohortReference CohortReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitCohortReference != null
                    && (_cohortReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCohortReference.IsReferenceFullyDefined()))
                    return ImplicitCohortReference;

                return null;
            }
            set 
            { 
                _cohortReferenceExplicitlyAssigned = true;
                _cohortReference = value;
            }
        }
        private bool _staffReferenceExplicitlyAssigned;
        private Staff.StaffReference _staffReference;
        private Staff.StaffReference ImplicitStaffReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_staffReference == null && !_staffReferenceExplicitlyAssigned)
                    _staffReference = new Staff.StaffReference();

                return _staffReference;
            }
        }

        [DataMember(Name="staffReference")][NaturalKeyMember]
        public Staff.StaffReference StaffReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStaffReference != null
                    && (_staffReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference;

                return null;
            }
            set 
            { 
                _staffReferenceExplicitlyAssigned = true;
                _staffReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Start date for the association of staff to this cohort.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// The name or ID for the Cohort.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStaffCohortAssociation.CohortIdentifier
        {
            get
            {
                if (ImplicitCohortReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCohortReference.IsReferenceFullyDefined()))
                    return ImplicitCohortReference.CohortIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Cohort
                _cohortReferenceExplicitlyAssigned = false;
                ImplicitCohortReference.CohortIdentifier = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStaffCohortAssociation.EducationOrganizationId
        {
            get
            {
                if (ImplicitCohortReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCohortReference.IsReferenceFullyDefined()))
                    return ImplicitCohortReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Cohort
                _cohortReferenceExplicitlyAssigned = false;
                ImplicitCohortReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStaffCohortAssociation.StaffUniqueId
        {
            get
            {
                if (ImplicitStaffReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference.StaffUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Staff
                _staffReferenceExplicitlyAssigned = false;
                ImplicitStaffReference.StaffUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStaffCohortAssociation).BeginDate != null) 
                    hash = hash * 23 + (this as IStaffCohortAssociation).BeginDate.GetHashCode();
 
                //Referenced Property
                if ((this as IStaffCohortAssociation).CohortIdentifier != null) 
                    hash = hash * 23 + (this as IStaffCohortAssociation).CohortIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as IStaffCohortAssociation).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStaffCohortAssociation).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IStaffCohortAssociation).StaffUniqueId != null) 
                    hash = hash * 23 + (this as IStaffCohortAssociation).StaffUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// End date for the association of staff to this cohort.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Indicator of whether the staff has access to the student records of the cohort per district interpretation of FERPA and other privacy laws, regulations, and policies.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="studentRecordAccess")]
        public bool? StudentRecordAccess { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffCohortAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffCohortAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffCohortAssociationSynchronizationSourceSupport.IsEndDateSupported              { get { return true; } set { } }
 
        bool IStaffCohortAssociationSynchronizationSourceSupport.IsStudentRecordAccessSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StaffEducationOrganizationAssignmentAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.StaffEducationOrganizationAssignmentAssociation
{
    /// <summary>
    /// Represents a reference to the StaffEducationOrganizationAssignmentAssociation resource.
    /// </summary>
    [DataContract]
    public class StaffEducationOrganizationAssignmentAssociationReference
    {
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="staffClassificationDescriptor"), NaturalKeyMember]
        public string StaffClassificationDescriptor { get; set; }

        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StaffEducationOrganizationAssignmentAssociation",
                            Href = "/staffEducationOrganizationAssignmentAssociations"
                                    + "?beginDate=" + JsonConvert.SerializeObject(BeginDate).Replace("\"", string.Empty)            
                                    + "&educationOrganizationId=" + EducationOrganizationId            
                                    + "&staffClassificationDescriptor=" + WebUtility.UrlEncode(StaffClassificationDescriptor)            
                                    + "&staffUniqueId=" + WebUtility.UrlEncode(StaffUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime)
                && EducationOrganizationId != default(int)
                && StaffClassificationDescriptor != default(string)
                && StaffUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StaffEducationOrganizationAssignmentAssociation table of the StaffEducationOrganizationAssignmentAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffEducationOrganizationAssignmentAssociation : IStaffEducationOrganizationAssignmentAssociation, IHasETag, IStaffEducationOrganizationAssignmentAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StaffEducationOrganizationAssignmentAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        private bool _employmentStaffEducationOrganizationEmploymentAssociationReferenceExplicitlyAssigned;
        private StaffEducationOrganizationEmploymentAssociation.StaffEducationOrganizationEmploymentAssociationReference _employmentStaffEducationOrganizationEmploymentAssociationReference;
        private StaffEducationOrganizationEmploymentAssociation.StaffEducationOrganizationEmploymentAssociationReference ImplicitEmploymentStaffEducationOrganizationEmploymentAssociationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_employmentStaffEducationOrganizationEmploymentAssociationReference == null && !_employmentStaffEducationOrganizationEmploymentAssociationReferenceExplicitlyAssigned)
                    _employmentStaffEducationOrganizationEmploymentAssociationReference = new StaffEducationOrganizationEmploymentAssociation.StaffEducationOrganizationEmploymentAssociationReference();

                return _employmentStaffEducationOrganizationEmploymentAssociationReference;
            }
        }

        [DataMember(Name="employmentStaffEducationOrganizationEmploymentAssociationReference")]
        public StaffEducationOrganizationEmploymentAssociation.StaffEducationOrganizationEmploymentAssociationReference EmploymentStaffEducationOrganizationEmploymentAssociationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEmploymentStaffEducationOrganizationEmploymentAssociationReference != null
                    && (_employmentStaffEducationOrganizationEmploymentAssociationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEmploymentStaffEducationOrganizationEmploymentAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitEmploymentStaffEducationOrganizationEmploymentAssociationReference;

                return null;
            }
            set 
            { 
                _employmentStaffEducationOrganizationEmploymentAssociationReferenceExplicitlyAssigned = true;
                _employmentStaffEducationOrganizationEmploymentAssociationReference = value;
            }
        }
        private bool _staffReferenceExplicitlyAssigned;
        private Staff.StaffReference _staffReference;
        private Staff.StaffReference ImplicitStaffReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_staffReference == null && !_staffReferenceExplicitlyAssigned)
                    _staffReference = new Staff.StaffReference();

                return _staffReference;
            }
        }

        [DataMember(Name="staffReference")][NaturalKeyMember]
        public Staff.StaffReference StaffReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStaffReference != null
                    && (_staffReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference;

                return null;
            }
            set 
            { 
                _staffReferenceExplicitlyAssigned = true;
                _staffReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Month, day, and year of the start or effective date of a staff member's employment, contract, or relationship with the LEA.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStaffEducationOrganizationAssignmentAssociation.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The titles of employment, official status, or rank of education staff.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="staffClassificationDescriptor"), NaturalKeyMember]
        public string StaffClassificationDescriptor { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStaffEducationOrganizationAssignmentAssociation.StaffUniqueId
        {
            get
            {
                if (ImplicitStaffReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference.StaffUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EmploymentStaffEducationOrganizationEmploymentAssociation
                _employmentStaffEducationOrganizationEmploymentAssociationReferenceExplicitlyAssigned = false;
                ImplicitEmploymentStaffEducationOrganizationEmploymentAssociationReference.StaffUniqueId = value;

                // Staff
                _staffReferenceExplicitlyAssigned = false;
                ImplicitStaffReference.StaffUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStaffEducationOrganizationAssignmentAssociation).BeginDate != null) 
                    hash = hash * 23 + (this as IStaffEducationOrganizationAssignmentAssociation).BeginDate.GetHashCode();
 
                //Referenced Property
                if ((this as IStaffEducationOrganizationAssignmentAssociation).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStaffEducationOrganizationAssignmentAssociation).EducationOrganizationId.GetHashCode();
 
                // Standard Property
                if ((this as IStaffEducationOrganizationAssignmentAssociation).StaffClassificationDescriptor != null) 
                    hash = hash * 23 + (this as IStaffEducationOrganizationAssignmentAssociation).StaffClassificationDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IStaffEducationOrganizationAssignmentAssociation).StaffUniqueId != null) 
                    hash = hash * 23 + (this as IStaffEducationOrganizationAssignmentAssociation).StaffUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? IStaffEducationOrganizationAssignmentAssociation.EmploymentEducationOrganizationId
        {
            get
            {
                if (ImplicitEmploymentStaffEducationOrganizationEmploymentAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEmploymentStaffEducationOrganizationEmploymentAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitEmploymentStaffEducationOrganizationEmploymentAssociationReference.EducationOrganizationId;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EmploymentStaffEducationOrganizationEmploymentAssociation
                _employmentStaffEducationOrganizationEmploymentAssociationReferenceExplicitlyAssigned = false;
                ImplicitEmploymentStaffEducationOrganizationEmploymentAssociationReference.EducationOrganizationId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The month, day, and year on which an individual was hired for a position.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime? IStaffEducationOrganizationAssignmentAssociation.EmploymentHireDate
        {
            get
            {
                if (ImplicitEmploymentStaffEducationOrganizationEmploymentAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEmploymentStaffEducationOrganizationEmploymentAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitEmploymentStaffEducationOrganizationEmploymentAssociationReference.HireDate;

                return default(DateTime?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EmploymentStaffEducationOrganizationEmploymentAssociation
                _employmentStaffEducationOrganizationEmploymentAssociationReferenceExplicitlyAssigned = false;
                ImplicitEmploymentStaffEducationOrganizationEmploymentAssociationReference.HireDate = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// Reflects the type of employment or contract; for example:          Probationary          Contractual          Substitute/temporary          Tenured or permanent          Volunteer/no contract          ...
        /// </summary>

        // IS in a reference (StaffEducationOrganizationAssignmentAssociation.EmploymentStatusDescriptorId), IS a lookup column 
        string IStaffEducationOrganizationAssignmentAssociation.EmploymentStatusDescriptor
        {
            get
            {
                if (ImplicitEmploymentStaffEducationOrganizationEmploymentAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEmploymentStaffEducationOrganizationEmploymentAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitEmploymentStaffEducationOrganizationEmploymentAssociationReference.EmploymentStatusDescriptor;

                return null;
            }
            set
            {
                ImplicitEmploymentStaffEducationOrganizationEmploymentAssociationReference.EmploymentStatusDescriptor = value;
            }
        }

        /// <summary>
        /// Month, day, and year of the end or termination date of a staff member's employment, contract, or relationship with the LEA.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Describes whether the assignment is this the staff member's primary assignment, secondary assignment, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfAssignment")]
        public int? OrderOfAssignment { get; set; }

        /// <summary>
        /// The descriptive name of an individual's position.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="positionTitle")]
        public string PositionTitle { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffEducationOrganizationAssignmentAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffEducationOrganizationAssignmentAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffEducationOrganizationAssignmentAssociationSynchronizationSourceSupport.IsEmploymentEducationOrganizationIdSupported  { get { return true; } set { } }
 
        bool IStaffEducationOrganizationAssignmentAssociationSynchronizationSourceSupport.IsEmploymentHireDateSupported                 { get { return true; } set { } }
 
        bool IStaffEducationOrganizationAssignmentAssociationSynchronizationSourceSupport.IsEmploymentStatusDescriptorSupported         { get { return true; } set { } }
 
        bool IStaffEducationOrganizationAssignmentAssociationSynchronizationSourceSupport.IsEndDateSupported                            { get { return true; } set { } }
 
        bool IStaffEducationOrganizationAssignmentAssociationSynchronizationSourceSupport.IsOrderOfAssignmentSupported                  { get { return true; } set { } }
 
        bool IStaffEducationOrganizationAssignmentAssociationSynchronizationSourceSupport.IsPositionTitleSupported                      { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StaffEducationOrganizationEmploymentAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.StaffEducationOrganizationEmploymentAssociation
{
    /// <summary>
    /// Represents a reference to the StaffEducationOrganizationEmploymentAssociation resource.
    /// </summary>
    [DataContract]
    public class StaffEducationOrganizationEmploymentAssociationReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="employmentStatusDescriptor"), NaturalKeyMember]
        public string EmploymentStatusDescriptor { get; set; }

        [DataMember(Name="hireDate"), NaturalKeyMember]
        public DateTime HireDate { get; set; }

        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StaffEducationOrganizationEmploymentAssociation",
                            Href = "/staffEducationOrganizationEmploymentAssociations"
                                    + "?educationOrganizationId=" + EducationOrganizationId            
                                    + "&employmentStatusDescriptor=" + WebUtility.UrlEncode(EmploymentStatusDescriptor)            
                                    + "&hireDate=" + JsonConvert.SerializeObject(HireDate).Replace("\"", string.Empty)            
                                    + "&staffUniqueId=" + WebUtility.UrlEncode(StaffUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int)
                && EmploymentStatusDescriptor != default(string)
                && HireDate != default(DateTime)
                && StaffUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StaffEducationOrganizationEmploymentAssociation table of the StaffEducationOrganizationEmploymentAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffEducationOrganizationEmploymentAssociation : IStaffEducationOrganizationEmploymentAssociation, IHasETag, IStaffEducationOrganizationEmploymentAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StaffEducationOrganizationEmploymentAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        private bool _staffReferenceExplicitlyAssigned;
        private Staff.StaffReference _staffReference;
        private Staff.StaffReference ImplicitStaffReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_staffReference == null && !_staffReferenceExplicitlyAssigned)
                    _staffReference = new Staff.StaffReference();

                return _staffReference;
            }
        }

        [DataMember(Name="staffReference")][NaturalKeyMember]
        public Staff.StaffReference StaffReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStaffReference != null
                    && (_staffReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference;

                return null;
            }
            set 
            { 
                _staffReferenceExplicitlyAssigned = true;
                _staffReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStaffEducationOrganizationEmploymentAssociation.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// Reflects the type of employment or contract; for example:          Probationary          Contractual          Substitute/temporary          Tenured or permanent          Volunteer/no contract          ...
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="employmentStatusDescriptor"), NaturalKeyMember]
        public string EmploymentStatusDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was hired for a position.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hireDate"), NaturalKeyMember]
        public DateTime HireDate { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStaffEducationOrganizationEmploymentAssociation.StaffUniqueId
        {
            get
            {
                if (ImplicitStaffReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference.StaffUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Staff
                _staffReferenceExplicitlyAssigned = false;
                ImplicitStaffReference.StaffUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IStaffEducationOrganizationEmploymentAssociation).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStaffEducationOrganizationEmploymentAssociation).EducationOrganizationId.GetHashCode();
 
                // Standard Property
                if ((this as IStaffEducationOrganizationEmploymentAssociation).EmploymentStatusDescriptor != null) 
                    hash = hash * 23 + (this as IStaffEducationOrganizationEmploymentAssociation).EmploymentStatusDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as IStaffEducationOrganizationEmploymentAssociation).HireDate != null) 
                    hash = hash * 23 + (this as IStaffEducationOrganizationEmploymentAssociation).HireDate.GetHashCode();
 
                //Referenced Property
                if ((this as IStaffEducationOrganizationEmploymentAssociation).StaffUniqueId != null) 
                    hash = hash * 23 + (this as IStaffEducationOrganizationEmploymentAssociation).StaffUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The department or suborganization the employee/contractor is associated with in the EducationOrganization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="department")]
        public string Department { get; set; }

        /// <summary>
        /// The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="fullTimeEquivalency")][Range(typeof(decimal), "-9.9999", "9.9999")]
        public decimal? FullTimeEquivalency { get; set; }

        /// <summary>
        /// Hourly wage associated with the employment position being reported.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hourlyWage")][Range(typeof(decimal), "-922337203685477.5808", "922337203685477.5807")]
        public decimal? HourlyWage { get; set; }

        /// <summary>
        /// Date at which the staff member was made an official offer for this employment.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="offerDate")]
        public DateTime? OfferDate { get; set; }

        /// <summary>
        /// Reason for terminating the employment; for example:          Employment in education          Employment outside of education          Retirement          Family/personal relocation          Change of assignment.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="separationReasonDescriptor")]
        public string SeparationReasonDescriptor { get; set; }

        /// <summary>
        /// Type of employment separation; for example: Voluntary separation, Involuntary separation,          Mutual agreement          Other, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="separationType")]
        public string SeparationType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffEducationOrganizationEmploymentAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffEducationOrganizationEmploymentAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffEducationOrganizationEmploymentAssociationSynchronizationSourceSupport.IsDepartmentSupported                  { get { return true; } set { } }
 
        bool IStaffEducationOrganizationEmploymentAssociationSynchronizationSourceSupport.IsEndDateSupported                     { get { return true; } set { } }
 
        bool IStaffEducationOrganizationEmploymentAssociationSynchronizationSourceSupport.IsFullTimeEquivalencySupported         { get { return true; } set { } }
 
        bool IStaffEducationOrganizationEmploymentAssociationSynchronizationSourceSupport.IsHourlyWageSupported                  { get { return true; } set { } }
 
        bool IStaffEducationOrganizationEmploymentAssociationSynchronizationSourceSupport.IsOfferDateSupported                   { get { return true; } set { } }
 
        bool IStaffEducationOrganizationEmploymentAssociationSynchronizationSourceSupport.IsSeparationReasonDescriptorSupported  { get { return true; } set { } }
 
        bool IStaffEducationOrganizationEmploymentAssociationSynchronizationSourceSupport.IsSeparationTypeSupported              { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StaffIdentificationSystemDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.StaffIdentificationSystemDescriptor
{
    /// <summary>
    /// A class which represents the edfi.StaffIdentificationSystemDescriptor table of the StaffIdentificationSystemDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffIdentificationSystemDescriptor : IStaffIdentificationSystemDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IStaffIdentificationSystemDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StaffIdentificationSystemDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="staffIdentificationSystemDescriptorId"), NaturalKeyMember]
        public int StaffIdentificationSystemDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return StaffIdentificationSystemDescriptorId; }
            set { StaffIdentificationSystemDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IStaffIdentificationSystemDescriptor).StaffIdentificationSystemDescriptorId != null) 
                    hash = hash * 23 + (this as IStaffIdentificationSystemDescriptor).StaffIdentificationSystemDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="staffIdentificationSystemType")]
        public string StaffIdentificationSystemType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffIdentificationSystemDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffIdentificationSystemDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffIdentificationSystemDescriptorSynchronizationSourceSupport.IsCodeValueSupported                      { get { return true; } set { } }
 
        bool IStaffIdentificationSystemDescriptorSynchronizationSourceSupport.IsDescriptionSupported                    { get { return true; } set { } }
 
        bool IStaffIdentificationSystemDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported             { get { return true; } set { } }
 
        bool IStaffIdentificationSystemDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported               { get { return true; } set { } }
 
        bool IStaffIdentificationSystemDescriptorSynchronizationSourceSupport.IsNamespaceSupported                      { get { return true; } set { } }
 
        bool IStaffIdentificationSystemDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported              { get { return true; } set { } }
 
        bool IStaffIdentificationSystemDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported               { get { return true; } set { } }
 
        bool IStaffIdentificationSystemDescriptorSynchronizationSourceSupport.IsStaffIdentificationSystemTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StaffIdentificationSystemType

namespace EdFi.Ods.Api.Models.Resources.V2.StaffIdentificationSystemType
{
    /// <summary>
    /// A class which represents the edfi.StaffIdentificationSystemType table of the StaffIdentificationSystemType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffIdentificationSystemType : IStaffIdentificationSystemType, IHasETag, IStaffIdentificationSystemTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StaffIdentificationSystemType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for StaffIdentificationSystem
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="staffIdentificationSystemTypeId"), NaturalKeyMember]
        public int StaffIdentificationSystemTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStaffIdentificationSystemType).StaffIdentificationSystemTypeId != null) 
                    hash = hash * 23 + (this as IStaffIdentificationSystemType).StaffIdentificationSystemTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the StaffIdentificationSystem type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the StaffIdentificationSystem type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffIdentificationSystemType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffIdentificationSystemType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffIdentificationSystemTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IStaffIdentificationSystemTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IStaffIdentificationSystemTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StaffProgramAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.StaffProgramAssociation
{
    /// <summary>
    /// Represents a reference to the StaffProgramAssociation resource.
    /// </summary>
    [DataContract]
    public class StaffProgramAssociationReference
    {
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="programEducationOrganizationId"), NaturalKeyMember]
        public int ProgramEducationOrganizationId { get; set; }

        [DataMember(Name="programName"), NaturalKeyMember]
        public string ProgramName { get; set; }

        [DataMember(Name="programType"), NaturalKeyMember]
        public string ProgramType { get; set; }

        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StaffProgramAssociation",
                            Href = "/staffProgramAssociations"
                                    + "?beginDate=" + JsonConvert.SerializeObject(BeginDate).Replace("\"", string.Empty)            
                                    + "&programEducationOrganizationId=" + ProgramEducationOrganizationId            
                                    + "&programName=" + WebUtility.UrlEncode(ProgramName)            
                                    + "&programType=" + WebUtility.UrlEncode(ProgramType)            
                                    + "&staffUniqueId=" + WebUtility.UrlEncode(StaffUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime)
                && ProgramEducationOrganizationId != default(int)
                && ProgramName != default(string)
                && ProgramType != default(string)
                && StaffUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StaffProgramAssociation table of the StaffProgramAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffProgramAssociation : IStaffProgramAssociation, IHasETag, IStaffProgramAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StaffProgramAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _programReferenceExplicitlyAssigned;
        private Program.ProgramReference _programReference;
        private Program.ProgramReference ImplicitProgramReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_programReference == null && !_programReferenceExplicitlyAssigned)
                    _programReference = new Program.ProgramReference();

                return _programReference;
            }
        }

        [DataMember(Name="programReference")][NaturalKeyMember]
        public Program.ProgramReference ProgramReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitProgramReference != null
                    && (_programReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference;

                return null;
            }
            set 
            { 
                _programReferenceExplicitlyAssigned = true;
                _programReference = value;
            }
        }
        private bool _staffReferenceExplicitlyAssigned;
        private Staff.StaffReference _staffReference;
        private Staff.StaffReference ImplicitStaffReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_staffReference == null && !_staffReferenceExplicitlyAssigned)
                    _staffReference = new Staff.StaffReference();

                return _staffReference;
            }
        }

        [DataMember(Name="staffReference")][NaturalKeyMember]
        public Staff.StaffReference StaffReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStaffReference != null
                    && (_staffReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference;

                return null;
            }
            set 
            { 
                _staffReferenceExplicitlyAssigned = true;
                _staffReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Start date for the association of staff to this program.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStaffProgramAssociation.ProgramEducationOrganizationId
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStaffProgramAssociation.ProgramName
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.ProgramName = value;
            }
        }

        /// <summary>
        /// The type of program.
        /// </summary>

        // IS in a reference (StaffProgramAssociation.ProgramTypeId), IS a lookup column 
        string IStaffProgramAssociation.ProgramType
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramType;

                return null;
            }
            set
            {
                ImplicitProgramReference.ProgramType = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStaffProgramAssociation.StaffUniqueId
        {
            get
            {
                if (ImplicitStaffReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference.StaffUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Staff
                _staffReferenceExplicitlyAssigned = false;
                ImplicitStaffReference.StaffUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStaffProgramAssociation).BeginDate != null) 
                    hash = hash * 23 + (this as IStaffProgramAssociation).BeginDate.GetHashCode();
 
                //Referenced Property
                if ((this as IStaffProgramAssociation).ProgramEducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStaffProgramAssociation).ProgramEducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IStaffProgramAssociation).ProgramName != null) 
                    hash = hash * 23 + (this as IStaffProgramAssociation).ProgramName.GetHashCode();
 
                //Unified Type Property
                if ((this as IStaffProgramAssociation).ProgramType != null) 
                    hash = hash * 23 + (this as IStaffProgramAssociation).ProgramType.GetHashCode();
 
                //Referenced Property
                if ((this as IStaffProgramAssociation).StaffUniqueId != null) 
                    hash = hash * 23 + (this as IStaffProgramAssociation).StaffUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// End date for the association of staff to this program.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Indicator of whether the staff has access to the student records of the program per district interpretation of FERPA and other privacy laws, regulations, and policies.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="studentRecordAccess")]
        public bool? StudentRecordAccess { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffProgramAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffProgramAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffProgramAssociationSynchronizationSourceSupport.IsEndDateSupported              { get { return true; } set { } }
 
        bool IStaffProgramAssociationSynchronizationSourceSupport.IsStudentRecordAccessSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StaffSchoolAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.StaffSchoolAssociation
{
    /// <summary>
    /// Represents a reference to the StaffSchoolAssociation resource.
    /// </summary>
    [DataContract]
    public class StaffSchoolAssociationReference
    {
        [DataMember(Name="programAssignmentDescriptor"), NaturalKeyMember]
        public string ProgramAssignmentDescriptor { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StaffSchoolAssociation",
                            Href = "/staffSchoolAssociations"
                                    + "?programAssignmentDescriptor=" + WebUtility.UrlEncode(ProgramAssignmentDescriptor)            
                                    + "&schoolId=" + SchoolId            
                                    + "&staffUniqueId=" + WebUtility.UrlEncode(StaffUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ProgramAssignmentDescriptor != default(string)
                && SchoolId != default(int)
                && StaffUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StaffSchoolAssociation table of the StaffSchoolAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffSchoolAssociation : IStaffSchoolAssociation, IHasETag, IStaffSchoolAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffSchoolAssociation()
        {
            StaffSchoolAssociationAcademicSubjects = new List<StaffSchoolAssociationAcademicSubject>();
            StaffSchoolAssociationGradeLevels = new List<StaffSchoolAssociationGradeLevel>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the StaffSchoolAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _schoolReferenceExplicitlyAssigned;
        private School.SchoolReference _schoolReference;
        private School.SchoolReference ImplicitSchoolReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolReference == null && !_schoolReferenceExplicitlyAssigned)
                    _schoolReference = new School.SchoolReference();

                return _schoolReference;
            }
        }

        [DataMember(Name="schoolReference")][NaturalKeyMember]
        public School.SchoolReference SchoolReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolReference != null
                    && (_schoolReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference;

                return null;
            }
            set 
            { 
                _schoolReferenceExplicitlyAssigned = true;
                _schoolReference = value;
            }
        }
        private bool _schoolYearTypeReferenceExplicitlyAssigned;
        private SchoolYearType.SchoolYearTypeReference _schoolYearTypeReference;
        private SchoolYearType.SchoolYearTypeReference ImplicitSchoolYearTypeReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolYearTypeReference == null && !_schoolYearTypeReferenceExplicitlyAssigned)
                    _schoolYearTypeReference = new SchoolYearType.SchoolYearTypeReference();

                return _schoolYearTypeReference;
            }
        }

        [DataMember(Name="schoolYearTypeReference")]
        public SchoolYearType.SchoolYearTypeReference SchoolYearTypeReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolYearTypeReference != null
                    && (_schoolYearTypeReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference;

                return null;
            }
            set 
            { 
                _schoolYearTypeReferenceExplicitlyAssigned = true;
                _schoolYearTypeReference = value;
            }
        }
        private bool _staffReferenceExplicitlyAssigned;
        private Staff.StaffReference _staffReference;
        private Staff.StaffReference ImplicitStaffReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_staffReference == null && !_staffReferenceExplicitlyAssigned)
                    _staffReference = new Staff.StaffReference();

                return _staffReference;
            }
        }

        [DataMember(Name="staffReference")][NaturalKeyMember]
        public Staff.StaffReference StaffReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStaffReference != null
                    && (_staffReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference;

                return null;
            }
            set 
            { 
                _staffReferenceExplicitlyAssigned = true;
                _staffReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The name of the program for which the individual is assigned; for example:          Regular education          Title I-Academic          Title I-Non-Academic          Special Education          Bilingual/English as a Second Language.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="programAssignmentDescriptor"), NaturalKeyMember]
        public string ProgramAssignmentDescriptor { get; set; }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStaffSchoolAssociation.SchoolId
        {
            get
            {
                if (ImplicitSchoolReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // School
                _schoolReferenceExplicitlyAssigned = false;
                ImplicitSchoolReference.SchoolId = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStaffSchoolAssociation.StaffUniqueId
        {
            get
            {
                if (ImplicitStaffReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference.StaffUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Staff
                _staffReferenceExplicitlyAssigned = false;
                ImplicitStaffReference.StaffUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStaffSchoolAssociation).ProgramAssignmentDescriptor != null) 
                    hash = hash * 23 + (this as IStaffSchoolAssociation).ProgramAssignmentDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IStaffSchoolAssociation).SchoolId != null) 
                    hash = hash * 23 + (this as IStaffSchoolAssociation).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as IStaffSchoolAssociation).StaffUniqueId != null) 
                    hash = hash * 23 + (this as IStaffSchoolAssociation).StaffUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Identifier for a school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short? IStaffSchoolAssociation.SchoolYear
        {
            get
            {
                if (ImplicitSchoolYearTypeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference.SchoolYear;

                return default(short?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SchoolYearType
                _schoolYearTypeReferenceExplicitlyAssigned = false;
                ImplicitSchoolYearTypeReference.SchoolYear = value.GetValueOrDefault();
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<StaffSchoolAssociationAcademicSubject> _staffSchoolAssociationAcademicSubjects;
        private IList<IStaffSchoolAssociationAcademicSubject> _staffSchoolAssociationAcademicSubjectsCovariant;

        [DataMember(Name="academicSubjects")]
        public IList<StaffSchoolAssociationAcademicSubject> StaffSchoolAssociationAcademicSubjects 
        { 
            get { return _staffSchoolAssociationAcademicSubjects; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StaffSchoolAssociationAcademicSubject>(value,
                    (s, e) => ((IStaffSchoolAssociationAcademicSubject)e.Item).StaffSchoolAssociation = this);
                _staffSchoolAssociationAcademicSubjects = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStaffSchoolAssociationAcademicSubject, StaffSchoolAssociationAcademicSubject>(value);
                covariantList.ItemAdded += (s, e) => ((IStaffSchoolAssociationAcademicSubject)e.Item).StaffSchoolAssociation = this;
                _staffSchoolAssociationAcademicSubjectsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStaffSchoolAssociationAcademicSubject> IStaffSchoolAssociation.StaffSchoolAssociationAcademicSubjects
        {
            get { return _staffSchoolAssociationAcademicSubjectsCovariant; }
            set { StaffSchoolAssociationAcademicSubjects = new List<StaffSchoolAssociationAcademicSubject>(value.Cast<StaffSchoolAssociationAcademicSubject>()); }
        }

        private IList<StaffSchoolAssociationGradeLevel> _staffSchoolAssociationGradeLevels;
        private IList<IStaffSchoolAssociationGradeLevel> _staffSchoolAssociationGradeLevelsCovariant;

        [DataMember(Name="gradeLevels")]
        public IList<StaffSchoolAssociationGradeLevel> StaffSchoolAssociationGradeLevels 
        { 
            get { return _staffSchoolAssociationGradeLevels; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StaffSchoolAssociationGradeLevel>(value,
                    (s, e) => ((IStaffSchoolAssociationGradeLevel)e.Item).StaffSchoolAssociation = this);
                _staffSchoolAssociationGradeLevels = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStaffSchoolAssociationGradeLevel, StaffSchoolAssociationGradeLevel>(value);
                covariantList.ItemAdded += (s, e) => ((IStaffSchoolAssociationGradeLevel)e.Item).StaffSchoolAssociation = this;
                _staffSchoolAssociationGradeLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStaffSchoolAssociationGradeLevel> IStaffSchoolAssociation.StaffSchoolAssociationGradeLevels
        {
            get { return _staffSchoolAssociationGradeLevelsCovariant; }
            set { StaffSchoolAssociationGradeLevels = new List<StaffSchoolAssociationGradeLevel>(value.Cast<StaffSchoolAssociationGradeLevel>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffSchoolAssociationAcademicSubjects != null) foreach (var item in _staffSchoolAssociationAcademicSubjects)
            {
                item.StaffSchoolAssociation = this;
            }
            
            if (_staffSchoolAssociationGradeLevels != null) foreach (var item in _staffSchoolAssociationGradeLevels)
            {
                item.StaffSchoolAssociation = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffSchoolAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffSchoolAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffSchoolAssociationSynchronizationSourceSupport.IsSchoolYearSupported                              { get { return true; } set { } }
 
        bool IStaffSchoolAssociationSynchronizationSourceSupport.IsStaffSchoolAssociationAcademicSubjectsSupported  { get { return true; } set { } }
 
        bool IStaffSchoolAssociationSynchronizationSourceSupport.IsStaffSchoolAssociationGradeLevelsSupported       { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IStaffSchoolAssociationAcademicSubject, bool> IStaffSchoolAssociationSynchronizationSourceSupport.IsStaffSchoolAssociationAcademicSubjectIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStaffSchoolAssociationGradeLevel, bool> IStaffSchoolAssociationSynchronizationSourceSupport.IsStaffSchoolAssociationGradeLevelIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StaffSchoolAssociationAcademicSubject table of the StaffSchoolAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffSchoolAssociationAcademicSubject : IStaffSchoolAssociationAcademicSubject, IStaffSchoolAssociationAcademicSubjectSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStaffSchoolAssociation _staffSchoolAssociation;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStaffSchoolAssociation IStaffSchoolAssociationAcademicSubject.StaffSchoolAssociation
        {
            get { return _staffSchoolAssociation; }
            set { _staffSchoolAssociation = value; }
        }

        internal IStaffSchoolAssociation StaffSchoolAssociation
        {
            set { _staffSchoolAssociation = value; }
        }

        /// <summary>
        /// The teaching field taught by an individual, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="academicSubjectDescriptor"), NaturalKeyMember]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffSchoolAssociation != null) 
                    hash = hash * 23 + _staffSchoolAssociation.GetHashCode();
 
                // Standard Property
                if ((this as IStaffSchoolAssociationAcademicSubject).AcademicSubjectDescriptor != null) 
                    hash = hash * 23 + (this as IStaffSchoolAssociationAcademicSubject).AcademicSubjectDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffSchoolAssociationAcademicSubject)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffSchoolAssociationAcademicSubject) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StaffSchoolAssociationGradeLevel table of the StaffSchoolAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffSchoolAssociationGradeLevel : IStaffSchoolAssociationGradeLevel, IStaffSchoolAssociationGradeLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStaffSchoolAssociation _staffSchoolAssociation;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStaffSchoolAssociation IStaffSchoolAssociationGradeLevel.StaffSchoolAssociation
        {
            get { return _staffSchoolAssociation; }
            set { _staffSchoolAssociation = value; }
        }

        internal IStaffSchoolAssociation StaffSchoolAssociation
        {
            set { _staffSchoolAssociation = value; }
        }

        /// <summary>
        /// The set of grade levels for which the individual's assignment is responsible.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffSchoolAssociation != null) 
                    hash = hash * 23 + _staffSchoolAssociation.GetHashCode();
 
                // Standard Property
                if ((this as IStaffSchoolAssociationGradeLevel).GradeLevelDescriptor != null) 
                    hash = hash * 23 + (this as IStaffSchoolAssociationGradeLevel).GradeLevelDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffSchoolAssociationGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffSchoolAssociationGradeLevel) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: StaffSectionAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.StaffSectionAssociation
{
    /// <summary>
    /// Represents a reference to the StaffSectionAssociation resource.
    /// </summary>
    [DataContract]
    public class StaffSectionAssociationReference
    {
        [DataMember(Name="classPeriodName"), NaturalKeyMember]
        public string ClassPeriodName { get; set; }

        [DataMember(Name="classroomIdentificationCode"), NaturalKeyMember]
        public string ClassroomIdentificationCode { get; set; }

        [DataMember(Name="localCourseCode"), NaturalKeyMember]
        public string LocalCourseCode { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sequenceOfCourse"), NaturalKeyMember]
        public int SequenceOfCourse { get; set; }

        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        [DataMember(Name="uniqueSectionCode"), NaturalKeyMember]
        public string UniqueSectionCode { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StaffSectionAssociation",
                            Href = "/staffSectionAssociations"
                                    + "?classPeriodName=" + WebUtility.UrlEncode(ClassPeriodName)            
                                    + "&classroomIdentificationCode=" + WebUtility.UrlEncode(ClassroomIdentificationCode)            
                                    + "&localCourseCode=" + WebUtility.UrlEncode(LocalCourseCode)            
                                    + "&schoolId=" + SchoolId            
                                    + "&schoolYear=" + SchoolYear            
                                    + "&sequenceOfCourse=" + SequenceOfCourse            
                                    + "&staffUniqueId=" + WebUtility.UrlEncode(StaffUniqueId)            
                                    + "&termDescriptor=" + WebUtility.UrlEncode(TermDescriptor)            
                                    + "&uniqueSectionCode=" + WebUtility.UrlEncode(UniqueSectionCode)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ClassPeriodName != default(string)
                && ClassroomIdentificationCode != default(string)
                && LocalCourseCode != default(string)
                && SchoolId != default(int)
                && SchoolYear != default(short)
                && SequenceOfCourse != default(int)
                && StaffUniqueId != default(string)
                && TermDescriptor != default(string)
                && UniqueSectionCode != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StaffSectionAssociation table of the StaffSectionAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StaffSectionAssociation : IStaffSectionAssociation, IHasETag, IStaffSectionAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StaffSectionAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _sectionReferenceExplicitlyAssigned;
        private Section.SectionReference _sectionReference;
        private Section.SectionReference ImplicitSectionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_sectionReference == null && !_sectionReferenceExplicitlyAssigned)
                    _sectionReference = new Section.SectionReference();

                return _sectionReference;
            }
        }

        [DataMember(Name="sectionReference")][NaturalKeyMember]
        public Section.SectionReference SectionReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSectionReference != null
                    && (_sectionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference;

                return null;
            }
            set 
            { 
                _sectionReferenceExplicitlyAssigned = true;
                _sectionReference = value;
            }
        }
        private bool _staffReferenceExplicitlyAssigned;
        private Staff.StaffReference _staffReference;
        private Staff.StaffReference ImplicitStaffReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_staffReference == null && !_staffReferenceExplicitlyAssigned)
                    _staffReference = new Staff.StaffReference();

                return _staffReference;
            }
        }

        [DataMember(Name="staffReference")][NaturalKeyMember]
        public Staff.StaffReference StaffReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStaffReference != null
                    && (_staffReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference;

                return null;
            }
            set 
            { 
                _staffReferenceExplicitlyAssigned = true;
                _staffReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStaffSectionAssociation.ClassPeriodName
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.ClassPeriodName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.ClassPeriodName = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStaffSectionAssociation.ClassroomIdentificationCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.ClassroomIdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.ClassroomIdentificationCode = value;
            }
        }

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStaffSectionAssociation.LocalCourseCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.LocalCourseCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.LocalCourseCode = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStaffSectionAssociation.SchoolId
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short IStaffSectionAssociation.SchoolYear
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStaffSectionAssociation.SequenceOfCourse
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SequenceOfCourse;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SequenceOfCourse = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStaffSectionAssociation.StaffUniqueId
        {
            get
            {
                if (ImplicitStaffReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference.StaffUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Staff
                _staffReferenceExplicitlyAssigned = false;
                ImplicitStaffReference.StaffUniqueId = value;
            }
        }

        /// <summary>
        /// The term for the Session during the school year.
        /// </summary>

        // IS in a reference (StaffSectionAssociation.TermDescriptorId), IS a lookup column 
        string IStaffSectionAssociation.TermDescriptor
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitSectionReference.TermDescriptor = value;
            }
        }

        /// <summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStaffSectionAssociation.UniqueSectionCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.UniqueSectionCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.UniqueSectionCode = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IStaffSectionAssociation).ClassPeriodName != null) 
                    hash = hash * 23 + (this as IStaffSectionAssociation).ClassPeriodName.GetHashCode();
 
                //Referenced Property
                if ((this as IStaffSectionAssociation).ClassroomIdentificationCode != null) 
                    hash = hash * 23 + (this as IStaffSectionAssociation).ClassroomIdentificationCode.GetHashCode();
 
                //Referenced Property
                if ((this as IStaffSectionAssociation).LocalCourseCode != null) 
                    hash = hash * 23 + (this as IStaffSectionAssociation).LocalCourseCode.GetHashCode();
 
                //Referenced Property
                if ((this as IStaffSectionAssociation).SchoolId != null) 
                    hash = hash * 23 + (this as IStaffSectionAssociation).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as IStaffSectionAssociation).SchoolYear != null) 
                    hash = hash * 23 + (this as IStaffSectionAssociation).SchoolYear.GetHashCode();
 
                //Referenced Property
                if ((this as IStaffSectionAssociation).SequenceOfCourse != null) 
                    hash = hash * 23 + (this as IStaffSectionAssociation).SequenceOfCourse.GetHashCode();
 
                //Referenced Property
                if ((this as IStaffSectionAssociation).StaffUniqueId != null) 
                    hash = hash * 23 + (this as IStaffSectionAssociation).StaffUniqueId.GetHashCode();
 
                //Unified Type Property
                if ((this as IStaffSectionAssociation).TermDescriptor != null) 
                    hash = hash * 23 + (this as IStaffSectionAssociation).TermDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IStaffSectionAssociation).UniqueSectionCode != null) 
                    hash = hash * 23 + (this as IStaffSectionAssociation).UniqueSectionCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Month, day, and year of a teacher's assignment to the Section. If blank, defaults to the first day of the first grading period for the Section.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The type of position the Staff member holds in the specific class/section; for example:          Teacher of Record, Assistant Teacher, Support Teacher, Substitute Teacher...
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="classroomPositionDescriptor")]
        public string ClassroomPositionDescriptor { get; set; }

        /// <summary>
        /// Month, day, and year of the last day of a staff member's assignment to the Section.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for this section being taught.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// Indicates the percentage of the total scheduled course time, academic standards, and/or learning activities delivered in this section by this staff member. A teacher of record designation may be based solely or partially on this contribution percentage.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="percentageContribution")][Range(typeof(decimal), "-9.9999", "9.9999")]
        public decimal? PercentageContribution { get; set; }

        /// <summary>
        /// Indicates that the entire section is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="teacherStudentDataLinkExclusion")]
        public bool? TeacherStudentDataLinkExclusion { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStaffSectionAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStaffSectionAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStaffSectionAssociationSynchronizationSourceSupport.IsBeginDateSupported                        { get { return true; } set { } }
 
        bool IStaffSectionAssociationSynchronizationSourceSupport.IsClassroomPositionDescriptorSupported      { get { return true; } set { } }
 
        bool IStaffSectionAssociationSynchronizationSourceSupport.IsEndDateSupported                          { get { return true; } set { } }
 
        bool IStaffSectionAssociationSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported           { get { return true; } set { } }
 
        bool IStaffSectionAssociationSynchronizationSourceSupport.IsPercentageContributionSupported           { get { return true; } set { } }
 
        bool IStaffSectionAssociationSynchronizationSourceSupport.IsTeacherStudentDataLinkExclusionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StateAbbreviationType

namespace EdFi.Ods.Api.Models.Resources.V2.StateAbbreviationType
{
    /// <summary>
    /// A class which represents the edfi.StateAbbreviationType table of the StateAbbreviationType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StateAbbreviationType : IStateAbbreviationType, IHasETag, IStateAbbreviationTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StateAbbreviationType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for StateAbbreviation
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="stateAbbreviationTypeId"), NaturalKeyMember]
        public int StateAbbreviationTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStateAbbreviationType).StateAbbreviationTypeId != null) 
                    hash = hash * 23 + (this as IStateAbbreviationType).StateAbbreviationTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the StateAbbreviation type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the StateAbbreviation type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStateAbbreviationType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStateAbbreviationType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStateAbbreviationTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IStateAbbreviationTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IStateAbbreviationTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StateEducationAgency

namespace EdFi.Ods.Api.Models.Resources.V2.StateEducationAgency
{
    /// <summary>
    /// Represents a reference to the StateEducationAgency resource.
    /// </summary>
    [DataContract]
    public class StateEducationAgencyReference
    {
        [DataMember(Name="stateEducationAgencyId"), NaturalKeyMember]
        public int StateEducationAgencyId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StateEducationAgency",
                            Href = "/stateEducationAgencies"
                                    + "?stateEducationAgencyId=" + StateEducationAgencyId            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return StateEducationAgencyId != default(int)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StateEducationAgency table of the StateEducationAgency aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StateEducationAgency : IStateEducationAgency, EdFi.Ods.Entities.Common.IEducationOrganization, IHasETag, IStateEducationAgencySynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StateEducationAgency()
        {
            StateEducationAgencyAccountabilities = new List<StateEducationAgencyAccountability>();

            // Inherited lists
            EducationOrganizationAddresses = new List<EducationOrganization.EducationOrganizationAddress>();
            EducationOrganizationCategories = new List<EducationOrganization.EducationOrganizationCategory>();
            EducationOrganizationIdentificationCodes = new List<EducationOrganization.EducationOrganizationIdentificationCode>();
            EducationOrganizationInstitutionTelephones = new List<EducationOrganization.EducationOrganizationInstitutionTelephone>();
            EducationOrganizationInternationalAddresses = new List<EducationOrganization.EducationOrganizationInternationalAddress>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the StateEducationAgency resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to a state education agency by the StateEducationAgency (SEA).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="stateEducationAgencyId"), NaturalKeyMember]
        public int StateEducationAgencyId { get; set; }

        int IEducationOrganization.EducationOrganizationId
        {
            get { return StateEducationAgencyId; }
            set { StateEducationAgencyId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IStateEducationAgency).StateEducationAgencyId != null) 
                    hash = hash * 23 + (this as IStateEducationAgency).StateEducationAgencyId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The full, legally accepted name of the institution.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfInstitution")]
        public string NameOfInstitution { get; set; }

        /// <summary>
        /// The current operational status of the EducationOrganization (e.g., active, inactive).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="operationalStatusType")]
        public string OperationalStatusType { get; set; }

        /// <summary>
        /// A short name for the institution.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortNameOfInstitution")]
        public string ShortNameOfInstitution { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization by the StateEducationAgency (SEA).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="stateOrganizationId")]
        public string StateOrganizationId { get; set; }

        /// <summary>
        /// The public web site address (URL) for the EducationOrganization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="webSite")]
        public string WebSite { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        private IList<EducationOrganization.EducationOrganizationAddress> _educationOrganizationAddresses;
        private IList<IEducationOrganizationAddress> _educationOrganizationAddressesCovariant;

        [DataMember(Name="addresses")]
        public IList<EducationOrganization.EducationOrganizationAddress> EducationOrganizationAddresses 
        {
            get { return _educationOrganizationAddresses; }
            set 
            {
                _educationOrganizationAddresses = value;
                _educationOrganizationAddressesCovariant = new CovariantIListAdapter<IEducationOrganizationAddress, EducationOrganization.EducationOrganizationAddress>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationAddress> IEducationOrganization.EducationOrganizationAddresses
        {
            get { return _educationOrganizationAddressesCovariant; }
            set { EducationOrganizationAddresses = new List<EducationOrganization.EducationOrganizationAddress>(value.Cast<EducationOrganization.EducationOrganizationAddress>()); }
        }
        private IList<EducationOrganization.EducationOrganizationCategory> _educationOrganizationCategories;
        private IList<IEducationOrganizationCategory> _educationOrganizationCategoriesCovariant;

        [DataMember(Name="educationOrganizationCategories")]
        public IList<EducationOrganization.EducationOrganizationCategory> EducationOrganizationCategories 
        {
            get { return _educationOrganizationCategories; }
            set 
            {
                _educationOrganizationCategories = value;
                _educationOrganizationCategoriesCovariant = new CovariantIListAdapter<IEducationOrganizationCategory, EducationOrganization.EducationOrganizationCategory>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationCategory> IEducationOrganization.EducationOrganizationCategories
        {
            get { return _educationOrganizationCategoriesCovariant; }
            set { EducationOrganizationCategories = new List<EducationOrganization.EducationOrganizationCategory>(value.Cast<EducationOrganization.EducationOrganizationCategory>()); }
        }
        private IList<EducationOrganization.EducationOrganizationIdentificationCode> _educationOrganizationIdentificationCodes;
        private IList<IEducationOrganizationIdentificationCode> _educationOrganizationIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes")]
        public IList<EducationOrganization.EducationOrganizationIdentificationCode> EducationOrganizationIdentificationCodes 
        {
            get { return _educationOrganizationIdentificationCodes; }
            set 
            {
                _educationOrganizationIdentificationCodes = value;
                _educationOrganizationIdentificationCodesCovariant = new CovariantIListAdapter<IEducationOrganizationIdentificationCode, EducationOrganization.EducationOrganizationIdentificationCode>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationIdentificationCode> IEducationOrganization.EducationOrganizationIdentificationCodes
        {
            get { return _educationOrganizationIdentificationCodesCovariant; }
            set { EducationOrganizationIdentificationCodes = new List<EducationOrganization.EducationOrganizationIdentificationCode>(value.Cast<EducationOrganization.EducationOrganizationIdentificationCode>()); }
        }
        private IList<EducationOrganization.EducationOrganizationInstitutionTelephone> _educationOrganizationInstitutionTelephones;
        private IList<IEducationOrganizationInstitutionTelephone> _educationOrganizationInstitutionTelephonesCovariant;

        [DataMember(Name="institutionTelephones")]
        public IList<EducationOrganization.EducationOrganizationInstitutionTelephone> EducationOrganizationInstitutionTelephones 
        {
            get { return _educationOrganizationInstitutionTelephones; }
            set 
            {
                _educationOrganizationInstitutionTelephones = value;
                _educationOrganizationInstitutionTelephonesCovariant = new CovariantIListAdapter<IEducationOrganizationInstitutionTelephone, EducationOrganization.EducationOrganizationInstitutionTelephone>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationInstitutionTelephone> IEducationOrganization.EducationOrganizationInstitutionTelephones
        {
            get { return _educationOrganizationInstitutionTelephonesCovariant; }
            set { EducationOrganizationInstitutionTelephones = new List<EducationOrganization.EducationOrganizationInstitutionTelephone>(value.Cast<EducationOrganization.EducationOrganizationInstitutionTelephone>()); }
        }
        private IList<EducationOrganization.EducationOrganizationInternationalAddress> _educationOrganizationInternationalAddresses;
        private IList<IEducationOrganizationInternationalAddress> _educationOrganizationInternationalAddressesCovariant;

        [DataMember(Name="internationalAddresses")]
        public IList<EducationOrganization.EducationOrganizationInternationalAddress> EducationOrganizationInternationalAddresses 
        {
            get { return _educationOrganizationInternationalAddresses; }
            set 
            {
                _educationOrganizationInternationalAddresses = value;
                _educationOrganizationInternationalAddressesCovariant = new CovariantIListAdapter<IEducationOrganizationInternationalAddress, EducationOrganization.EducationOrganizationInternationalAddress>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IEducationOrganizationInternationalAddress> IEducationOrganization.EducationOrganizationInternationalAddresses
        {
            get { return _educationOrganizationInternationalAddressesCovariant; }
            set { EducationOrganizationInternationalAddresses = new List<EducationOrganization.EducationOrganizationInternationalAddress>(value.Cast<EducationOrganization.EducationOrganizationInternationalAddress>()); }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<StateEducationAgencyAccountability> _stateEducationAgencyAccountabilities;
        private IList<IStateEducationAgencyAccountability> _stateEducationAgencyAccountabilitiesCovariant;

        [DataMember(Name="accountabilities")]
        public IList<StateEducationAgencyAccountability> StateEducationAgencyAccountabilities 
        { 
            get { return _stateEducationAgencyAccountabilities; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StateEducationAgencyAccountability>(value,
                    (s, e) => ((IStateEducationAgencyAccountability)e.Item).StateEducationAgency = this);
                _stateEducationAgencyAccountabilities = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStateEducationAgencyAccountability, StateEducationAgencyAccountability>(value);
                covariantList.ItemAdded += (s, e) => ((IStateEducationAgencyAccountability)e.Item).StateEducationAgency = this;
                _stateEducationAgencyAccountabilitiesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStateEducationAgencyAccountability> IStateEducationAgency.StateEducationAgencyAccountabilities
        {
            get { return _stateEducationAgencyAccountabilitiesCovariant; }
            set { StateEducationAgencyAccountabilities = new List<StateEducationAgencyAccountability>(value.Cast<StateEducationAgencyAccountability>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            // _educationOrganizationAddresses
            // _educationOrganizationCategories
            // _educationOrganizationIdentificationCodes
            // _educationOrganizationInstitutionTelephones
            // _educationOrganizationInternationalAddresses
            if (_stateEducationAgencyAccountabilities != null) foreach (var item in _stateEducationAgencyAccountabilities)
            {
                item.StateEducationAgency = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStateEducationAgency)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStateEducationAgency) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStateEducationAgencySynchronizationSourceSupport.IsEducationOrganizationAddressesSupported               { get { return true; } set { } }
 
        bool IStateEducationAgencySynchronizationSourceSupport.IsEducationOrganizationCategoriesSupported              { get { return true; } set { } }
 
        bool IStateEducationAgencySynchronizationSourceSupport.IsEducationOrganizationIdentificationCodesSupported     { get { return true; } set { } }
 
        bool IStateEducationAgencySynchronizationSourceSupport.IsEducationOrganizationInstitutionTelephonesSupported   { get { return true; } set { } }
 
        bool IStateEducationAgencySynchronizationSourceSupport.IsEducationOrganizationInternationalAddressesSupported  { get { return true; } set { } }
 
        bool IStateEducationAgencySynchronizationSourceSupport.IsNameOfInstitutionSupported                            { get { return true; } set { } }
 
        bool IStateEducationAgencySynchronizationSourceSupport.IsOperationalStatusTypeSupported                        { get { return true; } set { } }
 
        bool IStateEducationAgencySynchronizationSourceSupport.IsShortNameOfInstitutionSupported                       { get { return true; } set { } }
 
        bool IStateEducationAgencySynchronizationSourceSupport.IsStateEducationAgencyAccountabilitiesSupported         { get { return true; } set { } }
 
        bool IStateEducationAgencySynchronizationSourceSupport.IsStateOrganizationIdSupported                          { get { return true; } set { } }
 
        bool IStateEducationAgencySynchronizationSourceSupport.IsWebSiteSupported                                      { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IEducationOrganizationAddress, bool> IStateEducationAgencySynchronizationSourceSupport.IsEducationOrganizationAddressIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationCategory, bool> IStateEducationAgencySynchronizationSourceSupport.IsEducationOrganizationCategoryIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationIdentificationCode, bool> IStateEducationAgencySynchronizationSourceSupport.IsEducationOrganizationIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationInstitutionTelephone, bool> IStateEducationAgencySynchronizationSourceSupport.IsEducationOrganizationInstitutionTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IEducationOrganizationInternationalAddress, bool> IStateEducationAgencySynchronizationSourceSupport.IsEducationOrganizationInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStateEducationAgencyAccountability, bool> IStateEducationAgencySynchronizationSourceSupport.IsStateEducationAgencyAccountabilityIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StateEducationAgencyAccountability table of the StateEducationAgency aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StateEducationAgencyAccountability : IStateEducationAgencyAccountability, IStateEducationAgencyAccountabilitySynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _schoolYearTypeReferenceExplicitlyAssigned;
        private SchoolYearType.SchoolYearTypeReference _schoolYearTypeReference;
        private SchoolYearType.SchoolYearTypeReference ImplicitSchoolYearTypeReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolYearTypeReference == null && !_schoolYearTypeReferenceExplicitlyAssigned)
                    _schoolYearTypeReference = new SchoolYearType.SchoolYearTypeReference();

                return _schoolYearTypeReference;
            }
        }

        [DataMember(Name="schoolYearTypeReference")][NaturalKeyMember]
        public SchoolYearType.SchoolYearTypeReference SchoolYearTypeReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolYearTypeReference != null
                    && (_schoolYearTypeReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference;

                return null;
            }
            set 
            { 
                _schoolYearTypeReferenceExplicitlyAssigned = true;
                _schoolYearTypeReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStateEducationAgency _stateEducationAgency;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStateEducationAgency IStateEducationAgencyAccountability.StateEducationAgency
        {
            get { return _stateEducationAgency; }
            set { _stateEducationAgency = value; }
        }

        internal IStateEducationAgency StateEducationAgency
        {
            set { _stateEducationAgency = value; }
        }

        /// <summary>
        /// The school year for which the accountability is reported.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short IStateEducationAgencyAccountability.SchoolYear
        {
            get
            {
                if (ImplicitSchoolYearTypeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SchoolYearType
                _schoolYearTypeReferenceExplicitlyAssigned = false;
                ImplicitSchoolYearTypeReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_stateEducationAgency != null) 
                    hash = hash * 23 + _stateEducationAgency.GetHashCode();
 
                //Referenced Property
                if ((this as IStateEducationAgencyAccountability).SchoolYear != null) 
                    hash = hash * 23 + (this as IStateEducationAgencyAccountability).SchoolYear.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication of whether CTE concentrators are included in the state's computation of its graduation rate.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="cteGraduationRateInclusion")]
        public bool? CTEGraduationRateInclusion { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStateEducationAgencyAccountability)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStateEducationAgencyAccountability) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStateEducationAgencyAccountabilitySynchronizationSourceSupport.IsCTEGraduationRateInclusionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: Student

namespace EdFi.Ods.Api.Models.Resources.V2.Student
{
    /// <summary>
    /// Represents a reference to the Student resource.
    /// </summary>
    [DataContract]
    public class StudentReference
    {
        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "Student",
                            Href = "/students"
                                    + "?studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Student table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class Student : IStudent, IHasETag, IStudentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Student()
        {
            StudentAddresses = new List<StudentAddress>();
            StudentCharacteristics = new List<StudentCharacteristic>();
            StudentCohortYears = new List<StudentCohortYear>();
            StudentDisabilities = new List<StudentDisability>();
            StudentElectronicMails = new List<StudentElectronicMail>();
            StudentIdentificationCodes = new List<StudentIdentificationCode>();
            StudentIdentificationDocuments = new List<StudentIdentificationDocument>();
            StudentIndicators = new List<StudentIndicator>();
            StudentInternationalAddresses = new List<StudentInternationalAddress>();
            StudentLanguages = new List<StudentLanguage>();
            StudentOtherNames = new List<StudentOtherName>();
            StudentProgramParticipations = new List<StudentProgramParticipation>();
            StudentRaces = new List<StudentRace>();
            StudentTelephones = new List<StudentTelephone>();
            StudentVisas = new List<StudentVisa>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Student resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="studentUniqueId"), NaturalKeyMember, UniqueId]
        public string StudentUniqueId { get; set; }
 
        string IIdentifiablePerson.UniqueId { get { return StudentUniqueId; } }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Property
                if ((this as IStudent).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudent).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The city the student was born in.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthCity")]
        public string BirthCity { get; set; }

        /// <summary>
        /// The country in which an individual is born.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="birthCountryDescriptor")]
        public string BirthCountryDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")]
        public DateTime BirthDate { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the Province or jurisdiction in which an individual is born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthInternationalProvince")]
        public string BirthInternationalProvince { get; set; }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="birthStateAbbreviationType")]
        public string BirthStateAbbreviationType { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusType")]
        public string CitizenshipStatusType { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the date the student entered the U.S.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="dateEnteredUS")]
        public DateTime? DateEnteredUS { get; set; }

        /// <summary>
        /// Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="displacementStatus")]
        public string DisplacementStatus { get; set; }

        /// <summary>
        /// An indication of inadequate financial condition of an individual's family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="economicDisadvantaged")]
        public bool? EconomicDisadvantaged { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="limitedEnglishProficiencyDescriptor")]
        public string LimitedEnglishProficiencyDescriptor { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="multipleBirthStatus")]
        public bool? MultipleBirthStatus { get; set; }

        /// <summary>
        /// Previous definition of Ethnicity combining Hispanic/Latino and race:          1 - American Indian or Alaskan Native          2 - Asian or Pacific Islander          3 - Black, not of Hispanic origin          4 - Hispanic          5 - White, not of Hispanic origin.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="oldEthnicityType")]
        public string OldEthnicityType { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// Locator for the student photo.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="profileThumbnail")]
        public string ProfileThumbnail { get; set; }

        /// <summary>
        /// An indication of a student's level of eligibility for breakfast, lunch, snack, supper, and milk programs.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="schoolFoodServicesEligibilityDescriptor")]
        public string SchoolFoodServicesEligibilityDescriptor { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexType")]
        public string SexType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// learningStyle
        /// </summary> 
        [DataMember(Name = "learningStyle")]
        public StudentLearningStyle StudentLearningStyle { get; set; }

        IStudentLearningStyle IStudent.StudentLearningStyle
        {
            get { return StudentLearningStyle; }
            set { StudentLearningStyle = (StudentLearningStyle) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<StudentAddress> _studentAddresses;
        private IList<IStudentAddress> _studentAddressesCovariant;

        [DataMember(Name="addresses")]
        public IList<StudentAddress> StudentAddresses 
        { 
            get { return _studentAddresses; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentAddress>(value,
                    (s, e) => ((IStudentAddress)e.Item).Student = this);
                _studentAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentAddress, StudentAddress>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentAddress)e.Item).Student = this;
                _studentAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentAddress> IStudent.StudentAddresses
        {
            get { return _studentAddressesCovariant; }
            set { StudentAddresses = new List<StudentAddress>(value.Cast<StudentAddress>()); }
        }

        private IList<StudentCharacteristic> _studentCharacteristics;
        private IList<IStudentCharacteristic> _studentCharacteristicsCovariant;

        [DataMember(Name="characteristics")]
        public IList<StudentCharacteristic> StudentCharacteristics 
        { 
            get { return _studentCharacteristics; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentCharacteristic>(value,
                    (s, e) => ((IStudentCharacteristic)e.Item).Student = this);
                _studentCharacteristics = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentCharacteristic, StudentCharacteristic>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentCharacteristic)e.Item).Student = this;
                _studentCharacteristicsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentCharacteristic> IStudent.StudentCharacteristics
        {
            get { return _studentCharacteristicsCovariant; }
            set { StudentCharacteristics = new List<StudentCharacteristic>(value.Cast<StudentCharacteristic>()); }
        }

        private IList<StudentCohortYear> _studentCohortYears;
        private IList<IStudentCohortYear> _studentCohortYearsCovariant;

        [DataMember(Name="cohortYears")]
        public IList<StudentCohortYear> StudentCohortYears 
        { 
            get { return _studentCohortYears; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentCohortYear>(value,
                    (s, e) => ((IStudentCohortYear)e.Item).Student = this);
                _studentCohortYears = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentCohortYear, StudentCohortYear>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentCohortYear)e.Item).Student = this;
                _studentCohortYearsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentCohortYear> IStudent.StudentCohortYears
        {
            get { return _studentCohortYearsCovariant; }
            set { StudentCohortYears = new List<StudentCohortYear>(value.Cast<StudentCohortYear>()); }
        }

        private IList<StudentDisability> _studentDisabilities;
        private IList<IStudentDisability> _studentDisabilitiesCovariant;

        [DataMember(Name="disabilities")]
        public IList<StudentDisability> StudentDisabilities 
        { 
            get { return _studentDisabilities; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentDisability>(value,
                    (s, e) => ((IStudentDisability)e.Item).Student = this);
                _studentDisabilities = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentDisability, StudentDisability>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentDisability)e.Item).Student = this;
                _studentDisabilitiesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentDisability> IStudent.StudentDisabilities
        {
            get { return _studentDisabilitiesCovariant; }
            set { StudentDisabilities = new List<StudentDisability>(value.Cast<StudentDisability>()); }
        }

        private IList<StudentElectronicMail> _studentElectronicMails;
        private IList<IStudentElectronicMail> _studentElectronicMailsCovariant;

        [DataMember(Name="electronicMails")]
        public IList<StudentElectronicMail> StudentElectronicMails 
        { 
            get { return _studentElectronicMails; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentElectronicMail>(value,
                    (s, e) => ((IStudentElectronicMail)e.Item).Student = this);
                _studentElectronicMails = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentElectronicMail, StudentElectronicMail>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentElectronicMail)e.Item).Student = this;
                _studentElectronicMailsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentElectronicMail> IStudent.StudentElectronicMails
        {
            get { return _studentElectronicMailsCovariant; }
            set { StudentElectronicMails = new List<StudentElectronicMail>(value.Cast<StudentElectronicMail>()); }
        }

        private IList<StudentIdentificationCode> _studentIdentificationCodes;
        private IList<IStudentIdentificationCode> _studentIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes")]
        public IList<StudentIdentificationCode> StudentIdentificationCodes 
        { 
            get { return _studentIdentificationCodes; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentIdentificationCode>(value,
                    (s, e) => ((IStudentIdentificationCode)e.Item).Student = this);
                _studentIdentificationCodes = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentIdentificationCode, StudentIdentificationCode>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentIdentificationCode)e.Item).Student = this;
                _studentIdentificationCodesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentIdentificationCode> IStudent.StudentIdentificationCodes
        {
            get { return _studentIdentificationCodesCovariant; }
            set { StudentIdentificationCodes = new List<StudentIdentificationCode>(value.Cast<StudentIdentificationCode>()); }
        }

        private IList<StudentIdentificationDocument> _studentIdentificationDocuments;
        private IList<IStudentIdentificationDocument> _studentIdentificationDocumentsCovariant;

        [DataMember(Name="identificationDocuments")]
        public IList<StudentIdentificationDocument> StudentIdentificationDocuments 
        { 
            get { return _studentIdentificationDocuments; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentIdentificationDocument>(value,
                    (s, e) => ((IStudentIdentificationDocument)e.Item).Student = this);
                _studentIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentIdentificationDocument, StudentIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentIdentificationDocument)e.Item).Student = this;
                _studentIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentIdentificationDocument> IStudent.StudentIdentificationDocuments
        {
            get { return _studentIdentificationDocumentsCovariant; }
            set { StudentIdentificationDocuments = new List<StudentIdentificationDocument>(value.Cast<StudentIdentificationDocument>()); }
        }

        private IList<StudentIndicator> _studentIndicators;
        private IList<IStudentIndicator> _studentIndicatorsCovariant;

        [DataMember(Name="indicators")]
        public IList<StudentIndicator> StudentIndicators 
        { 
            get { return _studentIndicators; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentIndicator>(value,
                    (s, e) => ((IStudentIndicator)e.Item).Student = this);
                _studentIndicators = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentIndicator, StudentIndicator>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentIndicator)e.Item).Student = this;
                _studentIndicatorsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentIndicator> IStudent.StudentIndicators
        {
            get { return _studentIndicatorsCovariant; }
            set { StudentIndicators = new List<StudentIndicator>(value.Cast<StudentIndicator>()); }
        }

        private IList<StudentInternationalAddress> _studentInternationalAddresses;
        private IList<IStudentInternationalAddress> _studentInternationalAddressesCovariant;

        [DataMember(Name="internationalAddresses")]
        public IList<StudentInternationalAddress> StudentInternationalAddresses 
        { 
            get { return _studentInternationalAddresses; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentInternationalAddress>(value,
                    (s, e) => ((IStudentInternationalAddress)e.Item).Student = this);
                _studentInternationalAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentInternationalAddress, StudentInternationalAddress>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentInternationalAddress)e.Item).Student = this;
                _studentInternationalAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentInternationalAddress> IStudent.StudentInternationalAddresses
        {
            get { return _studentInternationalAddressesCovariant; }
            set { StudentInternationalAddresses = new List<StudentInternationalAddress>(value.Cast<StudentInternationalAddress>()); }
        }

        private IList<StudentLanguage> _studentLanguages;
        private IList<IStudentLanguage> _studentLanguagesCovariant;

        [DataMember(Name="languages")]
        public IList<StudentLanguage> StudentLanguages 
        { 
            get { return _studentLanguages; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentLanguage>(value,
                    (s, e) => ((IStudentLanguage)e.Item).Student = this);
                _studentLanguages = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentLanguage, StudentLanguage>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentLanguage)e.Item).Student = this;
                _studentLanguagesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentLanguage> IStudent.StudentLanguages
        {
            get { return _studentLanguagesCovariant; }
            set { StudentLanguages = new List<StudentLanguage>(value.Cast<StudentLanguage>()); }
        }

        private IList<StudentOtherName> _studentOtherNames;
        private IList<IStudentOtherName> _studentOtherNamesCovariant;

        [DataMember(Name="otherNames")]
        public IList<StudentOtherName> StudentOtherNames 
        { 
            get { return _studentOtherNames; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentOtherName>(value,
                    (s, e) => ((IStudentOtherName)e.Item).Student = this);
                _studentOtherNames = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentOtherName, StudentOtherName>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentOtherName)e.Item).Student = this;
                _studentOtherNamesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentOtherName> IStudent.StudentOtherNames
        {
            get { return _studentOtherNamesCovariant; }
            set { StudentOtherNames = new List<StudentOtherName>(value.Cast<StudentOtherName>()); }
        }

        private IList<StudentProgramParticipation> _studentProgramParticipations;
        private IList<IStudentProgramParticipation> _studentProgramParticipationsCovariant;

        [DataMember(Name="programParticipations")]
        public IList<StudentProgramParticipation> StudentProgramParticipations 
        { 
            get { return _studentProgramParticipations; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentProgramParticipation>(value,
                    (s, e) => ((IStudentProgramParticipation)e.Item).Student = this);
                _studentProgramParticipations = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentProgramParticipation, StudentProgramParticipation>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentProgramParticipation)e.Item).Student = this;
                _studentProgramParticipationsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentProgramParticipation> IStudent.StudentProgramParticipations
        {
            get { return _studentProgramParticipationsCovariant; }
            set { StudentProgramParticipations = new List<StudentProgramParticipation>(value.Cast<StudentProgramParticipation>()); }
        }

        private IList<StudentRace> _studentRaces;
        private IList<IStudentRace> _studentRacesCovariant;

        [DataMember(Name="races")]
        public IList<StudentRace> StudentRaces 
        { 
            get { return _studentRaces; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentRace>(value,
                    (s, e) => ((IStudentRace)e.Item).Student = this);
                _studentRaces = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentRace, StudentRace>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentRace)e.Item).Student = this;
                _studentRacesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentRace> IStudent.StudentRaces
        {
            get { return _studentRacesCovariant; }
            set { StudentRaces = new List<StudentRace>(value.Cast<StudentRace>()); }
        }

        private IList<StudentTelephone> _studentTelephones;
        private IList<IStudentTelephone> _studentTelephonesCovariant;

        [DataMember(Name="telephones")]
        public IList<StudentTelephone> StudentTelephones 
        { 
            get { return _studentTelephones; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentTelephone>(value,
                    (s, e) => ((IStudentTelephone)e.Item).Student = this);
                _studentTelephones = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentTelephone, StudentTelephone>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentTelephone)e.Item).Student = this;
                _studentTelephonesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentTelephone> IStudent.StudentTelephones
        {
            get { return _studentTelephonesCovariant; }
            set { StudentTelephones = new List<StudentTelephone>(value.Cast<StudentTelephone>()); }
        }

        private IList<StudentVisa> _studentVisas;
        private IList<IStudentVisa> _studentVisasCovariant;

        [DataMember(Name="visas")]
        public IList<StudentVisa> StudentVisas 
        { 
            get { return _studentVisas; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentVisa>(value,
                    (s, e) => ((IStudentVisa)e.Item).Student = this);
                _studentVisas = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentVisa, StudentVisa>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentVisa)e.Item).Student = this;
                _studentVisasCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentVisa> IStudent.StudentVisas
        {
            get { return _studentVisasCovariant; }
            set { StudentVisas = new List<StudentVisa>(value.Cast<StudentVisa>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_studentAddresses != null) foreach (var item in _studentAddresses)
            {
                item.Student = this;
            }
            
            if (_studentCharacteristics != null) foreach (var item in _studentCharacteristics)
            {
                item.Student = this;
            }
            
            if (_studentCohortYears != null) foreach (var item in _studentCohortYears)
            {
                item.Student = this;
            }
            
            if (_studentDisabilities != null) foreach (var item in _studentDisabilities)
            {
                item.Student = this;
            }
            
            if (_studentElectronicMails != null) foreach (var item in _studentElectronicMails)
            {
                item.Student = this;
            }
            
            if (_studentIdentificationCodes != null) foreach (var item in _studentIdentificationCodes)
            {
                item.Student = this;
            }
            
            if (_studentIdentificationDocuments != null) foreach (var item in _studentIdentificationDocuments)
            {
                item.Student = this;
            }
            
            if (_studentIndicators != null) foreach (var item in _studentIndicators)
            {
                item.Student = this;
            }
            
            if (_studentInternationalAddresses != null) foreach (var item in _studentInternationalAddresses)
            {
                item.Student = this;
            }
            
            if (_studentLanguages != null) foreach (var item in _studentLanguages)
            {
                item.Student = this;
            }
            
            if (_studentOtherNames != null) foreach (var item in _studentOtherNames)
            {
                item.Student = this;
            }
            
            if (_studentProgramParticipations != null) foreach (var item in _studentProgramParticipations)
            {
                item.Student = this;
            }
            
            if (_studentRaces != null) foreach (var item in _studentRaces)
            {
                item.Student = this;
            }
            
            if (_studentTelephones != null) foreach (var item in _studentTelephones)
            {
                item.Student = this;
            }
            
            if (_studentVisas != null) foreach (var item in _studentVisas)
            {
                item.Student = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudent) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentSynchronizationSourceSupport.IsBirthCitySupported                                { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsBirthCountryDescriptorSupported                   { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsBirthDateSupported                                { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsBirthInternationalProvinceSupported               { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsBirthStateAbbreviationTypeSupported               { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsCitizenshipStatusTypeSupported                    { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsDateEnteredUSSupported                            { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsDisplacementStatusSupported                       { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsEconomicDisadvantagedSupported                    { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsFirstNameSupported                                { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                     { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                  { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsLastSurnameSupported                              { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsLimitedEnglishProficiencyDescriptorSupported      { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsLoginIdSupported                                  { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsMaidenNameSupported                               { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsMiddleNameSupported                               { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsMultipleBirthStatusSupported                      { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsOldEthnicityTypeSupported                         { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                      { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsProfileThumbnailSupported                         { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsSchoolFoodServicesEligibilityDescriptorSupported  { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsSexTypeSupported                                  { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsStudentAddressesSupported                         { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsStudentCharacteristicsSupported                   { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsStudentCohortYearsSupported                       { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsStudentDisabilitiesSupported                      { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsStudentElectronicMailsSupported                   { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsStudentIdentificationCodesSupported               { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsStudentIdentificationDocumentsSupported           { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsStudentIndicatorsSupported                        { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsStudentInternationalAddressesSupported            { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsStudentLanguagesSupported                         { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsStudentLearningStyleSupported                     { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsStudentOtherNamesSupported                        { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsStudentProgramParticipationsSupported             { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsStudentRacesSupported                             { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsStudentTelephonesSupported                        { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsStudentUniqueIdSupported                          { get { return true; } set { } }
 
        bool IStudentSynchronizationSourceSupport.IsStudentVisasSupported                             { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IStudentAddress, bool> IStudentSynchronizationSourceSupport.IsStudentAddressIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentCharacteristic, bool> IStudentSynchronizationSourceSupport.IsStudentCharacteristicIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentCohortYear, bool> IStudentSynchronizationSourceSupport.IsStudentCohortYearIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentDisability, bool> IStudentSynchronizationSourceSupport.IsStudentDisabilityIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentElectronicMail, bool> IStudentSynchronizationSourceSupport.IsStudentElectronicMailIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentIdentificationCode, bool> IStudentSynchronizationSourceSupport.IsStudentIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentIdentificationDocument, bool> IStudentSynchronizationSourceSupport.IsStudentIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentIndicator, bool> IStudentSynchronizationSourceSupport.IsStudentIndicatorIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentInternationalAddress, bool> IStudentSynchronizationSourceSupport.IsStudentInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentLanguage, bool> IStudentSynchronizationSourceSupport.IsStudentLanguageIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentOtherName, bool> IStudentSynchronizationSourceSupport.IsStudentOtherNameIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentProgramParticipation, bool> IStudentSynchronizationSourceSupport.IsStudentProgramParticipationIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentRace, bool> IStudentSynchronizationSourceSupport.IsStudentRaceIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentTelephone, bool> IStudentSynchronizationSourceSupport.IsStudentTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentVisa, bool> IStudentSynchronizationSourceSupport.IsStudentVisaIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentAddress table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentAddress : IStudentAddress, IStudentAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudent _student;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudent IStudentAddress.Student
        {
            get { return _student; }
            set { _student = value; }
        }

        internal IStudent Student
        {
            set { _student = value; }
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressType"), NaturalKeyMember]
        public string AddressType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null) 
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as IStudentAddress).AddressType != null) 
                    hash = hash * 23 + (this as IStudentAddress).AddressType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                         'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationType")]
        public string StateAbbreviationType { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName")]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentAddress)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentAddress) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported  { get { return true; } set { } }
 
        bool IStudentAddressSynchronizationSourceSupport.IsBeginDateSupported                 { get { return true; } set { } }
 
        bool IStudentAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported        { get { return true; } set { } }
 
        bool IStudentAddressSynchronizationSourceSupport.IsCitySupported                      { get { return true; } set { } }
 
        bool IStudentAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported            { get { return true; } set { } }
 
        bool IStudentAddressSynchronizationSourceSupport.IsEndDateSupported                   { get { return true; } set { } }
 
        bool IStudentAddressSynchronizationSourceSupport.IsLatitudeSupported                  { get { return true; } set { } }
 
        bool IStudentAddressSynchronizationSourceSupport.IsLongitudeSupported                 { get { return true; } set { } }
 
        bool IStudentAddressSynchronizationSourceSupport.IsNameOfCountySupported              { get { return true; } set { } }
 
        bool IStudentAddressSynchronizationSourceSupport.IsPostalCodeSupported                { get { return true; } set { } }
 
        bool IStudentAddressSynchronizationSourceSupport.IsStateAbbreviationTypeSupported     { get { return true; } set { } }
 
        bool IStudentAddressSynchronizationSourceSupport.IsStreetNumberNameSupported          { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentCharacteristic table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentCharacteristic : IStudentCharacteristic, IStudentCharacteristicSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudent _student;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudent IStudentCharacteristic.Student
        {
            get { return _student; }
            set { _student = value; }
        }

        internal IStudent Student
        {
            set { _student = value; }
        }

        /// <summary>
        /// The characteristic designated for the Student.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="descriptor"), NaturalKeyMember]
        public string StudentCharacteristicDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null) 
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as IStudentCharacteristic).StudentCharacteristicDescriptor != null) 
                    hash = hash * 23 + (this as IStudentCharacteristic).StudentCharacteristicDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date the characteristic was designated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The person, organization, or department that designated the characteristic.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="designatedBy")]
        public string DesignatedBy { get; set; }

        /// <summary>
        /// The date the characteristic was removed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentCharacteristic)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentCharacteristic) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentCharacteristicSynchronizationSourceSupport.IsBeginDateSupported     { get { return true; } set { } }
 
        bool IStudentCharacteristicSynchronizationSourceSupport.IsDesignatedBySupported  { get { return true; } set { } }
 
        bool IStudentCharacteristicSynchronizationSourceSupport.IsEndDateSupported       { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentCohortYear table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentCohortYear : IStudentCohortYear, IStudentCohortYearSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _schoolYearTypeReferenceExplicitlyAssigned;
        private SchoolYearType.SchoolYearTypeReference _schoolYearTypeReference;
        private SchoolYearType.SchoolYearTypeReference ImplicitSchoolYearTypeReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolYearTypeReference == null && !_schoolYearTypeReferenceExplicitlyAssigned)
                    _schoolYearTypeReference = new SchoolYearType.SchoolYearTypeReference();

                return _schoolYearTypeReference;
            }
        }

        [DataMember(Name="schoolYearTypeReference")][NaturalKeyMember]
        public SchoolYearType.SchoolYearTypeReference SchoolYearTypeReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolYearTypeReference != null
                    && (_schoolYearTypeReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference;

                return null;
            }
            set 
            { 
                _schoolYearTypeReferenceExplicitlyAssigned = true;
                _schoolYearTypeReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudent _student;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudent IStudentCohortYear.Student
        {
            get { return _student; }
            set { _student = value; }
        }

        internal IStudent Student
        {
            set { _student = value; }
        }

        /// <summary>
        /// The type of cohort year (9th grade, graduation).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="cohortYearType"), NaturalKeyMember]
        public string CohortYearType { get; set; }

        /// <summary>
        /// The value of the  school year for the Cohort.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short IStudentCohortYear.SchoolYear
        {
            get
            {
                if (ImplicitSchoolYearTypeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SchoolYearType
                _schoolYearTypeReferenceExplicitlyAssigned = false;
                ImplicitSchoolYearTypeReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null) 
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as IStudentCohortYear).CohortYearType != null) 
                    hash = hash * 23 + (this as IStudentCohortYear).CohortYearType.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentCohortYear).SchoolYear != null) 
                    hash = hash * 23 + (this as IStudentCohortYear).SchoolYear.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentCohortYear)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentCohortYear) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentDisability table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentDisability : IStudentDisability, IStudentDisabilitySynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudent _student;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudent IStudentDisability.Student
        {
            get { return _student; }
            set { _student = value; }
        }

        internal IStudent Student
        {
            set { _student = value; }
        }

        /// <summary>
        /// A disability category that describes a child's impairment.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="disabilityDescriptor"), NaturalKeyMember]
        public string DisabilityDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null) 
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as IStudentDisability).DisabilityDescriptor != null) 
                    hash = hash * 23 + (this as IStudentDisability).DisabilityDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The source that provided the disability determination.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="disabilityDeterminationSourceType")]
        public string DisabilityDeterminationSourceType { get; set; }

        /// <summary>
        /// A description of the disability diagnosis.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="disabilityDiagnosis")]
        public string DisabilityDiagnosis { get; set; }

        /// <summary>
        /// The order by severity of student's disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfDisability")]
        public int? OrderOfDisability { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentDisability)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentDisability) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentDisabilitySynchronizationSourceSupport.IsDisabilityDeterminationSourceTypeSupported  { get { return true; } set { } }
 
        bool IStudentDisabilitySynchronizationSourceSupport.IsDisabilityDiagnosisSupported                { get { return true; } set { } }
 
        bool IStudentDisabilitySynchronizationSourceSupport.IsOrderOfDisabilitySupported                  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentElectronicMail table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentElectronicMail : IStudentElectronicMail, IStudentElectronicMailSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudent _student;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudent IStudentElectronicMail.Student
        {
            get { return _student; }
            set { _student = value; }
        }

        internal IStudent Student
        {
            set { _student = value; }
        }

        /// <summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="electronicMailType"), NaturalKeyMember]
        public string ElectronicMailType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null) 
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as IStudentElectronicMail).ElectronicMailType != null) 
                    hash = hash * 23 + (this as IStudentElectronicMail).ElectronicMailType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="electronicMailAddress")]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primaryEmailAddressIndicator")]
        public bool? PrimaryEmailAddressIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentElectronicMail)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentElectronicMail) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentElectronicMailSynchronizationSourceSupport.IsElectronicMailAddressSupported         { get { return true; } set { } }
 
        bool IStudentElectronicMailSynchronizationSourceSupport.IsPrimaryEmailAddressIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentIdentificationCode table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentIdentificationCode : IStudentIdentificationCode, IStudentIdentificationCodeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudent _student;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudent IStudentIdentificationCode.Student
        {
            get { return _student; }
            set { _student = value; }
        }

        internal IStudent Student
        {
            set { _student = value; }
        }

        /// <summary>
        /// The organization code or name assigning the StudentIdentificationCode.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assigningOrganizationIdentificationCode"), NaturalKeyMember]
        public string AssigningOrganizationIdentificationCode { get; set; }

        /// <summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="studentIdentificationSystemDescriptor"), NaturalKeyMember]
        public string StudentIdentificationSystemDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null) 
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as IStudentIdentificationCode).AssigningOrganizationIdentificationCode != null) 
                    hash = hash * 23 + (this as IStudentIdentificationCode).AssigningOrganizationIdentificationCode.GetHashCode();
 
                // Standard Property
                if ((this as IStudentIdentificationCode).StudentIdentificationSystemDescriptor != null) 
                    hash = hash * 23 + (this as IStudentIdentificationCode).StudentIdentificationSystemDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode")]
        public string IdentificationCode { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentIdentificationCode) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentIdentificationCodeSynchronizationSourceSupport.IsIdentificationCodeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentIdentificationDocument table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentIdentificationDocument : IStudentIdentificationDocument, IStudentIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudent _student;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudent IStudentIdentificationDocument.Student
        {
            get { return _student; }
            set { _student = value; }
        }

        internal IStudent Student
        {
            set { _student = value; }
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseType"), NaturalKeyMember]
        public string IdentificationDocumentUseType { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationType"), NaturalKeyMember]
        public string PersonalInformationVerificationType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null) 
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as IStudentIdentificationDocument).IdentificationDocumentUseType != null) 
                    hash = hash * 23 + (this as IStudentIdentificationDocument).IdentificationDocumentUseType.GetHashCode();
 
                // Standard Property
                if ((this as IStudentIdentificationDocument).PersonalInformationVerificationType != null) 
                    hash = hash * 23 + (this as IStudentIdentificationDocument).PersonalInformationVerificationType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentIdentificationDocument) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
 
        bool IStudentIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
 
        bool IStudentIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
 
        bool IStudentIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
 
        bool IStudentIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentIndicator table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentIndicator : IStudentIndicator, IStudentIndicatorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudent _student;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudent IStudentIndicator.Student
        {
            get { return _student; }
            set { _student = value; }
        }

        internal IStudent Student
        {
            set { _student = value; }
        }

        /// <summary>
        /// The name of the indicator or metric.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="indicatorName"), NaturalKeyMember]
        public string IndicatorName { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null) 
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as IStudentIndicator).IndicatorName != null) 
                    hash = hash * 23 + (this as IStudentIndicator).IndicatorName.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date when the indicator was assigned or computed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The person, organization, or department that designated the program association.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="designatedBy")]
        public string DesignatedBy { get; set; }

        /// <summary>
        /// The date the indicator or metric was sunset or removed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The value of the indicator or metric.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="indicator")]
        public string Indicator { get; set; }

        /// <summary>
        /// The name for a group of indicators.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="indicatorGroup")]
        public string IndicatorGroup { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentIndicator)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentIndicator) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentIndicatorSynchronizationSourceSupport.IsBeginDateSupported       { get { return true; } set { } }
 
        bool IStudentIndicatorSynchronizationSourceSupport.IsDesignatedBySupported    { get { return true; } set { } }
 
        bool IStudentIndicatorSynchronizationSourceSupport.IsEndDateSupported         { get { return true; } set { } }
 
        bool IStudentIndicatorSynchronizationSourceSupport.IsIndicatorSupported       { get { return true; } set { } }
 
        bool IStudentIndicatorSynchronizationSourceSupport.IsIndicatorGroupSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentInternationalAddress table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentInternationalAddress : IStudentInternationalAddress, IStudentInternationalAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudent _student;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudent IStudentInternationalAddress.Student
        {
            get { return _student; }
            set { _student = value; }
        }

        internal IStudent Student
        {
            set { _student = value; }
        }

        /// <summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressType"), NaturalKeyMember]
        public string AddressType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null) 
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as IStudentInternationalAddress).AddressType != null) 
                    hash = hash * 23 + (this as IStudentInternationalAddress).AddressType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The first line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine1")]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine2")]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine3")]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The fourth line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine4")]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The name of the country.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="countryDescriptor")]
        public string CountryDescriptor { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentInternationalAddress)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentInternationalAddress) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentInternationalAddressSynchronizationSourceSupport.IsAddressLine1Supported       { get { return true; } set { } }
 
        bool IStudentInternationalAddressSynchronizationSourceSupport.IsAddressLine2Supported       { get { return true; } set { } }
 
        bool IStudentInternationalAddressSynchronizationSourceSupport.IsAddressLine3Supported       { get { return true; } set { } }
 
        bool IStudentInternationalAddressSynchronizationSourceSupport.IsAddressLine4Supported       { get { return true; } set { } }
 
        bool IStudentInternationalAddressSynchronizationSourceSupport.IsBeginDateSupported          { get { return true; } set { } }
 
        bool IStudentInternationalAddressSynchronizationSourceSupport.IsCountryDescriptorSupported  { get { return true; } set { } }
 
        bool IStudentInternationalAddressSynchronizationSourceSupport.IsEndDateSupported            { get { return true; } set { } }
 
        bool IStudentInternationalAddressSynchronizationSourceSupport.IsLatitudeSupported           { get { return true; } set { } }
 
        bool IStudentInternationalAddressSynchronizationSourceSupport.IsLongitudeSupported          { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentLanguage table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentLanguage : IStudentLanguage, IStudentLanguageSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StudentLanguage()
        {
            StudentLanguageUses = new List<StudentLanguageUse>();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudent _student;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudent IStudentLanguage.Student
        {
            get { return _student; }
            set { _student = value; }
        }

        internal IStudent Student
        {
            set { _student = value; }
        }

        /// <summary>
        /// A specification of which written or spoken communication is being used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageDescriptor"), NaturalKeyMember]
        public string LanguageDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null) 
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as IStudentLanguage).LanguageDescriptor != null) 
                    hash = hash * 23 + (this as IStudentLanguage).LanguageDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<StudentLanguageUse> _studentLanguageUses;
        private IList<IStudentLanguageUse> _studentLanguageUsesCovariant;

        [DataMember(Name="uses")]
        public IList<StudentLanguageUse> StudentLanguageUses 
        { 
            get { return _studentLanguageUses; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentLanguageUse>(value,
                    (s, e) => ((IStudentLanguageUse)e.Item).StudentLanguage = this);
                _studentLanguageUses = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentLanguageUse, StudentLanguageUse>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentLanguageUse)e.Item).StudentLanguage = this;
                _studentLanguageUsesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentLanguageUse> IStudentLanguage.StudentLanguageUses
        {
            get { return _studentLanguageUsesCovariant; }
            set { StudentLanguageUses = new List<StudentLanguageUse>(value.Cast<StudentLanguageUse>()); }
        }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_studentLanguageUses != null) foreach (var item in _studentLanguageUses)
            {
                item.StudentLanguage = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentLanguage)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentLanguage) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentLanguageSynchronizationSourceSupport.IsStudentLanguageUsesSupported  { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IStudentLanguageUse, bool> IStudentLanguageSynchronizationSourceSupport.IsStudentLanguageUseIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentLanguageUse table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentLanguageUse : IStudentLanguageUse, IStudentLanguageUseSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentLanguage _studentLanguage;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentLanguage IStudentLanguageUse.StudentLanguage
        {
            get { return _studentLanguage; }
            set { _studentLanguage = value; }
        }

        internal IStudentLanguage StudentLanguage
        {
            set { _studentLanguage = value; }
        }

        /// <summary>
        /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageUseType"), NaturalKeyMember]
        public string LanguageUseType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentLanguage != null) 
                    hash = hash * 23 + _studentLanguage.GetHashCode();
 
                // Standard Property
                if ((this as IStudentLanguageUse).LanguageUseType != null) 
                    hash = hash * 23 + (this as IStudentLanguageUse).LanguageUseType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentLanguageUse)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentLanguageUse) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentLearningStyle table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentLearningStyle : IStudentLearningStyle, IStudentLearningStyleSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudent _student;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudent IStudentLearningStyle.Student
        {
            get { return _student; }
            set { _student = value; }
        }

        internal IStudent Student
        {
            set { _student = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null) 
                    hash = hash * 23 + _student.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The student's relative preference expressed as a percent to auditory learning.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="auditoryLearning")][Range(typeof(decimal), "-9.9999", "9.9999")]
        public decimal AuditoryLearning { get; set; }

        /// <summary>
        /// The student's relative preference expressed as a percent to kinesthetic or tactile learning.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="tactileLearning")][Range(typeof(decimal), "-9.9999", "9.9999")]
        public decimal TactileLearning { get; set; }

        /// <summary>
        /// The student's relative preference expressed as a percent to visual learning.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="visualLearning")][Range(typeof(decimal), "-9.9999", "9.9999")]
        public decimal VisualLearning { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentLearningStyle)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentLearningStyle) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentLearningStyleSynchronizationSourceSupport.IsAuditoryLearningSupported  { get { return true; } set { } }
 
        bool IStudentLearningStyleSynchronizationSourceSupport.IsTactileLearningSupported   { get { return true; } set { } }
 
        bool IStudentLearningStyleSynchronizationSourceSupport.IsVisualLearningSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentOtherName table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentOtherName : IStudentOtherName, IStudentOtherNameSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudent _student;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudent IStudentOtherName.Student
        {
            get { return _student; }
            set { _student = value; }
        }

        internal IStudent Student
        {
            set { _student = value; }
        }

        /// <summary>
        /// The types of alternate names for a person.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="otherNameType"), NaturalKeyMember]
        public string OtherNameType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null) 
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as IStudentOtherName).OtherNameType != null) 
                    hash = hash * 23 + (this as IStudentOtherName).OtherNameType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentOtherName)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentOtherName) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentOtherNameSynchronizationSourceSupport.IsFirstNameSupported             { get { return true; } set { } }
 
        bool IStudentOtherNameSynchronizationSourceSupport.IsGenerationCodeSuffixSupported  { get { return true; } set { } }
 
        bool IStudentOtherNameSynchronizationSourceSupport.IsLastSurnameSupported           { get { return true; } set { } }
 
        bool IStudentOtherNameSynchronizationSourceSupport.IsMiddleNameSupported            { get { return true; } set { } }
 
        bool IStudentOtherNameSynchronizationSourceSupport.IsPersonalTitlePrefixSupported   { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentProgramParticipation table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentProgramParticipation : IStudentProgramParticipation, IStudentProgramParticipationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StudentProgramParticipation()
        {
            StudentProgramParticipationProgramCharacteristics = new List<StudentProgramParticipationProgramCharacteristic>();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudent _student;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudent IStudentProgramParticipation.Student
        {
            get { return _student; }
            set { _student = value; }
        }

        internal IStudent Student
        {
            set { _student = value; }
        }

        /// <summary>
        /// The type of program.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="programType"), NaturalKeyMember]
        public string ProgramType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null) 
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as IStudentProgramParticipation).ProgramType != null) 
                    hash = hash * 23 + (this as IStudentProgramParticipation).ProgramType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date the Student was associated with the Program or service.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The person, organization, or department that designated the program association.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="designatedBy")]
        public string DesignatedBy { get; set; }

        /// <summary>
        /// The date the Program participation ended.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<StudentProgramParticipationProgramCharacteristic> _studentProgramParticipationProgramCharacteristics;
        private IList<IStudentProgramParticipationProgramCharacteristic> _studentProgramParticipationProgramCharacteristicsCovariant;

        [DataMember(Name="programCharacteristics")]
        public IList<StudentProgramParticipationProgramCharacteristic> StudentProgramParticipationProgramCharacteristics 
        { 
            get { return _studentProgramParticipationProgramCharacteristics; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentProgramParticipationProgramCharacteristic>(value,
                    (s, e) => ((IStudentProgramParticipationProgramCharacteristic)e.Item).StudentProgramParticipation = this);
                _studentProgramParticipationProgramCharacteristics = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentProgramParticipationProgramCharacteristic, StudentProgramParticipationProgramCharacteristic>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentProgramParticipationProgramCharacteristic)e.Item).StudentProgramParticipation = this;
                _studentProgramParticipationProgramCharacteristicsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentProgramParticipationProgramCharacteristic> IStudentProgramParticipation.StudentProgramParticipationProgramCharacteristics
        {
            get { return _studentProgramParticipationProgramCharacteristicsCovariant; }
            set { StudentProgramParticipationProgramCharacteristics = new List<StudentProgramParticipationProgramCharacteristic>(value.Cast<StudentProgramParticipationProgramCharacteristic>()); }
        }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_studentProgramParticipationProgramCharacteristics != null) foreach (var item in _studentProgramParticipationProgramCharacteristics)
            {
                item.StudentProgramParticipation = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentProgramParticipation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentProgramParticipation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentProgramParticipationSynchronizationSourceSupport.IsBeginDateSupported                                          { get { return true; } set { } }
 
        bool IStudentProgramParticipationSynchronizationSourceSupport.IsDesignatedBySupported                                       { get { return true; } set { } }
 
        bool IStudentProgramParticipationSynchronizationSourceSupport.IsEndDateSupported                                            { get { return true; } set { } }
 
        bool IStudentProgramParticipationSynchronizationSourceSupport.IsStudentProgramParticipationProgramCharacteristicsSupported  { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IStudentProgramParticipationProgramCharacteristic, bool> IStudentProgramParticipationSynchronizationSourceSupport.IsStudentProgramParticipationProgramCharacteristicIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentProgramParticipationProgramCharacteristic table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentProgramParticipationProgramCharacteristic : IStudentProgramParticipationProgramCharacteristic, IStudentProgramParticipationProgramCharacteristicSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentProgramParticipation _studentProgramParticipation;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentProgramParticipation IStudentProgramParticipationProgramCharacteristic.StudentProgramParticipation
        {
            get { return _studentProgramParticipation; }
            set { _studentProgramParticipation = value; }
        }

        internal IStudentProgramParticipation StudentProgramParticipation
        {
            set { _studentProgramParticipation = value; }
        }

        /// <summary>
        /// Reflects important characteristics of the Program, such as categories or particular indications.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="programCharacteristicDescriptor"), NaturalKeyMember]
        public string ProgramCharacteristicDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentProgramParticipation != null) 
                    hash = hash * 23 + _studentProgramParticipation.GetHashCode();
 
                // Standard Property
                if ((this as IStudentProgramParticipationProgramCharacteristic).ProgramCharacteristicDescriptor != null) 
                    hash = hash * 23 + (this as IStudentProgramParticipationProgramCharacteristic).ProgramCharacteristicDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentProgramParticipationProgramCharacteristic)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentProgramParticipationProgramCharacteristic) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentRace table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentRace : IStudentRace, IStudentRaceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudent _student;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudent IStudentRace.Student
        {
            get { return _student; }
            set { _student = value; }
        }

        internal IStudent Student
        {
            set { _student = value; }
        }

        /// <summary>
        /// The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="raceType"), NaturalKeyMember]
        public string RaceType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null) 
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as IStudentRace).RaceType != null) 
                    hash = hash * 23 + (this as IStudentRace).RaceType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentRace)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentRace) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentTelephone table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentTelephone : IStudentTelephone, IStudentTelephoneSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudent _student;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudent IStudentTelephone.Student
        {
            get { return _student; }
            set { _student = value; }
        }

        internal IStudent Student
        {
            set { _student = value; }
        }

        /// <summary>
        /// The type of communication number listed for an individual or organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="telephoneNumberType"), NaturalKeyMember]
        public string TelephoneNumberType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null) 
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as IStudentTelephone).TelephoneNumberType != null) 
                    hash = hash * 23 + (this as IStudentTelephone).TelephoneNumberType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfPriority")]
        public int? OrderOfPriority { get; set; }

        /// <summary>
        /// The telephone number including the area code, and extension, if applicable.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="telephoneNumber")]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="textMessageCapabilityIndicator")]
        public bool? TextMessageCapabilityIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentTelephone)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentTelephone) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported                 { get { return true; } set { } }
 
        bool IStudentTelephoneSynchronizationSourceSupport.IsTelephoneNumberSupported                 { get { return true; } set { } }
 
        bool IStudentTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentVisa table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentVisa : IStudentVisa, IStudentVisaSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudent _student;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudent IStudentVisa.Student
        {
            get { return _student; }
            set { _student = value; }
        }

        internal IStudent Student
        {
            set { _student = value; }
        }

        /// <summary>
        /// An indicator of a non-US citizen's Visa type.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="visaType"), NaturalKeyMember]
        public string VisaType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null) 
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as IStudentVisa).VisaType != null) 
                    hash = hash * 23 + (this as IStudentVisa).VisaType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentVisa)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentVisa) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentAcademicRecord

namespace EdFi.Ods.Api.Models.Resources.V2.StudentAcademicRecord
{
    /// <summary>
    /// Represents a reference to the StudentAcademicRecord resource.
    /// </summary>
    [DataContract]
    public class StudentAcademicRecordReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentAcademicRecord",
                            Href = "/studentAcademicRecords"
                                    + "?educationOrganizationId=" + EducationOrganizationId            
                                    + "&schoolYear=" + SchoolYear            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                                    + "&termDescriptor=" + WebUtility.UrlEncode(TermDescriptor)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int)
                && SchoolYear != default(short)
                && StudentUniqueId != default(string)
                && TermDescriptor != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentAcademicRecord table of the StudentAcademicRecord aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentAcademicRecord : IStudentAcademicRecord, IHasETag, IStudentAcademicRecordSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StudentAcademicRecord()
        {
            StudentAcademicRecordAcademicHonors = new List<StudentAcademicRecordAcademicHonor>();
            StudentAcademicRecordDiplomas = new List<StudentAcademicRecordDiploma>();
            StudentAcademicRecordRecognitions = new List<StudentAcademicRecordRecognition>();
            StudentAcademicRecordReportCards = new List<StudentAcademicRecordReportCard>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the StudentAcademicRecord resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        private bool _schoolYearTypeReferenceExplicitlyAssigned;
        private SchoolYearType.SchoolYearTypeReference _schoolYearTypeReference;
        private SchoolYearType.SchoolYearTypeReference ImplicitSchoolYearTypeReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolYearTypeReference == null && !_schoolYearTypeReferenceExplicitlyAssigned)
                    _schoolYearTypeReference = new SchoolYearType.SchoolYearTypeReference();

                return _schoolYearTypeReference;
            }
        }

        [DataMember(Name="schoolYearTypeReference")][NaturalKeyMember]
        public SchoolYearType.SchoolYearTypeReference SchoolYearTypeReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolYearTypeReference != null
                    && (_schoolYearTypeReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference;

                return null;
            }
            set 
            { 
                _schoolYearTypeReferenceExplicitlyAssigned = true;
                _schoolYearTypeReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentAcademicRecord.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short IStudentAcademicRecord.SchoolYear
        {
            get
            {
                if (ImplicitSchoolYearTypeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SchoolYearType
                _schoolYearTypeReferenceExplicitlyAssigned = false;
                ImplicitSchoolYearTypeReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentAcademicRecord.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IStudentAcademicRecord).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStudentAcademicRecord).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentAcademicRecord).SchoolYear != null) 
                    hash = hash * 23 + (this as IStudentAcademicRecord).SchoolYear.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentAcademicRecord).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentAcademicRecord).StudentUniqueId.GetHashCode();
 
                // Standard Property
                if ((this as IStudentAcademicRecord).TermDescriptor != null) 
                    hash = hash * 23 + (this as IStudentAcademicRecord).TermDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="cumulativeAttemptedCreditConversion")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? CumulativeAttemptedCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="cumulativeAttemptedCredits")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? CumulativeAttemptedCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="cumulativeAttemptedCreditType")]
        public string CumulativeAttemptedCreditType { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="cumulativeEarnedCreditConversion")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? CumulativeEarnedCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="cumulativeEarnedCredits")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? CumulativeEarnedCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="cumulativeEarnedCreditType")]
        public string CumulativeEarnedCreditType { get; set; }

        /// <summary>
        /// A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="cumulativeGradePointAverage")][Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public decimal? CumulativeGradePointAverage { get; set; }

        /// <summary>
        /// The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="cumulativeGradePointsEarned")][Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public decimal? CumulativeGradePointsEarned { get; set; }

        /// <summary>
        /// The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student's Grade Point Average (A=4, B=3, C=2, D=1 in a four-point system) or letter equivalents for percentage grades (90-100%=A, 80-90%=B, etc.)
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="gradeValueQualifier")]
        public string GradeValueQualifier { get; set; }

        /// <summary>
        /// The month and year the student is projected to graduate.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="projectedGraduationDate")]
        public DateTime? ProjectedGraduationDate { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="sessionAttemptedCreditConversion")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? SessionAttemptedCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="sessionAttemptedCredits")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? SessionAttemptedCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sessionAttemptedCreditType")]
        public string SessionAttemptedCreditType { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="sessionEarnedCreditConversion")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? SessionEarnedCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="sessionEarnedCredits")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? SessionEarnedCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sessionEarnedCreditType")]
        public string SessionEarnedCreditType { get; set; }

        /// <summary>
        /// The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="sessionGradePointAverage")][Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public decimal? SessionGradePointAverage { get; set; }

        /// <summary>
        /// The number of grade points an individual earned for this session.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="sessionGradePointsEarned")][Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public decimal? SessionGradePointsEarned { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// classRanking
        /// </summary> 
        [DataMember(Name = "classRanking")]
        public StudentAcademicRecordClassRanking StudentAcademicRecordClassRanking { get; set; }

        IStudentAcademicRecordClassRanking IStudentAcademicRecord.StudentAcademicRecordClassRanking
        {
            get { return StudentAcademicRecordClassRanking; }
            set { StudentAcademicRecordClassRanking = (StudentAcademicRecordClassRanking) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<StudentAcademicRecordAcademicHonor> _studentAcademicRecordAcademicHonors;
        private IList<IStudentAcademicRecordAcademicHonor> _studentAcademicRecordAcademicHonorsCovariant;

        [DataMember(Name="academicHonors")]
        public IList<StudentAcademicRecordAcademicHonor> StudentAcademicRecordAcademicHonors 
        { 
            get { return _studentAcademicRecordAcademicHonors; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentAcademicRecordAcademicHonor>(value,
                    (s, e) => ((IStudentAcademicRecordAcademicHonor)e.Item).StudentAcademicRecord = this);
                _studentAcademicRecordAcademicHonors = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentAcademicRecordAcademicHonor, StudentAcademicRecordAcademicHonor>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentAcademicRecordAcademicHonor)e.Item).StudentAcademicRecord = this;
                _studentAcademicRecordAcademicHonorsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentAcademicRecordAcademicHonor> IStudentAcademicRecord.StudentAcademicRecordAcademicHonors
        {
            get { return _studentAcademicRecordAcademicHonorsCovariant; }
            set { StudentAcademicRecordAcademicHonors = new List<StudentAcademicRecordAcademicHonor>(value.Cast<StudentAcademicRecordAcademicHonor>()); }
        }

        private IList<StudentAcademicRecordDiploma> _studentAcademicRecordDiplomas;
        private IList<IStudentAcademicRecordDiploma> _studentAcademicRecordDiplomasCovariant;

        [DataMember(Name="diplomas")]
        public IList<StudentAcademicRecordDiploma> StudentAcademicRecordDiplomas 
        { 
            get { return _studentAcademicRecordDiplomas; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentAcademicRecordDiploma>(value,
                    (s, e) => ((IStudentAcademicRecordDiploma)e.Item).StudentAcademicRecord = this);
                _studentAcademicRecordDiplomas = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentAcademicRecordDiploma, StudentAcademicRecordDiploma>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentAcademicRecordDiploma)e.Item).StudentAcademicRecord = this;
                _studentAcademicRecordDiplomasCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentAcademicRecordDiploma> IStudentAcademicRecord.StudentAcademicRecordDiplomas
        {
            get { return _studentAcademicRecordDiplomasCovariant; }
            set { StudentAcademicRecordDiplomas = new List<StudentAcademicRecordDiploma>(value.Cast<StudentAcademicRecordDiploma>()); }
        }

        private IList<StudentAcademicRecordRecognition> _studentAcademicRecordRecognitions;
        private IList<IStudentAcademicRecordRecognition> _studentAcademicRecordRecognitionsCovariant;

        [DataMember(Name="recognitions")]
        public IList<StudentAcademicRecordRecognition> StudentAcademicRecordRecognitions 
        { 
            get { return _studentAcademicRecordRecognitions; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentAcademicRecordRecognition>(value,
                    (s, e) => ((IStudentAcademicRecordRecognition)e.Item).StudentAcademicRecord = this);
                _studentAcademicRecordRecognitions = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentAcademicRecordRecognition, StudentAcademicRecordRecognition>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentAcademicRecordRecognition)e.Item).StudentAcademicRecord = this;
                _studentAcademicRecordRecognitionsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentAcademicRecordRecognition> IStudentAcademicRecord.StudentAcademicRecordRecognitions
        {
            get { return _studentAcademicRecordRecognitionsCovariant; }
            set { StudentAcademicRecordRecognitions = new List<StudentAcademicRecordRecognition>(value.Cast<StudentAcademicRecordRecognition>()); }
        }

        private IList<StudentAcademicRecordReportCard> _studentAcademicRecordReportCards;
        private IList<IStudentAcademicRecordReportCard> _studentAcademicRecordReportCardsCovariant;

        [DataMember(Name="reportCards")]
        public IList<StudentAcademicRecordReportCard> StudentAcademicRecordReportCards 
        { 
            get { return _studentAcademicRecordReportCards; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentAcademicRecordReportCard>(value,
                    (s, e) => ((IStudentAcademicRecordReportCard)e.Item).StudentAcademicRecord = this);
                _studentAcademicRecordReportCards = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentAcademicRecordReportCard, StudentAcademicRecordReportCard>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentAcademicRecordReportCard)e.Item).StudentAcademicRecord = this;
                _studentAcademicRecordReportCardsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentAcademicRecordReportCard> IStudentAcademicRecord.StudentAcademicRecordReportCards
        {
            get { return _studentAcademicRecordReportCardsCovariant; }
            set { StudentAcademicRecordReportCards = new List<StudentAcademicRecordReportCard>(value.Cast<StudentAcademicRecordReportCard>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_studentAcademicRecordAcademicHonors != null) foreach (var item in _studentAcademicRecordAcademicHonors)
            {
                item.StudentAcademicRecord = this;
            }
            
            if (_studentAcademicRecordDiplomas != null) foreach (var item in _studentAcademicRecordDiplomas)
            {
                item.StudentAcademicRecord = this;
            }
            
            if (_studentAcademicRecordRecognitions != null) foreach (var item in _studentAcademicRecordRecognitions)
            {
                item.StudentAcademicRecord = this;
            }
            
            if (_studentAcademicRecordReportCards != null) foreach (var item in _studentAcademicRecordReportCards)
            {
                item.StudentAcademicRecord = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentAcademicRecord)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentAcademicRecord) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsCumulativeAttemptedCreditConversionSupported  { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsCumulativeAttemptedCreditsSupported           { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsCumulativeAttemptedCreditTypeSupported        { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsCumulativeEarnedCreditConversionSupported     { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsCumulativeEarnedCreditsSupported              { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsCumulativeEarnedCreditTypeSupported           { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsCumulativeGradePointAverageSupported          { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsCumulativeGradePointsEarnedSupported          { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsGradeValueQualifierSupported                  { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsProjectedGraduationDateSupported              { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsSessionAttemptedCreditConversionSupported     { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsSessionAttemptedCreditsSupported              { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsSessionAttemptedCreditTypeSupported           { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsSessionEarnedCreditConversionSupported        { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsSessionEarnedCreditsSupported                 { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsSessionEarnedCreditTypeSupported              { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsSessionGradePointAverageSupported             { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsSessionGradePointsEarnedSupported             { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsStudentAcademicRecordAcademicHonorsSupported  { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsStudentAcademicRecordClassRankingSupported    { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsStudentAcademicRecordDiplomasSupported        { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsStudentAcademicRecordRecognitionsSupported    { get { return true; } set { } }
 
        bool IStudentAcademicRecordSynchronizationSourceSupport.IsStudentAcademicRecordReportCardsSupported     { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IStudentAcademicRecordAcademicHonor, bool> IStudentAcademicRecordSynchronizationSourceSupport.IsStudentAcademicRecordAcademicHonorIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentAcademicRecordDiploma, bool> IStudentAcademicRecordSynchronizationSourceSupport.IsStudentAcademicRecordDiplomaIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentAcademicRecordRecognition, bool> IStudentAcademicRecordSynchronizationSourceSupport.IsStudentAcademicRecordRecognitionIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentAcademicRecordReportCard, bool> IStudentAcademicRecordSynchronizationSourceSupport.IsStudentAcademicRecordReportCardIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentAcademicRecordAcademicHonor table of the StudentAcademicRecord aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentAcademicRecordAcademicHonor : IStudentAcademicRecordAcademicHonor, IStudentAcademicRecordAcademicHonorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentAcademicRecord _studentAcademicRecord;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentAcademicRecord IStudentAcademicRecordAcademicHonor.StudentAcademicRecord
        {
            get { return _studentAcademicRecord; }
            set { _studentAcademicRecord = value; }
        }

        internal IStudentAcademicRecord StudentAcademicRecord
        {
            set { _studentAcademicRecord = value; }
        }

        /// <summary>
        /// A designation of the type of academic distinctions earned by or awarded to the student.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="academicHonorCategoryType"), NaturalKeyMember]
        public string AcademicHonorCategoryType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentAcademicRecord != null) 
                    hash = hash * 23 + _studentAcademicRecord.GetHashCode();
 
                // Standard Property
                if ((this as IStudentAcademicRecordAcademicHonor).AcademicHonorCategoryType != null) 
                    hash = hash * 23 + (this as IStudentAcademicRecordAcademicHonor).AcademicHonorCategoryType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The category of achievement attributed to the learner.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="achievementCategoryDescriptor")]
        public string AchievementCategoryDescriptor { get; set; }

        /// <summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementCategorySystem")]
        public string AchievementCategorySystem { get; set; }

        /// <summary>
        /// The title assigned to the achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementTitle")]
        public string AchievementTitle { get; set; }

        /// <summary>
        /// The criteria for competency-based completion of the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteria")]
        public string Criteria { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteriaURL")]
        public string CriteriaURL { get; set; }

        /// <summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evidenceStatement")]
        public string EvidenceStatement { get; set; }

        /// <summary>
        /// The date the honor was awarded or earned.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="honorAwardDate")]
        public DateTime? HonorAwardDate { get; set; }

        /// <summary>
        /// Date on which the award expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="honorAwardExpiresDate")]
        public DateTime? HonorAwardExpiresDate { get; set; }

        /// <summary>
        /// A description of the type of academic distinctions earned by or awarded to the individual.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="honorDescription")]
        public string HonorDescription { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="imageURL")]
        public string ImageURL { get; set; }

        /// <summary>
        /// The name of the agent, entity, or institution issuing the element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerOriginURL")]
        public string IssuerOriginURL { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentAcademicRecordAcademicHonor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentAcademicRecordAcademicHonor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentAcademicRecordAcademicHonorSynchronizationSourceSupport.IsAchievementCategoryDescriptorSupported  { get { return true; } set { } }
 
        bool IStudentAcademicRecordAcademicHonorSynchronizationSourceSupport.IsAchievementCategorySystemSupported      { get { return true; } set { } }
 
        bool IStudentAcademicRecordAcademicHonorSynchronizationSourceSupport.IsAchievementTitleSupported               { get { return true; } set { } }
 
        bool IStudentAcademicRecordAcademicHonorSynchronizationSourceSupport.IsCriteriaSupported                       { get { return true; } set { } }
 
        bool IStudentAcademicRecordAcademicHonorSynchronizationSourceSupport.IsCriteriaURLSupported                    { get { return true; } set { } }
 
        bool IStudentAcademicRecordAcademicHonorSynchronizationSourceSupport.IsEvidenceStatementSupported              { get { return true; } set { } }
 
        bool IStudentAcademicRecordAcademicHonorSynchronizationSourceSupport.IsHonorAwardDateSupported                 { get { return true; } set { } }
 
        bool IStudentAcademicRecordAcademicHonorSynchronizationSourceSupport.IsHonorAwardExpiresDateSupported          { get { return true; } set { } }
 
        bool IStudentAcademicRecordAcademicHonorSynchronizationSourceSupport.IsHonorDescriptionSupported               { get { return true; } set { } }
 
        bool IStudentAcademicRecordAcademicHonorSynchronizationSourceSupport.IsImageURLSupported                       { get { return true; } set { } }
 
        bool IStudentAcademicRecordAcademicHonorSynchronizationSourceSupport.IsIssuerNameSupported                     { get { return true; } set { } }
 
        bool IStudentAcademicRecordAcademicHonorSynchronizationSourceSupport.IsIssuerOriginURLSupported                { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentAcademicRecordClassRanking table of the StudentAcademicRecord aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentAcademicRecordClassRanking : IStudentAcademicRecordClassRanking, IStudentAcademicRecordClassRankingSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentAcademicRecord _studentAcademicRecord;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentAcademicRecord IStudentAcademicRecordClassRanking.StudentAcademicRecord
        {
            get { return _studentAcademicRecord; }
            set { _studentAcademicRecord = value; }
        }

        internal IStudentAcademicRecord StudentAcademicRecord
        {
            set { _studentAcademicRecord = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentAcademicRecord != null) 
                    hash = hash * 23 + _studentAcademicRecord.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The academic rank of a student in relation to his or her graduating class (e.g., 1st, 2nd, 3rd).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="classRank")]
        public int ClassRank { get; set; }

        /// <summary>
        /// Date class ranking was determined.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="classRankingDate")]
        public DateTime? ClassRankingDate { get; set; }

        /// <summary>
        /// The academic percentage rank of a student in relation to his or her graduating class (e.g., 95%, 80%, 50%).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="percentageRanking")]
        public int? PercentageRanking { get; set; }

        /// <summary>
        /// The total number of students in the student's graduating class.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="totalNumberInClass")]
        public int TotalNumberInClass { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentAcademicRecordClassRanking)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentAcademicRecordClassRanking) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentAcademicRecordClassRankingSynchronizationSourceSupport.IsClassRankSupported           { get { return true; } set { } }
 
        bool IStudentAcademicRecordClassRankingSynchronizationSourceSupport.IsClassRankingDateSupported    { get { return true; } set { } }
 
        bool IStudentAcademicRecordClassRankingSynchronizationSourceSupport.IsPercentageRankingSupported   { get { return true; } set { } }
 
        bool IStudentAcademicRecordClassRankingSynchronizationSourceSupport.IsTotalNumberInClassSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentAcademicRecordDiploma table of the StudentAcademicRecord aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentAcademicRecordDiploma : IStudentAcademicRecordDiploma, IStudentAcademicRecordDiplomaSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentAcademicRecord _studentAcademicRecord;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentAcademicRecord IStudentAcademicRecordDiploma.StudentAcademicRecord
        {
            get { return _studentAcademicRecord; }
            set { _studentAcademicRecord = value; }
        }

        internal IStudentAcademicRecord StudentAcademicRecord
        {
            set { _studentAcademicRecord = value; }
        }

        /// <summary>
        /// The month, day, and year on which the student met  graduation requirements and was awarded a diploma.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="diplomaAwardDate"), NaturalKeyMember]
        public DateTime DiplomaAwardDate { get; set; }

        /// <summary>
        /// The type of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="diplomaType"), NaturalKeyMember]
        public string DiplomaType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentAcademicRecord != null) 
                    hash = hash * 23 + _studentAcademicRecord.GetHashCode();
 
                // Standard Property
                if ((this as IStudentAcademicRecordDiploma).DiplomaAwardDate != null) 
                    hash = hash * 23 + (this as IStudentAcademicRecordDiploma).DiplomaAwardDate.GetHashCode();
 
                // Standard Property
                if ((this as IStudentAcademicRecordDiploma).DiplomaType != null) 
                    hash = hash * 23 + (this as IStudentAcademicRecordDiploma).DiplomaType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The category of achievement attributed to the learner.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="achievementCategoryDescriptor")]
        public string AchievementCategoryDescriptor { get; set; }

        /// <summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementCategorySystem")]
        public string AchievementCategorySystem { get; set; }

        /// <summary>
        /// The title assigned to the achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementTitle")]
        public string AchievementTitle { get; set; }

        /// <summary>
        /// The criteria for competency-based completion of the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteria")]
        public string Criteria { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteriaURL")]
        public string CriteriaURL { get; set; }

        /// <summary>
        /// Indicated a student who reached a state-defined threshold of vocational education and who attained a high school diploma or its recognized state equivalent or GED.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="cteCompleter")]
        public bool? CTECompleter { get; set; }

        /// <summary>
        /// Date on which the award expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="diplomaAwardExpiresDate")]
        public DateTime? DiplomaAwardExpiresDate { get; set; }

        /// <summary>
        /// The description of diploma given to the student for accomplishments.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="diplomaDescription")]
        public string DiplomaDescription { get; set; }

        /// <summary>
        /// The level of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.          Minimum high school program          Recommended high school program          Distinguished Achievement Program.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="diplomaLevelType")]
        public string DiplomaLevelType { get; set; }

        /// <summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evidenceStatement")]
        public string EvidenceStatement { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="imageURL")]
        public string ImageURL { get; set; }

        /// <summary>
        /// The name of the agent, entity, or institution issuing the element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerOriginURL")]
        public string IssuerOriginURL { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentAcademicRecordDiploma)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentAcademicRecordDiploma) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentAcademicRecordDiplomaSynchronizationSourceSupport.IsAchievementCategoryDescriptorSupported  { get { return true; } set { } }
 
        bool IStudentAcademicRecordDiplomaSynchronizationSourceSupport.IsAchievementCategorySystemSupported      { get { return true; } set { } }
 
        bool IStudentAcademicRecordDiplomaSynchronizationSourceSupport.IsAchievementTitleSupported               { get { return true; } set { } }
 
        bool IStudentAcademicRecordDiplomaSynchronizationSourceSupport.IsCriteriaSupported                       { get { return true; } set { } }
 
        bool IStudentAcademicRecordDiplomaSynchronizationSourceSupport.IsCriteriaURLSupported                    { get { return true; } set { } }
 
        bool IStudentAcademicRecordDiplomaSynchronizationSourceSupport.IsCTECompleterSupported                   { get { return true; } set { } }
 
        bool IStudentAcademicRecordDiplomaSynchronizationSourceSupport.IsDiplomaAwardExpiresDateSupported        { get { return true; } set { } }
 
        bool IStudentAcademicRecordDiplomaSynchronizationSourceSupport.IsDiplomaDescriptionSupported             { get { return true; } set { } }
 
        bool IStudentAcademicRecordDiplomaSynchronizationSourceSupport.IsDiplomaLevelTypeSupported               { get { return true; } set { } }
 
        bool IStudentAcademicRecordDiplomaSynchronizationSourceSupport.IsEvidenceStatementSupported              { get { return true; } set { } }
 
        bool IStudentAcademicRecordDiplomaSynchronizationSourceSupport.IsImageURLSupported                       { get { return true; } set { } }
 
        bool IStudentAcademicRecordDiplomaSynchronizationSourceSupport.IsIssuerNameSupported                     { get { return true; } set { } }
 
        bool IStudentAcademicRecordDiplomaSynchronizationSourceSupport.IsIssuerOriginURLSupported                { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentAcademicRecordRecognition table of the StudentAcademicRecord aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentAcademicRecordRecognition : IStudentAcademicRecordRecognition, IStudentAcademicRecordRecognitionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentAcademicRecord _studentAcademicRecord;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentAcademicRecord IStudentAcademicRecordRecognition.StudentAcademicRecord
        {
            get { return _studentAcademicRecord; }
            set { _studentAcademicRecord = value; }
        }

        internal IStudentAcademicRecord StudentAcademicRecord
        {
            set { _studentAcademicRecord = value; }
        }

        /// <summary>
        /// The nature of recognition given to the student for accomplishments in a co-curricular, or extra-curricular activity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="recognitionType"), NaturalKeyMember]
        public string RecognitionType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentAcademicRecord != null) 
                    hash = hash * 23 + _studentAcademicRecord.GetHashCode();
 
                // Standard Property
                if ((this as IStudentAcademicRecordRecognition).RecognitionType != null) 
                    hash = hash * 23 + (this as IStudentAcademicRecordRecognition).RecognitionType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The category of achievement attributed to the learner.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="achievementCategoryDescriptor")]
        public string AchievementCategoryDescriptor { get; set; }

        /// <summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementCategorySystem")]
        public string AchievementCategorySystem { get; set; }

        /// <summary>
        /// The title assigned to the achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementTitle")]
        public string AchievementTitle { get; set; }

        /// <summary>
        /// The criteria for competency-based completion of the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteria")]
        public string Criteria { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteriaURL")]
        public string CriteriaURL { get; set; }

        /// <summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evidenceStatement")]
        public string EvidenceStatement { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="imageURL")]
        public string ImageURL { get; set; }

        /// <summary>
        /// The name of the agent, entity, or institution issuing the element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerOriginURL")]
        public string IssuerOriginURL { get; set; }

        /// <summary>
        /// The date the recognition was awarded or earned.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardDate")]
        public DateTime? RecognitionAwardDate { get; set; }

        /// <summary>
        /// Date on which the award expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardExpiresDate")]
        public DateTime? RecognitionAwardExpiresDate { get; set; }

        /// <summary>
        /// A description of the type of academic distinctions earned by or awarded to the individual.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionDescription")]
        public string RecognitionDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentAcademicRecordRecognition)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentAcademicRecordRecognition) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentAcademicRecordRecognitionSynchronizationSourceSupport.IsAchievementCategoryDescriptorSupported  { get { return true; } set { } }
 
        bool IStudentAcademicRecordRecognitionSynchronizationSourceSupport.IsAchievementCategorySystemSupported      { get { return true; } set { } }
 
        bool IStudentAcademicRecordRecognitionSynchronizationSourceSupport.IsAchievementTitleSupported               { get { return true; } set { } }
 
        bool IStudentAcademicRecordRecognitionSynchronizationSourceSupport.IsCriteriaSupported                       { get { return true; } set { } }
 
        bool IStudentAcademicRecordRecognitionSynchronizationSourceSupport.IsCriteriaURLSupported                    { get { return true; } set { } }
 
        bool IStudentAcademicRecordRecognitionSynchronizationSourceSupport.IsEvidenceStatementSupported              { get { return true; } set { } }
 
        bool IStudentAcademicRecordRecognitionSynchronizationSourceSupport.IsImageURLSupported                       { get { return true; } set { } }
 
        bool IStudentAcademicRecordRecognitionSynchronizationSourceSupport.IsIssuerNameSupported                     { get { return true; } set { } }
 
        bool IStudentAcademicRecordRecognitionSynchronizationSourceSupport.IsIssuerOriginURLSupported                { get { return true; } set { } }
 
        bool IStudentAcademicRecordRecognitionSynchronizationSourceSupport.IsRecognitionAwardDateSupported           { get { return true; } set { } }
 
        bool IStudentAcademicRecordRecognitionSynchronizationSourceSupport.IsRecognitionAwardExpiresDateSupported    { get { return true; } set { } }
 
        bool IStudentAcademicRecordRecognitionSynchronizationSourceSupport.IsRecognitionDescriptionSupported         { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// Represents a reference from the StudentAcademicRecordReportCard entity to the ReportCard resource.
    /// </summary>
    [DataContract]
    public class StudentAcademicRecordReportCardToReportCardReference
    {
        private IStudentAcademicRecordReportCard backReference;

        // Parameterless constructor for deserialization
        public StudentAcademicRecordReportCardToReportCardReference() { }

        // Constructor for inline initialization in parent
        public StudentAcademicRecordReportCardToReportCardReference(IStudentAcademicRecordReportCard backReference)
        {
            this.backReference = backReference;
        }

        // Expose back reference internally for access after JSON deserialization to enable link generation
        internal IStudentAcademicRecordReportCard BackReference
        {
            get { return backReference; }
            set { backReference = value; }
        }


        [DataMember(Name="gradingPeriodBeginDate"), NaturalKeyMember]
        public DateTime GradingPeriodBeginDate { get; set; }

        [DataMember(Name="gradingPeriodDescriptor"), NaturalKeyMember]
        public string GradingPeriodDescriptor { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }
        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Can't generate a link without the back reference
                    if (backReference == null)
                        return null;
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "ReportCard",
                            Href = "/reportCards"
                                    + "?educationOrganizationId=" + backReference.StudentAcademicRecord.EducationOrganizationId            
                                    + "&gradingPeriodBeginDate=" + JsonConvert.SerializeObject(GradingPeriodBeginDate).Replace("\"", string.Empty)            
                                    + "&gradingPeriodDescriptor=" + WebUtility.UrlEncode(GradingPeriodDescriptor)            
                                    + "&schoolId=" + SchoolId            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(backReference.StudentAcademicRecord.StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return backReference.StudentAcademicRecord != null && backReference.StudentAcademicRecord.EducationOrganizationId != default(int)
                && GradingPeriodBeginDate != default(DateTime)
                && GradingPeriodDescriptor != default(string)
                && SchoolId != default(int)
                && backReference.StudentAcademicRecord != null && backReference.StudentAcademicRecord.StudentUniqueId != default(string)
                ;
        }
    }

    /// <summary>
    /// A class which represents the edfi.StudentAcademicRecordReportCard table of the StudentAcademicRecord aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentAcademicRecordReportCard : IStudentAcademicRecordReportCard, IStudentAcademicRecordReportCardSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _reportCardReferenceExplicitlyAssigned;
        private StudentAcademicRecordReportCardToReportCardReference _reportCardReference;
        private StudentAcademicRecordReportCardToReportCardReference ImplicitReportCardReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_reportCardReference == null && !_reportCardReferenceExplicitlyAssigned)
                    _reportCardReference = new StudentAcademicRecordReportCardToReportCardReference(this);

                return _reportCardReference;
            }
        }

        [DataMember(Name="reportCardReference")][NaturalKeyMember]
        public StudentAcademicRecordReportCardToReportCardReference ReportCardReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitReportCardReference != null
                    && (_reportCardReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitReportCardReference.IsReferenceFullyDefined()))
                    return ImplicitReportCardReference;

                return null;
            }
            set 
            { 
                _reportCardReferenceExplicitlyAssigned = true;
                _reportCardReference = value;
                _reportCardReference.BackReference = this;             }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentAcademicRecord _studentAcademicRecord;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentAcademicRecord IStudentAcademicRecordReportCard.StudentAcademicRecord
        {
            get { return _studentAcademicRecord; }
            set { _studentAcademicRecord = value; }
        }

        internal IStudentAcademicRecord StudentAcademicRecord
        {
            set { _studentAcademicRecord = value; }
        }

        /// <summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime IStudentAcademicRecordReportCard.GradingPeriodBeginDate
        {
            get
            {
                if (ImplicitReportCardReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitReportCardReference.IsReferenceFullyDefined()))
                    return ImplicitReportCardReference.GradingPeriodBeginDate;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ReportCard
                _reportCardReferenceExplicitlyAssigned = false;
                ImplicitReportCardReference.GradingPeriodBeginDate = value;
            }
        }

        /// <summary>
        /// The name of the period for which grades are reported.
        /// </summary>

        // IS in a reference (StudentAcademicRecordReportCard.GradingPeriodDescriptorId), IS a lookup column 
        string IStudentAcademicRecordReportCard.GradingPeriodDescriptor
        {
            get
            {
                if (ImplicitReportCardReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitReportCardReference.IsReferenceFullyDefined()))
                    return ImplicitReportCardReference.GradingPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitReportCardReference.GradingPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentAcademicRecordReportCard.SchoolId
        {
            get
            {
                if (ImplicitReportCardReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitReportCardReference.IsReferenceFullyDefined()))
                    return ImplicitReportCardReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ReportCard
                _reportCardReferenceExplicitlyAssigned = false;
                ImplicitReportCardReference.SchoolId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentAcademicRecord != null) 
                    hash = hash * 23 + _studentAcademicRecord.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentAcademicRecordReportCard).GradingPeriodBeginDate != null) 
                    hash = hash * 23 + (this as IStudentAcademicRecordReportCard).GradingPeriodBeginDate.GetHashCode();
 
                //Unified Type Property
                if ((this as IStudentAcademicRecordReportCard).GradingPeriodDescriptor != null) 
                    hash = hash * 23 + (this as IStudentAcademicRecordReportCard).GradingPeriodDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentAcademicRecordReportCard).SchoolId != null) 
                    hash = hash * 23 + (this as IStudentAcademicRecordReportCard).SchoolId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_reportCardReference != null)
                _reportCardReference.BackReference = this;
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentAcademicRecordReportCard)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentAcademicRecordReportCard) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentAssessment

namespace EdFi.Ods.Api.Models.Resources.V2.StudentAssessment
{
    /// <summary>
    /// Represents a reference to the StudentAssessment resource.
    /// </summary>
    [DataContract]
    public class StudentAssessmentReference
    {
        [DataMember(Name="assessmentIdentifier"), NaturalKeyMember]
        public string AssessmentIdentifier { get; set; }

        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }

        [DataMember(Name="identifier"), NaturalKeyMember]
        public string StudentAssessmentIdentifier { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentAssessment",
                            Href = "/studentAssessments"
                                    + "?assessmentIdentifier=" + WebUtility.UrlEncode(AssessmentIdentifier)            
                                    + "&namespace=" + WebUtility.UrlEncode(Namespace)            
                                    + "&identifier=" + WebUtility.UrlEncode(StudentAssessmentIdentifier)            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return AssessmentIdentifier != default(string)
                && Namespace != default(string)
                && StudentAssessmentIdentifier != default(string)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentAssessment table of the StudentAssessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentAssessment : IStudentAssessment, IHasETag, IStudentAssessmentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StudentAssessment()
        {
            StudentAssessmentAccommodations = new List<StudentAssessmentAccommodation>();
            StudentAssessmentItems = new List<StudentAssessmentItem>();
            StudentAssessmentPerformanceLevels = new List<StudentAssessmentPerformanceLevel>();
            StudentAssessmentScoreResults = new List<StudentAssessmentScoreResult>();
            StudentAssessmentStudentObjectiveAssessments = new List<StudentAssessmentStudentObjectiveAssessment>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the StudentAssessment resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _assessmentReferenceExplicitlyAssigned;
        private Assessment.AssessmentReference _assessmentReference;
        private Assessment.AssessmentReference ImplicitAssessmentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_assessmentReference == null && !_assessmentReferenceExplicitlyAssigned)
                    _assessmentReference = new Assessment.AssessmentReference();

                return _assessmentReference;
            }
        }

        [DataMember(Name="assessmentReference")][NaturalKeyMember]
        public Assessment.AssessmentReference AssessmentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitAssessmentReference != null
                    && (_assessmentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitAssessmentReference.IsReferenceFullyDefined()))
                    return ImplicitAssessmentReference;

                return null;
            }
            set 
            { 
                _assessmentReferenceExplicitlyAssigned = true;
                _assessmentReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentAssessment.AssessmentIdentifier
        {
            get
            {
                if (ImplicitAssessmentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAssessmentReference.IsReferenceFullyDefined()))
                    return ImplicitAssessmentReference.AssessmentIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Assessment
                _assessmentReferenceExplicitlyAssigned = false;
                ImplicitAssessmentReference.AssessmentIdentifier = value;
            }
        }

        /// <summary>
        /// Namespace for the Assessment.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentAssessment.Namespace
        {
            get
            {
                if (ImplicitAssessmentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAssessmentReference.IsReferenceFullyDefined()))
                    return ImplicitAssessmentReference.Namespace;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Assessment
                _assessmentReferenceExplicitlyAssigned = false;
                ImplicitAssessmentReference.Namespace = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identifier"), NaturalKeyMember]
        public string StudentAssessmentIdentifier { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentAssessment.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IStudentAssessment).AssessmentIdentifier != null) 
                    hash = hash * 23 + (this as IStudentAssessment).AssessmentIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentAssessment).Namespace != null) 
                    hash = hash * 23 + (this as IStudentAssessment).Namespace.GetHashCode();
 
                // Standard Property
                if ((this as IStudentAssessment).StudentAssessmentIdentifier != null) 
                    hash = hash * 23 + (this as IStudentAssessment).StudentAssessmentIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentAssessment).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentAssessment).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="administrationDate")]
        public DateTime AdministrationDate { get; set; }

        /// <summary>
        /// The date and time an assessment administration ended.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="administrationEndDate")]
        public DateTime? AdministrationEndDate { get; set; }

        /// <summary>
        /// The environment in which the test was administered. For example:          Electronic          Classroom          Testing Center          ...
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="administrationEnvironmentType")]
        public string AdministrationEnvironmentType { get; set; }

        /// <summary>
        /// The language in which an assessment is written and/or administered.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="administrationLanguageDescriptor")]
        public string AdministrationLanguageDescriptor { get; set; }

        /// <summary>
        /// An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="eventCircumstanceType")]
        public string EventCircumstanceType { get; set; }

        /// <summary>
        /// Describes special events that occur before during or after the assessment session that may impact use of results.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eventDescription")]
        public string EventDescription { get; set; }

        /// <summary>
        /// The primary reason student is not tested. For example:          Absent          Refusal by parent          Refusal by student          Medical waiver          Illness          Disruptive behavior          LEP Exempt          ...
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="reasonNotTestedType")]
        public string ReasonNotTestedType { get; set; }

        /// <summary>
        /// Indicator if the test was retaken. For example:          Primary administration          First retest          Second retest          ...
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="retestIndicatorType")]
        public string RetestIndicatorType { get; set; }

        /// <summary>
        /// The unique number for the assessment form or answer document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="serialNumber")]
        public string SerialNumber { get; set; }

        /// <summary>
        /// The grade level of a student when assessed.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="whenAssessedGradeLevelDescriptor")]
        public string WhenAssessedGradeLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<StudentAssessmentAccommodation> _studentAssessmentAccommodations;
        private IList<IStudentAssessmentAccommodation> _studentAssessmentAccommodationsCovariant;

        [DataMember(Name="accommodations")]
        public IList<StudentAssessmentAccommodation> StudentAssessmentAccommodations 
        { 
            get { return _studentAssessmentAccommodations; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentAssessmentAccommodation>(value,
                    (s, e) => ((IStudentAssessmentAccommodation)e.Item).StudentAssessment = this);
                _studentAssessmentAccommodations = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentAssessmentAccommodation, StudentAssessmentAccommodation>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentAssessmentAccommodation)e.Item).StudentAssessment = this;
                _studentAssessmentAccommodationsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentAssessmentAccommodation> IStudentAssessment.StudentAssessmentAccommodations
        {
            get { return _studentAssessmentAccommodationsCovariant; }
            set { StudentAssessmentAccommodations = new List<StudentAssessmentAccommodation>(value.Cast<StudentAssessmentAccommodation>()); }
        }

        private IList<StudentAssessmentItem> _studentAssessmentItems;
        private IList<IStudentAssessmentItem> _studentAssessmentItemsCovariant;

        [DataMember(Name="items")]
        public IList<StudentAssessmentItem> StudentAssessmentItems 
        { 
            get { return _studentAssessmentItems; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentAssessmentItem>(value,
                    (s, e) => ((IStudentAssessmentItem)e.Item).StudentAssessment = this);
                _studentAssessmentItems = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentAssessmentItem, StudentAssessmentItem>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentAssessmentItem)e.Item).StudentAssessment = this;
                _studentAssessmentItemsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentAssessmentItem> IStudentAssessment.StudentAssessmentItems
        {
            get { return _studentAssessmentItemsCovariant; }
            set { StudentAssessmentItems = new List<StudentAssessmentItem>(value.Cast<StudentAssessmentItem>()); }
        }

        private IList<StudentAssessmentPerformanceLevel> _studentAssessmentPerformanceLevels;
        private IList<IStudentAssessmentPerformanceLevel> _studentAssessmentPerformanceLevelsCovariant;

        [DataMember(Name="performanceLevels")]
        public IList<StudentAssessmentPerformanceLevel> StudentAssessmentPerformanceLevels 
        { 
            get { return _studentAssessmentPerformanceLevels; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentAssessmentPerformanceLevel>(value,
                    (s, e) => ((IStudentAssessmentPerformanceLevel)e.Item).StudentAssessment = this);
                _studentAssessmentPerformanceLevels = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentAssessmentPerformanceLevel, StudentAssessmentPerformanceLevel>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentAssessmentPerformanceLevel)e.Item).StudentAssessment = this;
                _studentAssessmentPerformanceLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentAssessmentPerformanceLevel> IStudentAssessment.StudentAssessmentPerformanceLevels
        {
            get { return _studentAssessmentPerformanceLevelsCovariant; }
            set { StudentAssessmentPerformanceLevels = new List<StudentAssessmentPerformanceLevel>(value.Cast<StudentAssessmentPerformanceLevel>()); }
        }

        private IList<StudentAssessmentScoreResult> _studentAssessmentScoreResults;
        private IList<IStudentAssessmentScoreResult> _studentAssessmentScoreResultsCovariant;

        [DataMember(Name="scoreResults")]
        public IList<StudentAssessmentScoreResult> StudentAssessmentScoreResults 
        { 
            get { return _studentAssessmentScoreResults; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentAssessmentScoreResult>(value,
                    (s, e) => ((IStudentAssessmentScoreResult)e.Item).StudentAssessment = this);
                _studentAssessmentScoreResults = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentAssessmentScoreResult, StudentAssessmentScoreResult>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentAssessmentScoreResult)e.Item).StudentAssessment = this;
                _studentAssessmentScoreResultsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentAssessmentScoreResult> IStudentAssessment.StudentAssessmentScoreResults
        {
            get { return _studentAssessmentScoreResultsCovariant; }
            set { StudentAssessmentScoreResults = new List<StudentAssessmentScoreResult>(value.Cast<StudentAssessmentScoreResult>()); }
        }

        private IList<StudentAssessmentStudentObjectiveAssessment> _studentAssessmentStudentObjectiveAssessments;
        private IList<IStudentAssessmentStudentObjectiveAssessment> _studentAssessmentStudentObjectiveAssessmentsCovariant;

        [DataMember(Name="studentObjectiveAssessments")]
        public IList<StudentAssessmentStudentObjectiveAssessment> StudentAssessmentStudentObjectiveAssessments 
        { 
            get { return _studentAssessmentStudentObjectiveAssessments; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentAssessmentStudentObjectiveAssessment>(value,
                    (s, e) => ((IStudentAssessmentStudentObjectiveAssessment)e.Item).StudentAssessment = this);
                _studentAssessmentStudentObjectiveAssessments = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentAssessmentStudentObjectiveAssessment, StudentAssessmentStudentObjectiveAssessment>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentAssessmentStudentObjectiveAssessment)e.Item).StudentAssessment = this;
                _studentAssessmentStudentObjectiveAssessmentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentAssessmentStudentObjectiveAssessment> IStudentAssessment.StudentAssessmentStudentObjectiveAssessments
        {
            get { return _studentAssessmentStudentObjectiveAssessmentsCovariant; }
            set { StudentAssessmentStudentObjectiveAssessments = new List<StudentAssessmentStudentObjectiveAssessment>(value.Cast<StudentAssessmentStudentObjectiveAssessment>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_studentAssessmentAccommodations != null) foreach (var item in _studentAssessmentAccommodations)
            {
                item.StudentAssessment = this;
            }
            
            if (_studentAssessmentItems != null) foreach (var item in _studentAssessmentItems)
            {
                item.StudentAssessment = this;
            }
            
            if (_studentAssessmentPerformanceLevels != null) foreach (var item in _studentAssessmentPerformanceLevels)
            {
                item.StudentAssessment = this;
            }
            
            if (_studentAssessmentScoreResults != null) foreach (var item in _studentAssessmentScoreResults)
            {
                item.StudentAssessment = this;
            }
            
            if (_studentAssessmentStudentObjectiveAssessments != null) foreach (var item in _studentAssessmentStudentObjectiveAssessments)
            {
                item.StudentAssessment = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentAssessment)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentAssessment) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentAssessmentSynchronizationSourceSupport.IsAdministrationDateSupported                            { get { return true; } set { } }
 
        bool IStudentAssessmentSynchronizationSourceSupport.IsAdministrationEndDateSupported                         { get { return true; } set { } }
 
        bool IStudentAssessmentSynchronizationSourceSupport.IsAdministrationEnvironmentTypeSupported                 { get { return true; } set { } }
 
        bool IStudentAssessmentSynchronizationSourceSupport.IsAdministrationLanguageDescriptorSupported              { get { return true; } set { } }
 
        bool IStudentAssessmentSynchronizationSourceSupport.IsEventCircumstanceTypeSupported                         { get { return true; } set { } }
 
        bool IStudentAssessmentSynchronizationSourceSupport.IsEventDescriptionSupported                              { get { return true; } set { } }
 
        bool IStudentAssessmentSynchronizationSourceSupport.IsReasonNotTestedTypeSupported                           { get { return true; } set { } }
 
        bool IStudentAssessmentSynchronizationSourceSupport.IsRetestIndicatorTypeSupported                           { get { return true; } set { } }
 
        bool IStudentAssessmentSynchronizationSourceSupport.IsSerialNumberSupported                                  { get { return true; } set { } }
 
        bool IStudentAssessmentSynchronizationSourceSupport.IsStudentAssessmentAccommodationsSupported               { get { return true; } set { } }
 
        bool IStudentAssessmentSynchronizationSourceSupport.IsStudentAssessmentItemsSupported                        { get { return true; } set { } }
 
        bool IStudentAssessmentSynchronizationSourceSupport.IsStudentAssessmentPerformanceLevelsSupported            { get { return true; } set { } }
 
        bool IStudentAssessmentSynchronizationSourceSupport.IsStudentAssessmentScoreResultsSupported                 { get { return true; } set { } }
 
        bool IStudentAssessmentSynchronizationSourceSupport.IsStudentAssessmentStudentObjectiveAssessmentsSupported  { get { return true; } set { } }
 
        bool IStudentAssessmentSynchronizationSourceSupport.IsWhenAssessedGradeLevelDescriptorSupported              { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IStudentAssessmentAccommodation, bool> IStudentAssessmentSynchronizationSourceSupport.IsStudentAssessmentAccommodationIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentAssessmentItem, bool> IStudentAssessmentSynchronizationSourceSupport.IsStudentAssessmentItemIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentAssessmentPerformanceLevel, bool> IStudentAssessmentSynchronizationSourceSupport.IsStudentAssessmentPerformanceLevelIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentAssessmentScoreResult, bool> IStudentAssessmentSynchronizationSourceSupport.IsStudentAssessmentScoreResultIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentAssessmentStudentObjectiveAssessment, bool> IStudentAssessmentSynchronizationSourceSupport.IsStudentAssessmentStudentObjectiveAssessmentIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentAssessmentAccommodation table of the StudentAssessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentAssessmentAccommodation : IStudentAssessmentAccommodation, IStudentAssessmentAccommodationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentAssessment _studentAssessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentAssessment IStudentAssessmentAccommodation.StudentAssessment
        {
            get { return _studentAssessment; }
            set { _studentAssessment = value; }
        }

        internal IStudentAssessment StudentAssessment
        {
            set { _studentAssessment = value; }
        }

        /// <summary>
        /// The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examinationmeasures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:          Braille          Enlarged monitor view          Extra time          Large Print          Setting          Oral Administration          ...
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="accommodationDescriptor"), NaturalKeyMember]
        public string AccommodationDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentAssessment != null) 
                    hash = hash * 23 + _studentAssessment.GetHashCode();
 
                // Standard Property
                if ((this as IStudentAssessmentAccommodation).AccommodationDescriptor != null) 
                    hash = hash * 23 + (this as IStudentAssessmentAccommodation).AccommodationDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentAssessmentAccommodation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentAssessmentAccommodation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
    /// <summary>
    /// Represents a reference from the StudentAssessmentItem entity to the AssessmentItem resource.
    /// </summary>
    [DataContract]
    public class StudentAssessmentItemToAssessmentItemReference
    {
        private IStudentAssessmentItem backReference;

        // Parameterless constructor for deserialization
        public StudentAssessmentItemToAssessmentItemReference() { }

        // Constructor for inline initialization in parent
        public StudentAssessmentItemToAssessmentItemReference(IStudentAssessmentItem backReference)
        {
            this.backReference = backReference;
        }

        // Expose back reference internally for access after JSON deserialization to enable link generation
        internal IStudentAssessmentItem BackReference
        {
            get { return backReference; }
            set { backReference = value; }
        }


        [DataMember(Name="identificationCode"), NaturalKeyMember]
        public string IdentificationCode { get; set; }
        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Can't generate a link without the back reference
                    if (backReference == null)
                        return null;
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "AssessmentItem",
                            Href = "/assessmentItems"
                                    + "?assessmentIdentifier=" + WebUtility.UrlEncode(backReference.StudentAssessment.AssessmentIdentifier)            
                                    + "&identificationCode=" + WebUtility.UrlEncode(IdentificationCode)            
                                    + "&namespace=" + WebUtility.UrlEncode(backReference.StudentAssessment.Namespace)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return backReference.StudentAssessment != null && backReference.StudentAssessment.AssessmentIdentifier != default(string)
                && IdentificationCode != default(string)
                && backReference.StudentAssessment != null && backReference.StudentAssessment.Namespace != default(string)
                ;
        }
    }

    /// <summary>
    /// A class which represents the edfi.StudentAssessmentItem table of the StudentAssessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentAssessmentItem : IStudentAssessmentItem, IStudentAssessmentItemSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _assessmentItemReferenceExplicitlyAssigned;
        private StudentAssessmentItemToAssessmentItemReference _assessmentItemReference;
        private StudentAssessmentItemToAssessmentItemReference ImplicitAssessmentItemReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_assessmentItemReference == null && !_assessmentItemReferenceExplicitlyAssigned)
                    _assessmentItemReference = new StudentAssessmentItemToAssessmentItemReference(this);

                return _assessmentItemReference;
            }
        }

        [DataMember(Name="assessmentItemReference")][NaturalKeyMember]
        public StudentAssessmentItemToAssessmentItemReference AssessmentItemReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitAssessmentItemReference != null
                    && (_assessmentItemReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitAssessmentItemReference.IsReferenceFullyDefined()))
                    return ImplicitAssessmentItemReference;

                return null;
            }
            set 
            { 
                _assessmentItemReferenceExplicitlyAssigned = true;
                _assessmentItemReference = value;
                _assessmentItemReference.BackReference = this;             }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentAssessment _studentAssessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentAssessment IStudentAssessmentItem.StudentAssessment
        {
            get { return _studentAssessment; }
            set { _studentAssessment = value; }
        }

        internal IStudentAssessment StudentAssessment
        {
            set { _studentAssessment = value; }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentAssessmentItem.IdentificationCode
        {
            get
            {
                if (ImplicitAssessmentItemReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitAssessmentItemReference.IsReferenceFullyDefined()))
                    return ImplicitAssessmentItemReference.IdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // AssessmentItem
                _assessmentItemReferenceExplicitlyAssigned = false;
                ImplicitAssessmentItemReference.IdentificationCode = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentAssessment != null) 
                    hash = hash * 23 + _studentAssessment.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentAssessmentItem).IdentificationCode != null) 
                    hash = hash * 23 + (this as IStudentAssessmentItem).IdentificationCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The analyzed result of a student's response to an assessment item. For example:          Correct          Incorrect           Met standard          ...
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="assessmentItemResultType")]
        public string AssessmentItemResultType { get; set; }

        /// <summary>
        /// A student's response to a stimulus on a test.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assessmentResponse")]
        public string AssessmentResponse { get; set; }

        /// <summary>
        /// The formative descriptive feedback that was given to a learner in response to the results from a scored/evaluated assessment item.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="descriptiveFeedback")]
        public string DescriptiveFeedback { get; set; }

        /// <summary>
        /// A meaningful raw score of the performance of an individual on an assessment item.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="rawScoreResult")]
        public int? RawScoreResult { get; set; }

        /// <summary>
        /// Indicator of the response. For example:          Nonscorable response          Ineffective response          Effective response          Partial response          ...
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="responseIndicatorType")]
        public string ResponseIndicatorType { get; set; }

        /// <summary>
        /// The overall time a student actually spent during the AssessmentItem.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="timeAssessed")]
        public string TimeAssessed { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_assessmentItemReference != null)
                _assessmentItemReference.BackReference = this;
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentAssessmentItem)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentAssessmentItem) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentAssessmentItemSynchronizationSourceSupport.IsAssessmentItemResultTypeSupported  { get { return true; } set { } }
 
        bool IStudentAssessmentItemSynchronizationSourceSupport.IsAssessmentResponseSupported        { get { return true; } set { } }
 
        bool IStudentAssessmentItemSynchronizationSourceSupport.IsDescriptiveFeedbackSupported       { get { return true; } set { } }
 
        bool IStudentAssessmentItemSynchronizationSourceSupport.IsRawScoreResultSupported            { get { return true; } set { } }
 
        bool IStudentAssessmentItemSynchronizationSourceSupport.IsResponseIndicatorTypeSupported     { get { return true; } set { } }
 
        bool IStudentAssessmentItemSynchronizationSourceSupport.IsTimeAssessedSupported              { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentAssessmentPerformanceLevel table of the StudentAssessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentAssessmentPerformanceLevel : IStudentAssessmentPerformanceLevel, IStudentAssessmentPerformanceLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentAssessment _studentAssessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentAssessment IStudentAssessmentPerformanceLevel.StudentAssessment
        {
            get { return _studentAssessment; }
            set { _studentAssessment = value; }
        }

        internal IStudentAssessment StudentAssessment
        {
            set { _studentAssessment = value; }
        }

        /// <summary>
        /// The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="assessmentReportingMethodType"), NaturalKeyMember]
        public string AssessmentReportingMethodType { get; set; }

        /// <summary>
        /// A specification of which performance level value describes the student proficiency.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="performanceLevelDescriptor"), NaturalKeyMember]
        public string PerformanceLevelDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentAssessment != null) 
                    hash = hash * 23 + _studentAssessment.GetHashCode();
 
                // Standard Property
                if ((this as IStudentAssessmentPerformanceLevel).AssessmentReportingMethodType != null) 
                    hash = hash * 23 + (this as IStudentAssessmentPerformanceLevel).AssessmentReportingMethodType.GetHashCode();
 
                // Standard Property
                if ((this as IStudentAssessmentPerformanceLevel).PerformanceLevelDescriptor != null) 
                    hash = hash * 23 + (this as IStudentAssessmentPerformanceLevel).PerformanceLevelDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Optional indicator of whether the performance level was met.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="performanceLevelMet")]
        public bool PerformanceLevelMet { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentAssessmentPerformanceLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentAssessmentPerformanceLevel) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentAssessmentPerformanceLevelSynchronizationSourceSupport.IsPerformanceLevelMetSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentAssessmentScoreResult table of the StudentAssessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentAssessmentScoreResult : IStudentAssessmentScoreResult, IStudentAssessmentScoreResultSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentAssessment _studentAssessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentAssessment IStudentAssessmentScoreResult.StudentAssessment
        {
            get { return _studentAssessment; }
            set { _studentAssessment = value; }
        }

        internal IStudentAssessment StudentAssessment
        {
            set { _studentAssessment = value; }
        }

        /// <summary>
        /// The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="assessmentReportingMethodType"), NaturalKeyMember]
        public string AssessmentReportingMethodType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentAssessment != null) 
                    hash = hash * 23 + _studentAssessment.GetHashCode();
 
                // Standard Property
                if ((this as IStudentAssessmentScoreResult).AssessmentReportingMethodType != null) 
                    hash = hash * 23 + (this as IStudentAssessmentScoreResult).AssessmentReportingMethodType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The value of a meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="result")]
        public string Result { get; set; }

        /// <summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="resultDatatypeType")]
        public string ResultDatatypeType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentAssessmentScoreResult)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentAssessmentScoreResult) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentAssessmentScoreResultSynchronizationSourceSupport.IsResultSupported              { get { return true; } set { } }
 
        bool IStudentAssessmentScoreResultSynchronizationSourceSupport.IsResultDatatypeTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// Represents a reference from the StudentAssessmentStudentObjectiveAssessment entity to the ObjectiveAssessment resource.
    /// </summary>
    [DataContract]
    public class StudentAssessmentStudentObjectiveAssessmentToObjectiveAssessmentReference
    {
        private IStudentAssessmentStudentObjectiveAssessment backReference;

        // Parameterless constructor for deserialization
        public StudentAssessmentStudentObjectiveAssessmentToObjectiveAssessmentReference() { }

        // Constructor for inline initialization in parent
        public StudentAssessmentStudentObjectiveAssessmentToObjectiveAssessmentReference(IStudentAssessmentStudentObjectiveAssessment backReference)
        {
            this.backReference = backReference;
        }

        // Expose back reference internally for access after JSON deserialization to enable link generation
        internal IStudentAssessmentStudentObjectiveAssessment BackReference
        {
            get { return backReference; }
            set { backReference = value; }
        }


        [DataMember(Name="identificationCode"), NaturalKeyMember]
        public string IdentificationCode { get; set; }
        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Can't generate a link without the back reference
                    if (backReference == null)
                        return null;
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "ObjectiveAssessment",
                            Href = "/objectiveAssessments"
                                    + "?assessmentIdentifier=" + WebUtility.UrlEncode(backReference.StudentAssessment.AssessmentIdentifier)            
                                    + "&identificationCode=" + WebUtility.UrlEncode(IdentificationCode)            
                                    + "&namespace=" + WebUtility.UrlEncode(backReference.StudentAssessment.Namespace)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return backReference.StudentAssessment != null && backReference.StudentAssessment.AssessmentIdentifier != default(string)
                && IdentificationCode != default(string)
                && backReference.StudentAssessment != null && backReference.StudentAssessment.Namespace != default(string)
                ;
        }
    }

    /// <summary>
    /// A class which represents the edfi.StudentAssessmentStudentObjectiveAssessment table of the StudentAssessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentAssessmentStudentObjectiveAssessment : IStudentAssessmentStudentObjectiveAssessment, IStudentAssessmentStudentObjectiveAssessmentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StudentAssessmentStudentObjectiveAssessment()
        {
            StudentAssessmentStudentObjectiveAssessmentPerformanceLevels = new List<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel>();
            StudentAssessmentStudentObjectiveAssessmentScoreResults = new List<StudentAssessmentStudentObjectiveAssessmentScoreResult>();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _objectiveAssessmentReferenceExplicitlyAssigned;
        private StudentAssessmentStudentObjectiveAssessmentToObjectiveAssessmentReference _objectiveAssessmentReference;
        private StudentAssessmentStudentObjectiveAssessmentToObjectiveAssessmentReference ImplicitObjectiveAssessmentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_objectiveAssessmentReference == null && !_objectiveAssessmentReferenceExplicitlyAssigned)
                    _objectiveAssessmentReference = new StudentAssessmentStudentObjectiveAssessmentToObjectiveAssessmentReference(this);

                return _objectiveAssessmentReference;
            }
        }

        [DataMember(Name="objectiveAssessmentReference")][NaturalKeyMember]
        public StudentAssessmentStudentObjectiveAssessmentToObjectiveAssessmentReference ObjectiveAssessmentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitObjectiveAssessmentReference != null
                    && (_objectiveAssessmentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitObjectiveAssessmentReference.IsReferenceFullyDefined()))
                    return ImplicitObjectiveAssessmentReference;

                return null;
            }
            set 
            { 
                _objectiveAssessmentReferenceExplicitlyAssigned = true;
                _objectiveAssessmentReference = value;
                _objectiveAssessmentReference.BackReference = this;             }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentAssessment _studentAssessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentAssessment IStudentAssessmentStudentObjectiveAssessment.StudentAssessment
        {
            get { return _studentAssessment; }
            set { _studentAssessment = value; }
        }

        internal IStudentAssessment StudentAssessment
        {
            set { _studentAssessment = value; }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentAssessmentStudentObjectiveAssessment.IdentificationCode
        {
            get
            {
                if (ImplicitObjectiveAssessmentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitObjectiveAssessmentReference.IsReferenceFullyDefined()))
                    return ImplicitObjectiveAssessmentReference.IdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ObjectiveAssessment
                _objectiveAssessmentReferenceExplicitlyAssigned = false;
                ImplicitObjectiveAssessmentReference.IdentificationCode = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentAssessment != null) 
                    hash = hash * 23 + _studentAssessment.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentAssessmentStudentObjectiveAssessment).IdentificationCode != null) 
                    hash = hash * 23 + (this as IStudentAssessmentStudentObjectiveAssessment).IdentificationCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel> _studentAssessmentStudentObjectiveAssessmentPerformanceLevels;
        private IList<IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel> _studentAssessmentStudentObjectiveAssessmentPerformanceLevelsCovariant;

        [DataMember(Name="performanceLevels")]
        public IList<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel> StudentAssessmentStudentObjectiveAssessmentPerformanceLevels 
        { 
            get { return _studentAssessmentStudentObjectiveAssessmentPerformanceLevels; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel>(value,
                    (s, e) => ((IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel)e.Item).StudentAssessmentStudentObjectiveAssessment = this);
                _studentAssessmentStudentObjectiveAssessmentPerformanceLevels = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel, StudentAssessmentStudentObjectiveAssessmentPerformanceLevel>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel)e.Item).StudentAssessmentStudentObjectiveAssessment = this;
                _studentAssessmentStudentObjectiveAssessmentPerformanceLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel> IStudentAssessmentStudentObjectiveAssessment.StudentAssessmentStudentObjectiveAssessmentPerformanceLevels
        {
            get { return _studentAssessmentStudentObjectiveAssessmentPerformanceLevelsCovariant; }
            set { StudentAssessmentStudentObjectiveAssessmentPerformanceLevels = new List<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel>(value.Cast<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel>()); }
        }

        private IList<StudentAssessmentStudentObjectiveAssessmentScoreResult> _studentAssessmentStudentObjectiveAssessmentScoreResults;
        private IList<IStudentAssessmentStudentObjectiveAssessmentScoreResult> _studentAssessmentStudentObjectiveAssessmentScoreResultsCovariant;

        [DataMember(Name="scoreResults")]
        public IList<StudentAssessmentStudentObjectiveAssessmentScoreResult> StudentAssessmentStudentObjectiveAssessmentScoreResults 
        { 
            get { return _studentAssessmentStudentObjectiveAssessmentScoreResults; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentAssessmentStudentObjectiveAssessmentScoreResult>(value,
                    (s, e) => ((IStudentAssessmentStudentObjectiveAssessmentScoreResult)e.Item).StudentAssessmentStudentObjectiveAssessment = this);
                _studentAssessmentStudentObjectiveAssessmentScoreResults = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentAssessmentStudentObjectiveAssessmentScoreResult, StudentAssessmentStudentObjectiveAssessmentScoreResult>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentAssessmentStudentObjectiveAssessmentScoreResult)e.Item).StudentAssessmentStudentObjectiveAssessment = this;
                _studentAssessmentStudentObjectiveAssessmentScoreResultsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentAssessmentStudentObjectiveAssessmentScoreResult> IStudentAssessmentStudentObjectiveAssessment.StudentAssessmentStudentObjectiveAssessmentScoreResults
        {
            get { return _studentAssessmentStudentObjectiveAssessmentScoreResultsCovariant; }
            set { StudentAssessmentStudentObjectiveAssessmentScoreResults = new List<StudentAssessmentStudentObjectiveAssessmentScoreResult>(value.Cast<StudentAssessmentStudentObjectiveAssessmentScoreResult>()); }
        }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_objectiveAssessmentReference != null)
                _objectiveAssessmentReference.BackReference = this;
            if (_studentAssessmentStudentObjectiveAssessmentPerformanceLevels != null) foreach (var item in _studentAssessmentStudentObjectiveAssessmentPerformanceLevels)
            {
                item.StudentAssessmentStudentObjectiveAssessment = this;
            }
            
            if (_studentAssessmentStudentObjectiveAssessmentScoreResults != null) foreach (var item in _studentAssessmentStudentObjectiveAssessmentScoreResults)
            {
                item.StudentAssessmentStudentObjectiveAssessment = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentAssessmentStudentObjectiveAssessment)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentAssessmentStudentObjectiveAssessment) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentAssessmentStudentObjectiveAssessmentSynchronizationSourceSupport.IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelsSupported  { get { return true; } set { } }
 
        bool IStudentAssessmentStudentObjectiveAssessmentSynchronizationSourceSupport.IsStudentAssessmentStudentObjectiveAssessmentScoreResultsSupported       { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel, bool> IStudentAssessmentStudentObjectiveAssessmentSynchronizationSourceSupport.IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentAssessmentStudentObjectiveAssessmentScoreResult, bool> IStudentAssessmentStudentObjectiveAssessmentSynchronizationSourceSupport.IsStudentAssessmentStudentObjectiveAssessmentScoreResultIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentAssessmentStudentObjectiveAssessmentPerformanceLevel table of the StudentAssessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentAssessmentStudentObjectiveAssessmentPerformanceLevel : IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel, IStudentAssessmentStudentObjectiveAssessmentPerformanceLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentAssessmentStudentObjectiveAssessment _studentAssessmentStudentObjectiveAssessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentAssessmentStudentObjectiveAssessment IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.StudentAssessmentStudentObjectiveAssessment
        {
            get { return _studentAssessmentStudentObjectiveAssessment; }
            set { _studentAssessmentStudentObjectiveAssessment = value; }
        }

        internal IStudentAssessmentStudentObjectiveAssessment StudentAssessmentStudentObjectiveAssessment
        {
            set { _studentAssessmentStudentObjectiveAssessment = value; }
        }

        /// <summary>
        /// The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="assessmentReportingMethodType"), NaturalKeyMember]
        public string AssessmentReportingMethodType { get; set; }

        /// <summary>
        /// A specification of which performance level value describes the student proficiency.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="performanceLevelDescriptor"), NaturalKeyMember]
        public string PerformanceLevelDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentAssessmentStudentObjectiveAssessment != null) 
                    hash = hash * 23 + _studentAssessmentStudentObjectiveAssessment.GetHashCode();
 
                // Standard Property
                if ((this as IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel).AssessmentReportingMethodType != null) 
                    hash = hash * 23 + (this as IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel).AssessmentReportingMethodType.GetHashCode();
 
                // Standard Property
                if ((this as IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel).PerformanceLevelDescriptor != null) 
                    hash = hash * 23 + (this as IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel).PerformanceLevelDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Optional indicator of whether the performance level was met.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="performanceLevelMet")]
        public bool PerformanceLevelMet { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentAssessmentStudentObjectiveAssessmentPerformanceLevelSynchronizationSourceSupport.IsPerformanceLevelMetSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentAssessmentStudentObjectiveAssessmentScoreResult table of the StudentAssessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentAssessmentStudentObjectiveAssessmentScoreResult : IStudentAssessmentStudentObjectiveAssessmentScoreResult, IStudentAssessmentStudentObjectiveAssessmentScoreResultSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentAssessmentStudentObjectiveAssessment _studentAssessmentStudentObjectiveAssessment;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentAssessmentStudentObjectiveAssessment IStudentAssessmentStudentObjectiveAssessmentScoreResult.StudentAssessmentStudentObjectiveAssessment
        {
            get { return _studentAssessmentStudentObjectiveAssessment; }
            set { _studentAssessmentStudentObjectiveAssessment = value; }
        }

        internal IStudentAssessmentStudentObjectiveAssessment StudentAssessmentStudentObjectiveAssessment
        {
            set { _studentAssessmentStudentObjectiveAssessment = value; }
        }

        /// <summary>
        /// The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="assessmentReportingMethodType"), NaturalKeyMember]
        public string AssessmentReportingMethodType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentAssessmentStudentObjectiveAssessment != null) 
                    hash = hash * 23 + _studentAssessmentStudentObjectiveAssessment.GetHashCode();
 
                // Standard Property
                if ((this as IStudentAssessmentStudentObjectiveAssessmentScoreResult).AssessmentReportingMethodType != null) 
                    hash = hash * 23 + (this as IStudentAssessmentStudentObjectiveAssessmentScoreResult).AssessmentReportingMethodType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The value of a meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="result")]
        public string Result { get; set; }

        /// <summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="resultDatatypeType")]
        public string ResultDatatypeType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentAssessmentStudentObjectiveAssessmentScoreResult)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentAssessmentStudentObjectiveAssessmentScoreResult) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentAssessmentStudentObjectiveAssessmentScoreResultSynchronizationSourceSupport.IsResultSupported              { get { return true; } set { } }
 
        bool IStudentAssessmentStudentObjectiveAssessmentScoreResultSynchronizationSourceSupport.IsResultDatatypeTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentCharacteristicDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.StudentCharacteristicDescriptor
{
    /// <summary>
    /// A class which represents the edfi.StudentCharacteristicDescriptor table of the StudentCharacteristicDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentCharacteristicDescriptor : IStudentCharacteristicDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IStudentCharacteristicDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StudentCharacteristicDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="studentCharacteristicDescriptorId"), NaturalKeyMember]
        public int StudentCharacteristicDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return StudentCharacteristicDescriptorId; }
            set { StudentCharacteristicDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IStudentCharacteristicDescriptor).StudentCharacteristicDescriptorId != null) 
                    hash = hash * 23 + (this as IStudentCharacteristicDescriptor).StudentCharacteristicDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="studentCharacteristicType")]
        public string StudentCharacteristicType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentCharacteristicDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentCharacteristicDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentCharacteristicDescriptorSynchronizationSourceSupport.IsCodeValueSupported                  { get { return true; } set { } }
 
        bool IStudentCharacteristicDescriptorSynchronizationSourceSupport.IsDescriptionSupported                { get { return true; } set { } }
 
        bool IStudentCharacteristicDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported         { get { return true; } set { } }
 
        bool IStudentCharacteristicDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported           { get { return true; } set { } }
 
        bool IStudentCharacteristicDescriptorSynchronizationSourceSupport.IsNamespaceSupported                  { get { return true; } set { } }
 
        bool IStudentCharacteristicDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported          { get { return true; } set { } }
 
        bool IStudentCharacteristicDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported           { get { return true; } set { } }
 
        bool IStudentCharacteristicDescriptorSynchronizationSourceSupport.IsStudentCharacteristicTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentCharacteristicType

namespace EdFi.Ods.Api.Models.Resources.V2.StudentCharacteristicType
{
    /// <summary>
    /// A class which represents the edfi.StudentCharacteristicType table of the StudentCharacteristicType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentCharacteristicType : IStudentCharacteristicType, IHasETag, IStudentCharacteristicTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StudentCharacteristicType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for StudentCharacteristic
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="studentCharacteristicTypeId"), NaturalKeyMember]
        public int StudentCharacteristicTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStudentCharacteristicType).StudentCharacteristicTypeId != null) 
                    hash = hash * 23 + (this as IStudentCharacteristicType).StudentCharacteristicTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the StudentCharacteristic type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the StudentCharacteristic type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentCharacteristicType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentCharacteristicType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentCharacteristicTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IStudentCharacteristicTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IStudentCharacteristicTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentCohortAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.StudentCohortAssociation
{
    /// <summary>
    /// Represents a reference to the StudentCohortAssociation resource.
    /// </summary>
    [DataContract]
    public class StudentCohortAssociationReference
    {
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="cohortIdentifier"), NaturalKeyMember]
        public string CohortIdentifier { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentCohortAssociation",
                            Href = "/studentCohortAssociations"
                                    + "?beginDate=" + JsonConvert.SerializeObject(BeginDate).Replace("\"", string.Empty)            
                                    + "&cohortIdentifier=" + WebUtility.UrlEncode(CohortIdentifier)            
                                    + "&educationOrganizationId=" + EducationOrganizationId            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime)
                && CohortIdentifier != default(string)
                && EducationOrganizationId != default(int)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentCohortAssociation table of the StudentCohortAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentCohortAssociation : IStudentCohortAssociation, IHasETag, IStudentCohortAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StudentCohortAssociation()
        {
            StudentCohortAssociationSections = new List<StudentCohortAssociationSection>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the StudentCohortAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _cohortReferenceExplicitlyAssigned;
        private Cohort.CohortReference _cohortReference;
        private Cohort.CohortReference ImplicitCohortReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_cohortReference == null && !_cohortReferenceExplicitlyAssigned)
                    _cohortReference = new Cohort.CohortReference();

                return _cohortReference;
            }
        }

        [DataMember(Name="cohortReference")][NaturalKeyMember]
        public Cohort.CohortReference CohortReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitCohortReference != null
                    && (_cohortReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCohortReference.IsReferenceFullyDefined()))
                    return ImplicitCohortReference;

                return null;
            }
            set 
            { 
                _cohortReferenceExplicitlyAssigned = true;
                _cohortReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the Student was first identified as part of the Cohort.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// The name or ID for the Cohort.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentCohortAssociation.CohortIdentifier
        {
            get
            {
                if (ImplicitCohortReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCohortReference.IsReferenceFullyDefined()))
                    return ImplicitCohortReference.CohortIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Cohort
                _cohortReferenceExplicitlyAssigned = false;
                ImplicitCohortReference.CohortIdentifier = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentCohortAssociation.EducationOrganizationId
        {
            get
            {
                if (ImplicitCohortReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCohortReference.IsReferenceFullyDefined()))
                    return ImplicitCohortReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Cohort
                _cohortReferenceExplicitlyAssigned = false;
                ImplicitCohortReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentCohortAssociation.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStudentCohortAssociation).BeginDate != null) 
                    hash = hash * 23 + (this as IStudentCohortAssociation).BeginDate.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentCohortAssociation).CohortIdentifier != null) 
                    hash = hash * 23 + (this as IStudentCohortAssociation).CohortIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentCohortAssociation).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStudentCohortAssociation).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentCohortAssociation).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentCohortAssociation).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the Student was removed as part of the Cohort.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<StudentCohortAssociationSection> _studentCohortAssociationSections;
        private IList<IStudentCohortAssociationSection> _studentCohortAssociationSectionsCovariant;

        [DataMember(Name="sections")]
        public IList<StudentCohortAssociationSection> StudentCohortAssociationSections 
        { 
            get { return _studentCohortAssociationSections; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentCohortAssociationSection>(value,
                    (s, e) => ((IStudentCohortAssociationSection)e.Item).StudentCohortAssociation = this);
                _studentCohortAssociationSections = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentCohortAssociationSection, StudentCohortAssociationSection>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentCohortAssociationSection)e.Item).StudentCohortAssociation = this;
                _studentCohortAssociationSectionsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentCohortAssociationSection> IStudentCohortAssociation.StudentCohortAssociationSections
        {
            get { return _studentCohortAssociationSectionsCovariant; }
            set { StudentCohortAssociationSections = new List<StudentCohortAssociationSection>(value.Cast<StudentCohortAssociationSection>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_studentCohortAssociationSections != null) foreach (var item in _studentCohortAssociationSections)
            {
                item.StudentCohortAssociation = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentCohortAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentCohortAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentCohortAssociationSynchronizationSourceSupport.IsEndDateSupported                           { get { return true; } set { } }
 
        bool IStudentCohortAssociationSynchronizationSourceSupport.IsStudentCohortAssociationSectionsSupported  { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IStudentCohortAssociationSection, bool> IStudentCohortAssociationSynchronizationSourceSupport.IsStudentCohortAssociationSectionIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentCohortAssociationSection table of the StudentCohortAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentCohortAssociationSection : IStudentCohortAssociationSection, IStudentCohortAssociationSectionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _sectionReferenceExplicitlyAssigned;
        private Section.SectionReference _sectionReference;
        private Section.SectionReference ImplicitSectionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_sectionReference == null && !_sectionReferenceExplicitlyAssigned)
                    _sectionReference = new Section.SectionReference();

                return _sectionReference;
            }
        }

        [DataMember(Name="sectionReference")][NaturalKeyMember]
        public Section.SectionReference SectionReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSectionReference != null
                    && (_sectionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference;

                return null;
            }
            set 
            { 
                _sectionReferenceExplicitlyAssigned = true;
                _sectionReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentCohortAssociation _studentCohortAssociation;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentCohortAssociation IStudentCohortAssociationSection.StudentCohortAssociation
        {
            get { return _studentCohortAssociation; }
            set { _studentCohortAssociation = value; }
        }

        internal IStudentCohortAssociation StudentCohortAssociation
        {
            set { _studentCohortAssociation = value; }
        }

        /// <summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentCohortAssociationSection.ClassPeriodName
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.ClassPeriodName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.ClassPeriodName = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentCohortAssociationSection.ClassroomIdentificationCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.ClassroomIdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.ClassroomIdentificationCode = value;
            }
        }

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentCohortAssociationSection.LocalCourseCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.LocalCourseCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.LocalCourseCode = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentCohortAssociationSection.SchoolId
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short IStudentCohortAssociationSection.SchoolYear
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentCohortAssociationSection.SequenceOfCourse
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SequenceOfCourse;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SequenceOfCourse = value;
            }
        }

        /// <summary>
        /// The term for the Session during the school year.
        /// </summary>

        // IS in a reference (StudentCohortAssociationSection.TermDescriptorId), IS a lookup column 
        string IStudentCohortAssociationSection.TermDescriptor
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitSectionReference.TermDescriptor = value;
            }
        }

        /// <summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentCohortAssociationSection.UniqueSectionCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.UniqueSectionCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.UniqueSectionCode = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentCohortAssociation != null) 
                    hash = hash * 23 + _studentCohortAssociation.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentCohortAssociationSection).ClassPeriodName != null) 
                    hash = hash * 23 + (this as IStudentCohortAssociationSection).ClassPeriodName.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentCohortAssociationSection).ClassroomIdentificationCode != null) 
                    hash = hash * 23 + (this as IStudentCohortAssociationSection).ClassroomIdentificationCode.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentCohortAssociationSection).LocalCourseCode != null) 
                    hash = hash * 23 + (this as IStudentCohortAssociationSection).LocalCourseCode.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentCohortAssociationSection).SchoolId != null) 
                    hash = hash * 23 + (this as IStudentCohortAssociationSection).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentCohortAssociationSection).SchoolYear != null) 
                    hash = hash * 23 + (this as IStudentCohortAssociationSection).SchoolYear.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentCohortAssociationSection).SequenceOfCourse != null) 
                    hash = hash * 23 + (this as IStudentCohortAssociationSection).SequenceOfCourse.GetHashCode();
 
                //Unified Type Property
                if ((this as IStudentCohortAssociationSection).TermDescriptor != null) 
                    hash = hash * 23 + (this as IStudentCohortAssociationSection).TermDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentCohortAssociationSection).UniqueSectionCode != null) 
                    hash = hash * 23 + (this as IStudentCohortAssociationSection).UniqueSectionCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentCohortAssociationSection)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentCohortAssociationSection) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentCompetencyObjective

namespace EdFi.Ods.Api.Models.Resources.V2.StudentCompetencyObjective
{
    /// <summary>
    /// Represents a reference to the StudentCompetencyObjective resource.
    /// </summary>
    [DataContract]
    public class StudentCompetencyObjectiveReference
    {
        [DataMember(Name="gradingPeriodBeginDate"), NaturalKeyMember]
        public DateTime GradingPeriodBeginDate { get; set; }

        [DataMember(Name="gradingPeriodDescriptor"), NaturalKeyMember]
        public string GradingPeriodDescriptor { get; set; }

        [DataMember(Name="objective"), NaturalKeyMember]
        public string Objective { get; set; }

        [DataMember(Name="objectiveEducationOrganizationId"), NaturalKeyMember]
        public int ObjectiveEducationOrganizationId { get; set; }

        [DataMember(Name="objectiveGradeLevelDescriptor"), NaturalKeyMember]
        public string ObjectiveGradeLevelDescriptor { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentCompetencyObjective",
                            Href = "/studentCompetencyObjectives"
                                    + "?gradingPeriodBeginDate=" + JsonConvert.SerializeObject(GradingPeriodBeginDate).Replace("\"", string.Empty)            
                                    + "&gradingPeriodDescriptor=" + WebUtility.UrlEncode(GradingPeriodDescriptor)            
                                    + "&objective=" + WebUtility.UrlEncode(Objective)            
                                    + "&objectiveEducationOrganizationId=" + ObjectiveEducationOrganizationId            
                                    + "&objectiveGradeLevelDescriptor=" + WebUtility.UrlEncode(ObjectiveGradeLevelDescriptor)            
                                    + "&schoolId=" + SchoolId            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return GradingPeriodBeginDate != default(DateTime)
                && GradingPeriodDescriptor != default(string)
                && Objective != default(string)
                && ObjectiveEducationOrganizationId != default(int)
                && ObjectiveGradeLevelDescriptor != default(string)
                && SchoolId != default(int)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentCompetencyObjective table of the StudentCompetencyObjective aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentCompetencyObjective : IStudentCompetencyObjective, IHasETag, IStudentCompetencyObjectiveSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StudentCompetencyObjective resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _gradingPeriodReferenceExplicitlyAssigned;
        private GradingPeriod.GradingPeriodReference _gradingPeriodReference;
        private GradingPeriod.GradingPeriodReference ImplicitGradingPeriodReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_gradingPeriodReference == null && !_gradingPeriodReferenceExplicitlyAssigned)
                    _gradingPeriodReference = new GradingPeriod.GradingPeriodReference();

                return _gradingPeriodReference;
            }
        }

        [DataMember(Name="gradingPeriodReference")][NaturalKeyMember]
        public GradingPeriod.GradingPeriodReference GradingPeriodReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitGradingPeriodReference != null
                    && (_gradingPeriodReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference;

                return null;
            }
            set 
            { 
                _gradingPeriodReferenceExplicitlyAssigned = true;
                _gradingPeriodReference = value;
            }
        }
        private bool _objectiveCompetencyObjectiveReferenceExplicitlyAssigned;
        private CompetencyObjective.CompetencyObjectiveReference _objectiveCompetencyObjectiveReference;
        private CompetencyObjective.CompetencyObjectiveReference ImplicitObjectiveCompetencyObjectiveReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_objectiveCompetencyObjectiveReference == null && !_objectiveCompetencyObjectiveReferenceExplicitlyAssigned)
                    _objectiveCompetencyObjectiveReference = new CompetencyObjective.CompetencyObjectiveReference();

                return _objectiveCompetencyObjectiveReference;
            }
        }

        [DataMember(Name="objectiveCompetencyObjectiveReference")][NaturalKeyMember]
        public CompetencyObjective.CompetencyObjectiveReference ObjectiveCompetencyObjectiveReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitObjectiveCompetencyObjectiveReference != null
                    && (_objectiveCompetencyObjectiveReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitObjectiveCompetencyObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitObjectiveCompetencyObjectiveReference;

                return null;
            }
            set 
            { 
                _objectiveCompetencyObjectiveReferenceExplicitlyAssigned = true;
                _objectiveCompetencyObjectiveReference = value;
            }
        }
        private bool _studentProgramAssociationReferenceExplicitlyAssigned;
        private StudentProgramAssociation.StudentProgramAssociationReference _studentProgramAssociationReference;
        private StudentProgramAssociation.StudentProgramAssociationReference ImplicitStudentProgramAssociationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentProgramAssociationReference == null && !_studentProgramAssociationReferenceExplicitlyAssigned)
                    _studentProgramAssociationReference = new StudentProgramAssociation.StudentProgramAssociationReference();

                return _studentProgramAssociationReference;
            }
        }

        [DataMember(Name="studentProgramAssociationReference")]
        public StudentProgramAssociation.StudentProgramAssociationReference StudentProgramAssociationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentProgramAssociationReference != null
                    && (_studentProgramAssociationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentProgramAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentProgramAssociationReference;

                return null;
            }
            set 
            { 
                _studentProgramAssociationReferenceExplicitlyAssigned = true;
                _studentProgramAssociationReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        private bool _studentSectionAssociationReferenceExplicitlyAssigned;
        private StudentSectionAssociation.StudentSectionAssociationReference _studentSectionAssociationReference;
        private StudentSectionAssociation.StudentSectionAssociationReference ImplicitStudentSectionAssociationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentSectionAssociationReference == null && !_studentSectionAssociationReferenceExplicitlyAssigned)
                    _studentSectionAssociationReference = new StudentSectionAssociation.StudentSectionAssociationReference();

                return _studentSectionAssociationReference;
            }
        }

        [DataMember(Name="studentSectionAssociationReference")]
        public StudentSectionAssociation.StudentSectionAssociationReference StudentSectionAssociationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentSectionAssociationReference != null
                    && (_studentSectionAssociationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference;

                return null;
            }
            set 
            { 
                _studentSectionAssociationReferenceExplicitlyAssigned = true;
                _studentSectionAssociationReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime IStudentCompetencyObjective.GradingPeriodBeginDate
        {
            get
            {
                if (ImplicitGradingPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference.BeginDate;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradingPeriod
                _gradingPeriodReferenceExplicitlyAssigned = false;
                ImplicitGradingPeriodReference.BeginDate = value;
            }
        }

        /// <summary>
        /// The name of the period for which grades are reported.
        /// </summary>

        // IS in a reference (StudentCompetencyObjective.GradingPeriodDescriptorId), IS a lookup column 
        string IStudentCompetencyObjective.GradingPeriodDescriptor
        {
            get
            {
                if (ImplicitGradingPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference.GradingPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitGradingPeriodReference.GradingPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The designated title of the CompetencyObjective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentCompetencyObjective.Objective
        {
            get
            {
                if (ImplicitObjectiveCompetencyObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitObjectiveCompetencyObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitObjectiveCompetencyObjectiveReference.Objective;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ObjectiveCompetencyObjective
                _objectiveCompetencyObjectiveReferenceExplicitlyAssigned = false;
                ImplicitObjectiveCompetencyObjectiveReference.Objective = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentCompetencyObjective.ObjectiveEducationOrganizationId
        {
            get
            {
                if (ImplicitObjectiveCompetencyObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitObjectiveCompetencyObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitObjectiveCompetencyObjectiveReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ObjectiveCompetencyObjective
                _objectiveCompetencyObjectiveReferenceExplicitlyAssigned = false;
                ImplicitObjectiveCompetencyObjectiveReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The grade level for which the CompetencyObjective is targeted.
        /// </summary>

        // IS in a reference (StudentCompetencyObjective.ObjectiveGradeLevelDescriptorId), IS a lookup column 
        string IStudentCompetencyObjective.ObjectiveGradeLevelDescriptor
        {
            get
            {
                if (ImplicitObjectiveCompetencyObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitObjectiveCompetencyObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitObjectiveCompetencyObjectiveReference.ObjectiveGradeLevelDescriptor;

                return null;
            }
            set
            {
                ImplicitObjectiveCompetencyObjectiveReference.ObjectiveGradeLevelDescriptor = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentCompetencyObjective.SchoolId
        {
            get
            {
                if (ImplicitGradingPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradingPeriod
                _gradingPeriodReferenceExplicitlyAssigned = false;
                ImplicitGradingPeriodReference.SchoolId = value;

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.SchoolId = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentCompetencyObjective.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;

                // StudentProgramAssociation
                _studentProgramAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentProgramAssociationReference.StudentUniqueId = value;

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IStudentCompetencyObjective).GradingPeriodBeginDate != null) 
                    hash = hash * 23 + (this as IStudentCompetencyObjective).GradingPeriodBeginDate.GetHashCode();
 
                //Unified Type Property
                if ((this as IStudentCompetencyObjective).GradingPeriodDescriptor != null) 
                    hash = hash * 23 + (this as IStudentCompetencyObjective).GradingPeriodDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentCompetencyObjective).Objective != null) 
                    hash = hash * 23 + (this as IStudentCompetencyObjective).Objective.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentCompetencyObjective).ObjectiveEducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStudentCompetencyObjective).ObjectiveEducationOrganizationId.GetHashCode();
 
                //Unified Type Property
                if ((this as IStudentCompetencyObjective).ObjectiveGradeLevelDescriptor != null) 
                    hash = hash * 23 + (this as IStudentCompetencyObjective).ObjectiveGradeLevelDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentCompetencyObjective).SchoolId != null) 
                    hash = hash * 23 + (this as IStudentCompetencyObjective).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentCompetencyObjective).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentCompetencyObjective).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Month, day, and year of the Student's entry or assignment to the Section.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime? IStudentCompetencyObjective.BeginDate
        {
            get
            {
                if (ImplicitStudentProgramAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentProgramAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentProgramAssociationReference.BeginDate;

                return default(DateTime?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentProgramAssociation
                _studentProgramAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentProgramAssociationReference.BeginDate = value.GetValueOrDefault();

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.BeginDate = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentCompetencyObjective.ClassPeriodName
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.ClassPeriodName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.ClassPeriodName = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentCompetencyObjective.ClassroomIdentificationCode
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.ClassroomIdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.ClassroomIdentificationCode = value;
            }
        }

        /// <summary>
        /// The CompetencyLevel assessed for the student for the referenced LearningObjective.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="competencyLevelDescriptor")]
        public string CompetencyLevelDescriptor { get; set; }

        /// <summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="diagnosticStatement")]
        public string DiagnosticStatement { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? IStudentCompetencyObjective.EducationOrganizationId
        {
            get
            {
                if (ImplicitStudentProgramAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentProgramAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentProgramAssociationReference.EducationOrganizationId;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentProgramAssociation
                _studentProgramAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentProgramAssociationReference.EducationOrganizationId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentCompetencyObjective.LocalCourseCode
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.LocalCourseCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.LocalCourseCode = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? IStudentCompetencyObjective.ProgramEducationOrganizationId
        {
            get
            {
                if (ImplicitStudentProgramAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentProgramAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentProgramAssociationReference.ProgramEducationOrganizationId;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentProgramAssociation
                _studentProgramAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentProgramAssociationReference.ProgramEducationOrganizationId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentCompetencyObjective.ProgramName
        {
            get
            {
                if (ImplicitStudentProgramAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentProgramAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentProgramAssociationReference.ProgramName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentProgramAssociation
                _studentProgramAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentProgramAssociationReference.ProgramName = value;
            }
        }

        /// <summary>
        /// The type of program.
        /// </summary>

        // IS in a reference (StudentCompetencyObjective.ProgramTypeId), IS a lookup column 
        string IStudentCompetencyObjective.ProgramType
        {
            get
            {
                if (ImplicitStudentProgramAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentProgramAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentProgramAssociationReference.ProgramType;

                return null;
            }
            set
            {
                ImplicitStudentProgramAssociationReference.ProgramType = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short? IStudentCompetencyObjective.SchoolYear
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.SchoolYear;

                return default(short?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.SchoolYear = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? IStudentCompetencyObjective.SequenceOfCourse
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.SequenceOfCourse;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.SequenceOfCourse = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The term for the Session during the school year.
        /// </summary>

        // IS in a reference (StudentCompetencyObjective.TermDescriptorId), IS a lookup column 
        string IStudentCompetencyObjective.TermDescriptor
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitStudentSectionAssociationReference.TermDescriptor = value;
            }
        }

        /// <summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentCompetencyObjective.UniqueSectionCode
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.UniqueSectionCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.UniqueSectionCode = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentCompetencyObjective)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentCompetencyObjective) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentCompetencyObjectiveSynchronizationSourceSupport.IsBeginDateSupported                       { get { return true; } set { } }
 
        bool IStudentCompetencyObjectiveSynchronizationSourceSupport.IsClassPeriodNameSupported                 { get { return true; } set { } }
 
        bool IStudentCompetencyObjectiveSynchronizationSourceSupport.IsClassroomIdentificationCodeSupported     { get { return true; } set { } }
 
        bool IStudentCompetencyObjectiveSynchronizationSourceSupport.IsCompetencyLevelDescriptorSupported       { get { return true; } set { } }
 
        bool IStudentCompetencyObjectiveSynchronizationSourceSupport.IsDiagnosticStatementSupported             { get { return true; } set { } }
 
        bool IStudentCompetencyObjectiveSynchronizationSourceSupport.IsEducationOrganizationIdSupported         { get { return true; } set { } }
 
        bool IStudentCompetencyObjectiveSynchronizationSourceSupport.IsLocalCourseCodeSupported                 { get { return true; } set { } }
 
        bool IStudentCompetencyObjectiveSynchronizationSourceSupport.IsProgramEducationOrganizationIdSupported  { get { return true; } set { } }
 
        bool IStudentCompetencyObjectiveSynchronizationSourceSupport.IsProgramNameSupported                     { get { return true; } set { } }
 
        bool IStudentCompetencyObjectiveSynchronizationSourceSupport.IsProgramTypeSupported                     { get { return true; } set { } }
 
        bool IStudentCompetencyObjectiveSynchronizationSourceSupport.IsSchoolYearSupported                      { get { return true; } set { } }
 
        bool IStudentCompetencyObjectiveSynchronizationSourceSupport.IsSequenceOfCourseSupported                { get { return true; } set { } }
 
        bool IStudentCompetencyObjectiveSynchronizationSourceSupport.IsTermDescriptorSupported                  { get { return true; } set { } }
 
        bool IStudentCompetencyObjectiveSynchronizationSourceSupport.IsUniqueSectionCodeSupported               { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentCTEProgramAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.StudentCTEProgramAssociation
{
    /// <summary>
    /// Represents a reference to the StudentCTEProgramAssociation resource.
    /// </summary>
    [DataContract]
    public class StudentCTEProgramAssociationReference
    {
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="programEducationOrganizationId"), NaturalKeyMember]
        public int ProgramEducationOrganizationId { get; set; }

        [DataMember(Name="programName"), NaturalKeyMember]
        public string ProgramName { get; set; }

        [DataMember(Name="programType"), NaturalKeyMember]
        public string ProgramType { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentCTEProgramAssociation",
                            Href = "/studentCTEProgramAssociations"
                                    + "?beginDate=" + JsonConvert.SerializeObject(BeginDate).Replace("\"", string.Empty)            
                                    + "&educationOrganizationId=" + EducationOrganizationId            
                                    + "&programEducationOrganizationId=" + ProgramEducationOrganizationId            
                                    + "&programName=" + WebUtility.UrlEncode(ProgramName)            
                                    + "&programType=" + WebUtility.UrlEncode(ProgramType)            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime)
                && EducationOrganizationId != default(int)
                && ProgramEducationOrganizationId != default(int)
                && ProgramName != default(string)
                && ProgramType != default(string)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentCTEProgramAssociation table of the StudentCTEProgramAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentCTEProgramAssociation : IStudentCTEProgramAssociation, EdFi.Ods.Entities.Common.IStudentProgramAssociation, IHasETag, IStudentCTEProgramAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StudentCTEProgramAssociation()
        {
            StudentCTEProgramAssociationCTEPrograms = new List<StudentCTEProgramAssociationCTEProgram>();

            // Inherited lists
            StudentProgramAssociationServices = new List<StudentProgramAssociation.StudentProgramAssociationService>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the StudentCTEProgramAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        private bool _programReferenceExplicitlyAssigned;
        private Program.ProgramReference _programReference;
        private Program.ProgramReference ImplicitProgramReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_programReference == null && !_programReferenceExplicitlyAssigned)
                    _programReference = new Program.ProgramReference();

                return _programReference;
            }
        }

        [DataMember(Name="programReference")][NaturalKeyMember]
        public Program.ProgramReference ProgramReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitProgramReference != null
                    && (_programReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference;

                return null;
            }
            set 
            { 
                _programReferenceExplicitlyAssigned = true;
                _programReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the Student first received services.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentProgramAssociation.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentProgramAssociation.ProgramEducationOrganizationId
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentProgramAssociation.ProgramName
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.ProgramName = value;
            }
        }

        /// <summary>
        /// The type of program.
        /// </summary>

        // IS in a reference (StudentCTEProgramAssociation.ProgramTypeId), IS a lookup column 
        string IStudentProgramAssociation.ProgramType
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramType;

                return null;
            }
            set
            {
                ImplicitProgramReference.ProgramType = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentProgramAssociation.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStudentCTEProgramAssociation).BeginDate != null) 
                    hash = hash * 23 + (this as IStudentCTEProgramAssociation).BeginDate.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentCTEProgramAssociation).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStudentCTEProgramAssociation).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentCTEProgramAssociation).ProgramEducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStudentCTEProgramAssociation).ProgramEducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentCTEProgramAssociation).ProgramName != null) 
                    hash = hash * 23 + (this as IStudentCTEProgramAssociation).ProgramName.GetHashCode();
 
                //Unified Type Property
                if ((this as IStudentCTEProgramAssociation).ProgramType != null) 
                    hash = hash * 23 + (this as IStudentCTEProgramAssociation).ProgramType.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentCTEProgramAssociation).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentCTEProgramAssociation).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the Student exited the Program or stopped receiving services.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The reason the child left the Program within a school or district.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="reasonExitedDescriptor")]
        public string ReasonExitedDescriptor { get; set; }

        /// <summary>
        /// Indicates whether the Student received services during the summer session or between sessions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="servedOutsideOfRegularSession")]
        public bool? ServedOutsideOfRegularSession { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        private IList<StudentProgramAssociation.StudentProgramAssociationService> _studentProgramAssociationServices;
        private IList<IStudentProgramAssociationService> _studentProgramAssociationServicesCovariant;

        [DataMember(Name="services")]
        public IList<StudentProgramAssociation.StudentProgramAssociationService> StudentProgramAssociationServices 
        {
            get { return _studentProgramAssociationServices; }
            set 
            {
                _studentProgramAssociationServices = value;
                _studentProgramAssociationServicesCovariant = new CovariantIListAdapter<IStudentProgramAssociationService, StudentProgramAssociation.StudentProgramAssociationService>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentProgramAssociationService> IStudentProgramAssociation.StudentProgramAssociationServices
        {
            get { return _studentProgramAssociationServicesCovariant; }
            set { StudentProgramAssociationServices = new List<StudentProgramAssociation.StudentProgramAssociationService>(value.Cast<StudentProgramAssociation.StudentProgramAssociationService>()); }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<StudentCTEProgramAssociationCTEProgram> _studentCTEProgramAssociationCTEPrograms;
        private IList<IStudentCTEProgramAssociationCTEProgram> _studentCTEProgramAssociationCTEProgramsCovariant;

        [DataMember(Name="ctePrograms")]
        public IList<StudentCTEProgramAssociationCTEProgram> StudentCTEProgramAssociationCTEPrograms 
        { 
            get { return _studentCTEProgramAssociationCTEPrograms; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentCTEProgramAssociationCTEProgram>(value,
                    (s, e) => ((IStudentCTEProgramAssociationCTEProgram)e.Item).StudentCTEProgramAssociation = this);
                _studentCTEProgramAssociationCTEPrograms = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentCTEProgramAssociationCTEProgram, StudentCTEProgramAssociationCTEProgram>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentCTEProgramAssociationCTEProgram)e.Item).StudentCTEProgramAssociation = this;
                _studentCTEProgramAssociationCTEProgramsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentCTEProgramAssociationCTEProgram> IStudentCTEProgramAssociation.StudentCTEProgramAssociationCTEPrograms
        {
            get { return _studentCTEProgramAssociationCTEProgramsCovariant; }
            set { StudentCTEProgramAssociationCTEPrograms = new List<StudentCTEProgramAssociationCTEProgram>(value.Cast<StudentCTEProgramAssociationCTEProgram>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            // _studentProgramAssociationServices
            if (_studentCTEProgramAssociationCTEPrograms != null) foreach (var item in _studentCTEProgramAssociationCTEPrograms)
            {
                item.StudentCTEProgramAssociation = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentCTEProgramAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentCTEProgramAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentCTEProgramAssociationSynchronizationSourceSupport.IsEndDateSupported                                  { get { return true; } set { } }
 
        bool IStudentCTEProgramAssociationSynchronizationSourceSupport.IsReasonExitedDescriptorSupported                   { get { return true; } set { } }
 
        bool IStudentCTEProgramAssociationSynchronizationSourceSupport.IsServedOutsideOfRegularSessionSupported            { get { return true; } set { } }
 
        bool IStudentCTEProgramAssociationSynchronizationSourceSupport.IsStudentCTEProgramAssociationCTEProgramsSupported  { get { return true; } set { } }
 
        bool IStudentCTEProgramAssociationSynchronizationSourceSupport.IsStudentProgramAssociationServicesSupported        { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IStudentProgramAssociationService, bool> IStudentCTEProgramAssociationSynchronizationSourceSupport.IsStudentProgramAssociationServiceIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentCTEProgramAssociationCTEProgram, bool> IStudentCTEProgramAssociationSynchronizationSourceSupport.IsStudentCTEProgramAssociationCTEProgramIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentCTEProgramAssociationCTEProgram table of the StudentCTEProgramAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentCTEProgramAssociationCTEProgram : IStudentCTEProgramAssociationCTEProgram, IStudentCTEProgramAssociationCTEProgramSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentCTEProgramAssociation _studentCTEProgramAssociation;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentCTEProgramAssociation IStudentCTEProgramAssociationCTEProgram.StudentCTEProgramAssociation
        {
            get { return _studentCTEProgramAssociation; }
            set { _studentCTEProgramAssociation = value; }
        }

        internal IStudentCTEProgramAssociation StudentCTEProgramAssociation
        {
            set { _studentCTEProgramAssociation = value; }
        }

        /// <summary>
        /// A sequence of courses within an area of interest that is a student's educational road map to a chosen career.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="careerPathwayType"), NaturalKeyMember]
        public string CareerPathwayType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentCTEProgramAssociation != null) 
                    hash = hash * 23 + _studentCTEProgramAssociation.GetHashCode();
 
                // Standard Property
                if ((this as IStudentCTEProgramAssociationCTEProgram).CareerPathwayType != null) 
                    hash = hash * 23 + (this as IStudentCTEProgramAssociationCTEProgram).CareerPathwayType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Number and description of the CIP Code associated with the student's CTEProgram.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="cipCode")]
        public string CIPCode { get; set; }

        /// <summary>
        /// A boolean indicator of whether the Student has completed the CTEProgram.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="cteProgramCompletionIndicator")]
        public bool? CTEProgramCompletionIndicator { get; set; }

        /// <summary>
        /// A boolean indicator of whether this CTEProgram, is the student's primary CTEProgram.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primaryCTEProgramIndicator")]
        public bool? PrimaryCTEProgramIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentCTEProgramAssociationCTEProgram)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentCTEProgramAssociationCTEProgram) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentCTEProgramAssociationCTEProgramSynchronizationSourceSupport.IsCIPCodeSupported                        { get { return true; } set { } }
 
        bool IStudentCTEProgramAssociationCTEProgramSynchronizationSourceSupport.IsCTEProgramCompletionIndicatorSupported  { get { return true; } set { } }
 
        bool IStudentCTEProgramAssociationCTEProgramSynchronizationSourceSupport.IsPrimaryCTEProgramIndicatorSupported     { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentDisciplineIncidentAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.StudentDisciplineIncidentAssociation
{
    /// <summary>
    /// Represents a reference to the StudentDisciplineIncidentAssociation resource.
    /// </summary>
    [DataContract]
    public class StudentDisciplineIncidentAssociationReference
    {
        [DataMember(Name="incidentIdentifier"), NaturalKeyMember]
        public string IncidentIdentifier { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentDisciplineIncidentAssociation",
                            Href = "/studentDisciplineIncidentAssociations"
                                    + "?incidentIdentifier=" + WebUtility.UrlEncode(IncidentIdentifier)            
                                    + "&schoolId=" + SchoolId            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return IncidentIdentifier != default(string)
                && SchoolId != default(int)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentDisciplineIncidentAssociation table of the StudentDisciplineIncidentAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentDisciplineIncidentAssociation : IStudentDisciplineIncidentAssociation, IHasETag, IStudentDisciplineIncidentAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StudentDisciplineIncidentAssociation()
        {
            StudentDisciplineIncidentAssociationBehaviors = new List<StudentDisciplineIncidentAssociationBehavior>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the StudentDisciplineIncidentAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _disciplineIncidentReferenceExplicitlyAssigned;
        private DisciplineIncident.DisciplineIncidentReference _disciplineIncidentReference;
        private DisciplineIncident.DisciplineIncidentReference ImplicitDisciplineIncidentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_disciplineIncidentReference == null && !_disciplineIncidentReferenceExplicitlyAssigned)
                    _disciplineIncidentReference = new DisciplineIncident.DisciplineIncidentReference();

                return _disciplineIncidentReference;
            }
        }

        [DataMember(Name="disciplineIncidentReference")][NaturalKeyMember]
        public DisciplineIncident.DisciplineIncidentReference DisciplineIncidentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitDisciplineIncidentReference != null
                    && (_disciplineIncidentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitDisciplineIncidentReference.IsReferenceFullyDefined()))
                    return ImplicitDisciplineIncidentReference;

                return null;
            }
            set 
            { 
                _disciplineIncidentReferenceExplicitlyAssigned = true;
                _disciplineIncidentReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentDisciplineIncidentAssociation.IncidentIdentifier
        {
            get
            {
                if (ImplicitDisciplineIncidentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitDisciplineIncidentReference.IsReferenceFullyDefined()))
                    return ImplicitDisciplineIncidentReference.IncidentIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // DisciplineIncident
                _disciplineIncidentReferenceExplicitlyAssigned = false;
                ImplicitDisciplineIncidentReference.IncidentIdentifier = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentDisciplineIncidentAssociation.SchoolId
        {
            get
            {
                if (ImplicitDisciplineIncidentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitDisciplineIncidentReference.IsReferenceFullyDefined()))
                    return ImplicitDisciplineIncidentReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // DisciplineIncident
                _disciplineIncidentReferenceExplicitlyAssigned = false;
                ImplicitDisciplineIncidentReference.SchoolId = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentDisciplineIncidentAssociation.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IStudentDisciplineIncidentAssociation).IncidentIdentifier != null) 
                    hash = hash * 23 + (this as IStudentDisciplineIncidentAssociation).IncidentIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentDisciplineIncidentAssociation).SchoolId != null) 
                    hash = hash * 23 + (this as IStudentDisciplineIncidentAssociation).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentDisciplineIncidentAssociation).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentDisciplineIncidentAssociation).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The role or type of participation of a student in a discipline incident;           for example:          Victim          Perpetrator          Witness          Reporter.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="studentParticipationCodeType")]
        public string StudentParticipationCodeType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<StudentDisciplineIncidentAssociationBehavior> _studentDisciplineIncidentAssociationBehaviors;
        private IList<IStudentDisciplineIncidentAssociationBehavior> _studentDisciplineIncidentAssociationBehaviorsCovariant;

        [DataMember(Name="behaviors")]
        public IList<StudentDisciplineIncidentAssociationBehavior> StudentDisciplineIncidentAssociationBehaviors 
        { 
            get { return _studentDisciplineIncidentAssociationBehaviors; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentDisciplineIncidentAssociationBehavior>(value,
                    (s, e) => ((IStudentDisciplineIncidentAssociationBehavior)e.Item).StudentDisciplineIncidentAssociation = this);
                _studentDisciplineIncidentAssociationBehaviors = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentDisciplineIncidentAssociationBehavior, StudentDisciplineIncidentAssociationBehavior>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentDisciplineIncidentAssociationBehavior)e.Item).StudentDisciplineIncidentAssociation = this;
                _studentDisciplineIncidentAssociationBehaviorsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentDisciplineIncidentAssociationBehavior> IStudentDisciplineIncidentAssociation.StudentDisciplineIncidentAssociationBehaviors
        {
            get { return _studentDisciplineIncidentAssociationBehaviorsCovariant; }
            set { StudentDisciplineIncidentAssociationBehaviors = new List<StudentDisciplineIncidentAssociationBehavior>(value.Cast<StudentDisciplineIncidentAssociationBehavior>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_studentDisciplineIncidentAssociationBehaviors != null) foreach (var item in _studentDisciplineIncidentAssociationBehaviors)
            {
                item.StudentDisciplineIncidentAssociation = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentDisciplineIncidentAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentDisciplineIncidentAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentDisciplineIncidentAssociationSynchronizationSourceSupport.IsStudentDisciplineIncidentAssociationBehaviorsSupported  { get { return true; } set { } }
 
        bool IStudentDisciplineIncidentAssociationSynchronizationSourceSupport.IsStudentParticipationCodeTypeSupported                   { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IStudentDisciplineIncidentAssociationBehavior, bool> IStudentDisciplineIncidentAssociationSynchronizationSourceSupport.IsStudentDisciplineIncidentAssociationBehaviorIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentDisciplineIncidentAssociationBehavior table of the StudentDisciplineIncidentAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentDisciplineIncidentAssociationBehavior : IStudentDisciplineIncidentAssociationBehavior, IStudentDisciplineIncidentAssociationBehaviorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentDisciplineIncidentAssociation _studentDisciplineIncidentAssociation;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentDisciplineIncidentAssociation IStudentDisciplineIncidentAssociationBehavior.StudentDisciplineIncidentAssociation
        {
            get { return _studentDisciplineIncidentAssociation; }
            set { _studentDisciplineIncidentAssociation = value; }
        }

        internal IStudentDisciplineIncidentAssociation StudentDisciplineIncidentAssociation
        {
            set { _studentDisciplineIncidentAssociation = value; }
        }

        /// <summary>
        /// Describes behavior by category and provides a detailed description.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="behaviorDescriptor"), NaturalKeyMember]
        public string BehaviorDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentDisciplineIncidentAssociation != null) 
                    hash = hash * 23 + _studentDisciplineIncidentAssociation.GetHashCode();
 
                // Standard Property
                if ((this as IStudentDisciplineIncidentAssociationBehavior).BehaviorDescriptor != null) 
                    hash = hash * 23 + (this as IStudentDisciplineIncidentAssociationBehavior).BehaviorDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Specifies a more granular level of detail of a behavior involved in the incident.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="behaviorDetailedDescription")]
        public string BehaviorDetailedDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentDisciplineIncidentAssociationBehavior)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentDisciplineIncidentAssociationBehavior) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentDisciplineIncidentAssociationBehaviorSynchronizationSourceSupport.IsBehaviorDetailedDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentEducationOrganizationAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.StudentEducationOrganizationAssociation
{
    /// <summary>
    /// Represents a reference to the StudentEducationOrganizationAssociation resource.
    /// </summary>
    [DataContract]
    public class StudentEducationOrganizationAssociationReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="responsibilityDescriptor"), NaturalKeyMember]
        public string ResponsibilityDescriptor { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentEducationOrganizationAssociation",
                            Href = "/studentEducationOrganizationAssociations"
                                    + "?educationOrganizationId=" + EducationOrganizationId            
                                    + "&responsibilityDescriptor=" + WebUtility.UrlEncode(ResponsibilityDescriptor)            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int)
                && ResponsibilityDescriptor != default(string)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentEducationOrganizationAssociation table of the StudentEducationOrganizationAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentEducationOrganizationAssociation : IStudentEducationOrganizationAssociation, IHasETag, IStudentEducationOrganizationAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StudentEducationOrganizationAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentEducationOrganizationAssociation.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// Indications of an education organization's responsibility for a student, such as accountability, attendance, funding, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="responsibilityDescriptor"), NaturalKeyMember]
        public string ResponsibilityDescriptor { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentEducationOrganizationAssociation.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IStudentEducationOrganizationAssociation).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStudentEducationOrganizationAssociation).EducationOrganizationId.GetHashCode();
 
                // Standard Property
                if ((this as IStudentEducationOrganizationAssociation).ResponsibilityDescriptor != null) 
                    hash = hash * 23 + (this as IStudentEducationOrganizationAssociation).ResponsibilityDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentEducationOrganizationAssociation).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentEducationOrganizationAssociation).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentEducationOrganizationAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentEducationOrganizationAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentGradebookEntry

namespace EdFi.Ods.Api.Models.Resources.V2.StudentGradebookEntry
{
    /// <summary>
    /// Represents a reference to the StudentGradebookEntry resource.
    /// </summary>
    [DataContract]
    public class StudentGradebookEntryReference
    {
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="classPeriodName"), NaturalKeyMember]
        public string ClassPeriodName { get; set; }

        [DataMember(Name="classroomIdentificationCode"), NaturalKeyMember]
        public string ClassroomIdentificationCode { get; set; }

        [DataMember(Name="dateAssigned"), NaturalKeyMember]
        public DateTime DateAssigned { get; set; }

        [DataMember(Name="gradebookEntryTitle"), NaturalKeyMember]
        public string GradebookEntryTitle { get; set; }

        [DataMember(Name="localCourseCode"), NaturalKeyMember]
        public string LocalCourseCode { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sequenceOfCourse"), NaturalKeyMember]
        public int SequenceOfCourse { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        [DataMember(Name="uniqueSectionCode"), NaturalKeyMember]
        public string UniqueSectionCode { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentGradebookEntry",
                            Href = "/studentGradebookEntries"
                                    + "?beginDate=" + JsonConvert.SerializeObject(BeginDate).Replace("\"", string.Empty)            
                                    + "&classPeriodName=" + WebUtility.UrlEncode(ClassPeriodName)            
                                    + "&classroomIdentificationCode=" + WebUtility.UrlEncode(ClassroomIdentificationCode)            
                                    + "&dateAssigned=" + JsonConvert.SerializeObject(DateAssigned).Replace("\"", string.Empty)            
                                    + "&gradebookEntryTitle=" + WebUtility.UrlEncode(GradebookEntryTitle)            
                                    + "&localCourseCode=" + WebUtility.UrlEncode(LocalCourseCode)            
                                    + "&schoolId=" + SchoolId            
                                    + "&schoolYear=" + SchoolYear            
                                    + "&sequenceOfCourse=" + SequenceOfCourse            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                                    + "&termDescriptor=" + WebUtility.UrlEncode(TermDescriptor)            
                                    + "&uniqueSectionCode=" + WebUtility.UrlEncode(UniqueSectionCode)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime)
                && ClassPeriodName != default(string)
                && ClassroomIdentificationCode != default(string)
                && DateAssigned != default(DateTime)
                && GradebookEntryTitle != default(string)
                && LocalCourseCode != default(string)
                && SchoolId != default(int)
                && SchoolYear != default(short)
                && SequenceOfCourse != default(int)
                && StudentUniqueId != default(string)
                && TermDescriptor != default(string)
                && UniqueSectionCode != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentGradebookEntry table of the StudentGradebookEntry aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentGradebookEntry : IStudentGradebookEntry, IHasETag, IStudentGradebookEntrySynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StudentGradebookEntry resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _gradebookEntryReferenceExplicitlyAssigned;
        private GradebookEntry.GradebookEntryReference _gradebookEntryReference;
        private GradebookEntry.GradebookEntryReference ImplicitGradebookEntryReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_gradebookEntryReference == null && !_gradebookEntryReferenceExplicitlyAssigned)
                    _gradebookEntryReference = new GradebookEntry.GradebookEntryReference();

                return _gradebookEntryReference;
            }
        }

        [DataMember(Name="gradebookEntryReference")][NaturalKeyMember]
        public GradebookEntry.GradebookEntryReference GradebookEntryReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitGradebookEntryReference != null
                    && (_gradebookEntryReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitGradebookEntryReference.IsReferenceFullyDefined()))
                    return ImplicitGradebookEntryReference;

                return null;
            }
            set 
            { 
                _gradebookEntryReferenceExplicitlyAssigned = true;
                _gradebookEntryReference = value;
            }
        }
        private bool _studentSectionAssociationReferenceExplicitlyAssigned;
        private StudentSectionAssociation.StudentSectionAssociationReference _studentSectionAssociationReference;
        private StudentSectionAssociation.StudentSectionAssociationReference ImplicitStudentSectionAssociationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentSectionAssociationReference == null && !_studentSectionAssociationReferenceExplicitlyAssigned)
                    _studentSectionAssociationReference = new StudentSectionAssociation.StudentSectionAssociationReference();

                return _studentSectionAssociationReference;
            }
        }

        [DataMember(Name="studentSectionAssociationReference")][NaturalKeyMember]
        public StudentSectionAssociation.StudentSectionAssociationReference StudentSectionAssociationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentSectionAssociationReference != null
                    && (_studentSectionAssociationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference;

                return null;
            }
            set 
            { 
                _studentSectionAssociationReferenceExplicitlyAssigned = true;
                _studentSectionAssociationReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Month, day, and year of the Student's entry or assignment to the Section.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime IStudentGradebookEntry.BeginDate
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.BeginDate;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.BeginDate = value;
            }
        }

        /// <summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentGradebookEntry.ClassPeriodName
        {
            get
            {
                if (ImplicitGradebookEntryReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradebookEntryReference.IsReferenceFullyDefined()))
                    return ImplicitGradebookEntryReference.ClassPeriodName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradebookEntry
                _gradebookEntryReferenceExplicitlyAssigned = false;
                ImplicitGradebookEntryReference.ClassPeriodName = value;

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.ClassPeriodName = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentGradebookEntry.ClassroomIdentificationCode
        {
            get
            {
                if (ImplicitGradebookEntryReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradebookEntryReference.IsReferenceFullyDefined()))
                    return ImplicitGradebookEntryReference.ClassroomIdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradebookEntry
                _gradebookEntryReferenceExplicitlyAssigned = false;
                ImplicitGradebookEntryReference.ClassroomIdentificationCode = value;

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.ClassroomIdentificationCode = value;
            }
        }

        /// <summary>
        /// The date the assignment, homework, or assessment was assigned or executed.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime IStudentGradebookEntry.DateAssigned
        {
            get
            {
                if (ImplicitGradebookEntryReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradebookEntryReference.IsReferenceFullyDefined()))
                    return ImplicitGradebookEntryReference.DateAssigned;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradebookEntry
                _gradebookEntryReferenceExplicitlyAssigned = false;
                ImplicitGradebookEntryReference.DateAssigned = value;
            }
        }

        /// <summary>
        /// The name or title of the activity to be recorded in the GradebookEntry.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentGradebookEntry.GradebookEntryTitle
        {
            get
            {
                if (ImplicitGradebookEntryReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradebookEntryReference.IsReferenceFullyDefined()))
                    return ImplicitGradebookEntryReference.GradebookEntryTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradebookEntry
                _gradebookEntryReferenceExplicitlyAssigned = false;
                ImplicitGradebookEntryReference.GradebookEntryTitle = value;
            }
        }

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentGradebookEntry.LocalCourseCode
        {
            get
            {
                if (ImplicitGradebookEntryReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradebookEntryReference.IsReferenceFullyDefined()))
                    return ImplicitGradebookEntryReference.LocalCourseCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradebookEntry
                _gradebookEntryReferenceExplicitlyAssigned = false;
                ImplicitGradebookEntryReference.LocalCourseCode = value;

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.LocalCourseCode = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentGradebookEntry.SchoolId
        {
            get
            {
                if (ImplicitGradebookEntryReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradebookEntryReference.IsReferenceFullyDefined()))
                    return ImplicitGradebookEntryReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradebookEntry
                _gradebookEntryReferenceExplicitlyAssigned = false;
                ImplicitGradebookEntryReference.SchoolId = value;

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.SchoolId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short IStudentGradebookEntry.SchoolYear
        {
            get
            {
                if (ImplicitGradebookEntryReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradebookEntryReference.IsReferenceFullyDefined()))
                    return ImplicitGradebookEntryReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradebookEntry
                _gradebookEntryReferenceExplicitlyAssigned = false;
                ImplicitGradebookEntryReference.SchoolYear = value;

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentGradebookEntry.SequenceOfCourse
        {
            get
            {
                if (ImplicitGradebookEntryReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradebookEntryReference.IsReferenceFullyDefined()))
                    return ImplicitGradebookEntryReference.SequenceOfCourse;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradebookEntry
                _gradebookEntryReferenceExplicitlyAssigned = false;
                ImplicitGradebookEntryReference.SequenceOfCourse = value;

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.SequenceOfCourse = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentGradebookEntry.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// The term for the Session during the school year.
        /// </summary>

        // IS in a reference (StudentGradebookEntry.TermDescriptorId), IS a lookup column 
        string IStudentGradebookEntry.TermDescriptor
        {
            get
            {
                if (ImplicitGradebookEntryReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradebookEntryReference.IsReferenceFullyDefined()))
                    return ImplicitGradebookEntryReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitGradebookEntryReference.TermDescriptor = value;
                ImplicitStudentSectionAssociationReference.TermDescriptor = value;
            }
        }

        /// <summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentGradebookEntry.UniqueSectionCode
        {
            get
            {
                if (ImplicitGradebookEntryReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradebookEntryReference.IsReferenceFullyDefined()))
                    return ImplicitGradebookEntryReference.UniqueSectionCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradebookEntry
                _gradebookEntryReferenceExplicitlyAssigned = false;
                ImplicitGradebookEntryReference.UniqueSectionCode = value;

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.UniqueSectionCode = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IStudentGradebookEntry).BeginDate != null) 
                    hash = hash * 23 + (this as IStudentGradebookEntry).BeginDate.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentGradebookEntry).ClassPeriodName != null) 
                    hash = hash * 23 + (this as IStudentGradebookEntry).ClassPeriodName.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentGradebookEntry).ClassroomIdentificationCode != null) 
                    hash = hash * 23 + (this as IStudentGradebookEntry).ClassroomIdentificationCode.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentGradebookEntry).DateAssigned != null) 
                    hash = hash * 23 + (this as IStudentGradebookEntry).DateAssigned.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentGradebookEntry).GradebookEntryTitle != null) 
                    hash = hash * 23 + (this as IStudentGradebookEntry).GradebookEntryTitle.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentGradebookEntry).LocalCourseCode != null) 
                    hash = hash * 23 + (this as IStudentGradebookEntry).LocalCourseCode.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentGradebookEntry).SchoolId != null) 
                    hash = hash * 23 + (this as IStudentGradebookEntry).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentGradebookEntry).SchoolYear != null) 
                    hash = hash * 23 + (this as IStudentGradebookEntry).SchoolYear.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentGradebookEntry).SequenceOfCourse != null) 
                    hash = hash * 23 + (this as IStudentGradebookEntry).SequenceOfCourse.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentGradebookEntry).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentGradebookEntry).StudentUniqueId.GetHashCode();
 
                //Unified Type Property
                if ((this as IStudentGradebookEntry).TermDescriptor != null) 
                    hash = hash * 23 + (this as IStudentGradebookEntry).TermDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentGradebookEntry).UniqueSectionCode != null) 
                    hash = hash * 23 + (this as IStudentGradebookEntry).UniqueSectionCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The CompetencyLevel assessed for the student for the referenced LearningObjective.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="competencyLevelDescriptor")]
        public string CompetencyLevelDescriptor { get; set; }

        /// <summary>
        /// The date an assignment was turned in or the date of an assessment.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="dateFulfilled")]
        public DateTime? DateFulfilled { get; set; }

        /// <summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="diagnosticStatement")]
        public string DiagnosticStatement { get; set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="letterGradeEarned")]
        public string LetterGradeEarned { get; set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="numericGradeEarned")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? NumericGradeEarned { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentGradebookEntry)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentGradebookEntry) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentGradebookEntrySynchronizationSourceSupport.IsCompetencyLevelDescriptorSupported  { get { return true; } set { } }
 
        bool IStudentGradebookEntrySynchronizationSourceSupport.IsDateFulfilledSupported              { get { return true; } set { } }
 
        bool IStudentGradebookEntrySynchronizationSourceSupport.IsDiagnosticStatementSupported        { get { return true; } set { } }
 
        bool IStudentGradebookEntrySynchronizationSourceSupport.IsLetterGradeEarnedSupported          { get { return true; } set { } }
 
        bool IStudentGradebookEntrySynchronizationSourceSupport.IsNumericGradeEarnedSupported         { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentIdentificationSystemDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.StudentIdentificationSystemDescriptor
{
    /// <summary>
    /// A class which represents the edfi.StudentIdentificationSystemDescriptor table of the StudentIdentificationSystemDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentIdentificationSystemDescriptor : IStudentIdentificationSystemDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IStudentIdentificationSystemDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StudentIdentificationSystemDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="studentIdentificationSystemDescriptorId"), NaturalKeyMember]
        public int StudentIdentificationSystemDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return StudentIdentificationSystemDescriptorId; }
            set { StudentIdentificationSystemDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IStudentIdentificationSystemDescriptor).StudentIdentificationSystemDescriptorId != null) 
                    hash = hash * 23 + (this as IStudentIdentificationSystemDescriptor).StudentIdentificationSystemDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="studentIdentificationSystemType")]
        public string StudentIdentificationSystemType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentIdentificationSystemDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentIdentificationSystemDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentIdentificationSystemDescriptorSynchronizationSourceSupport.IsCodeValueSupported                        { get { return true; } set { } }
 
        bool IStudentIdentificationSystemDescriptorSynchronizationSourceSupport.IsDescriptionSupported                      { get { return true; } set { } }
 
        bool IStudentIdentificationSystemDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported               { get { return true; } set { } }
 
        bool IStudentIdentificationSystemDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported                 { get { return true; } set { } }
 
        bool IStudentIdentificationSystemDescriptorSynchronizationSourceSupport.IsNamespaceSupported                        { get { return true; } set { } }
 
        bool IStudentIdentificationSystemDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported                { get { return true; } set { } }
 
        bool IStudentIdentificationSystemDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported                 { get { return true; } set { } }
 
        bool IStudentIdentificationSystemDescriptorSynchronizationSourceSupport.IsStudentIdentificationSystemTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentIdentificationSystemType

namespace EdFi.Ods.Api.Models.Resources.V2.StudentIdentificationSystemType
{
    /// <summary>
    /// A class which represents the edfi.StudentIdentificationSystemType table of the StudentIdentificationSystemType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentIdentificationSystemType : IStudentIdentificationSystemType, IHasETag, IStudentIdentificationSystemTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StudentIdentificationSystemType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for StudentIdentificationSystem
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="studentIdentificationSystemTypeId"), NaturalKeyMember]
        public int StudentIdentificationSystemTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStudentIdentificationSystemType).StudentIdentificationSystemTypeId != null) 
                    hash = hash * 23 + (this as IStudentIdentificationSystemType).StudentIdentificationSystemTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the StudentIdentificationSystem type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the StudentIdentificationSystem type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentIdentificationSystemType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentIdentificationSystemType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentIdentificationSystemTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IStudentIdentificationSystemTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IStudentIdentificationSystemTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentInterventionAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.StudentInterventionAssociation
{
    /// <summary>
    /// Represents a reference to the StudentInterventionAssociation resource.
    /// </summary>
    [DataContract]
    public class StudentInterventionAssociationReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="interventionIdentificationCode"), NaturalKeyMember]
        public string InterventionIdentificationCode { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentInterventionAssociation",
                            Href = "/studentInterventionAssociations"
                                    + "?educationOrganizationId=" + EducationOrganizationId            
                                    + "&interventionIdentificationCode=" + WebUtility.UrlEncode(InterventionIdentificationCode)            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int)
                && InterventionIdentificationCode != default(string)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentInterventionAssociation table of the StudentInterventionAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentInterventionAssociation : IStudentInterventionAssociation, IHasETag, IStudentInterventionAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StudentInterventionAssociation()
        {
            StudentInterventionAssociationInterventionEffectivenesses = new List<StudentInterventionAssociationInterventionEffectiveness>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the StudentInterventionAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _cohortReferenceExplicitlyAssigned;
        private Cohort.CohortReference _cohortReference;
        private Cohort.CohortReference ImplicitCohortReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_cohortReference == null && !_cohortReferenceExplicitlyAssigned)
                    _cohortReference = new Cohort.CohortReference();

                return _cohortReference;
            }
        }

        [DataMember(Name="cohortReference")]
        public Cohort.CohortReference CohortReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitCohortReference != null
                    && (_cohortReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCohortReference.IsReferenceFullyDefined()))
                    return ImplicitCohortReference;

                return null;
            }
            set 
            { 
                _cohortReferenceExplicitlyAssigned = true;
                _cohortReference = value;
            }
        }
        private bool _interventionReferenceExplicitlyAssigned;
        private Intervention.InterventionReference _interventionReference;
        private Intervention.InterventionReference ImplicitInterventionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_interventionReference == null && !_interventionReferenceExplicitlyAssigned)
                    _interventionReference = new Intervention.InterventionReference();

                return _interventionReference;
            }
        }

        [DataMember(Name="interventionReference")][NaturalKeyMember]
        public Intervention.InterventionReference InterventionReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitInterventionReference != null
                    && (_interventionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitInterventionReference.IsReferenceFullyDefined()))
                    return ImplicitInterventionReference;

                return null;
            }
            set 
            { 
                _interventionReferenceExplicitlyAssigned = true;
                _interventionReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentInterventionAssociation.EducationOrganizationId
        {
            get
            {
                if (ImplicitInterventionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitInterventionReference.IsReferenceFullyDefined()))
                    return ImplicitInterventionReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Intervention
                _interventionReferenceExplicitlyAssigned = false;
                ImplicitInterventionReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentInterventionAssociation.InterventionIdentificationCode
        {
            get
            {
                if (ImplicitInterventionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitInterventionReference.IsReferenceFullyDefined()))
                    return ImplicitInterventionReference.InterventionIdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Intervention
                _interventionReferenceExplicitlyAssigned = false;
                ImplicitInterventionReference.InterventionIdentificationCode = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentInterventionAssociation.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IStudentInterventionAssociation).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStudentInterventionAssociation).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentInterventionAssociation).InterventionIdentificationCode != null) 
                    hash = hash * 23 + (this as IStudentInterventionAssociation).InterventionIdentificationCode.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentInterventionAssociation).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentInterventionAssociation).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? IStudentInterventionAssociation.CohortEducationOrganizationId
        {
            get
            {
                if (ImplicitCohortReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCohortReference.IsReferenceFullyDefined()))
                    return ImplicitCohortReference.EducationOrganizationId;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Cohort
                _cohortReferenceExplicitlyAssigned = false;
                ImplicitCohortReference.EducationOrganizationId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The name or ID for the Cohort.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentInterventionAssociation.CohortIdentifier
        {
            get
            {
                if (ImplicitCohortReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCohortReference.IsReferenceFullyDefined()))
                    return ImplicitCohortReference.CohortIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Cohort
                _cohortReferenceExplicitlyAssigned = false;
                ImplicitCohortReference.CohortIdentifier = value;
            }
        }

        /// <summary>
        /// A statement provided by the assigner that provides information regarding why the student was assigned to this intervention.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="diagnosticStatement")]
        public string DiagnosticStatement { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<StudentInterventionAssociationInterventionEffectiveness> _studentInterventionAssociationInterventionEffectivenesses;
        private IList<IStudentInterventionAssociationInterventionEffectiveness> _studentInterventionAssociationInterventionEffectivenessesCovariant;

        [DataMember(Name="interventionEffectivenesses")]
        public IList<StudentInterventionAssociationInterventionEffectiveness> StudentInterventionAssociationInterventionEffectivenesses 
        { 
            get { return _studentInterventionAssociationInterventionEffectivenesses; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentInterventionAssociationInterventionEffectiveness>(value,
                    (s, e) => ((IStudentInterventionAssociationInterventionEffectiveness)e.Item).StudentInterventionAssociation = this);
                _studentInterventionAssociationInterventionEffectivenesses = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentInterventionAssociationInterventionEffectiveness, StudentInterventionAssociationInterventionEffectiveness>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentInterventionAssociationInterventionEffectiveness)e.Item).StudentInterventionAssociation = this;
                _studentInterventionAssociationInterventionEffectivenessesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentInterventionAssociationInterventionEffectiveness> IStudentInterventionAssociation.StudentInterventionAssociationInterventionEffectivenesses
        {
            get { return _studentInterventionAssociationInterventionEffectivenessesCovariant; }
            set { StudentInterventionAssociationInterventionEffectivenesses = new List<StudentInterventionAssociationInterventionEffectiveness>(value.Cast<StudentInterventionAssociationInterventionEffectiveness>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_studentInterventionAssociationInterventionEffectivenesses != null) foreach (var item in _studentInterventionAssociationInterventionEffectivenesses)
            {
                item.StudentInterventionAssociation = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentInterventionAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentInterventionAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentInterventionAssociationSynchronizationSourceSupport.IsCohortEducationOrganizationIdSupported                              { get { return true; } set { } }
 
        bool IStudentInterventionAssociationSynchronizationSourceSupport.IsCohortIdentifierSupported                                           { get { return true; } set { } }
 
        bool IStudentInterventionAssociationSynchronizationSourceSupport.IsDiagnosticStatementSupported                                        { get { return true; } set { } }
 
        bool IStudentInterventionAssociationSynchronizationSourceSupport.IsStudentInterventionAssociationInterventionEffectivenessesSupported  { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IStudentInterventionAssociationInterventionEffectiveness, bool> IStudentInterventionAssociationSynchronizationSourceSupport.IsStudentInterventionAssociationInterventionEffectivenessIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentInterventionAssociationInterventionEffectiveness table of the StudentInterventionAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentInterventionAssociationInterventionEffectiveness : IStudentInterventionAssociationInterventionEffectiveness, IStudentInterventionAssociationInterventionEffectivenessSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentInterventionAssociation _studentInterventionAssociation;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentInterventionAssociation IStudentInterventionAssociationInterventionEffectiveness.StudentInterventionAssociation
        {
            get { return _studentInterventionAssociation; }
            set { _studentInterventionAssociation = value; }
        }

        internal IStudentInterventionAssociation StudentInterventionAssociation
        {
            set { _studentInterventionAssociation = value; }
        }

        /// <summary>
        /// Targeted purpose of the intervention (e.g., attendance issue, dropout risk) for which the effectiveness is measured.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="diagnosisDescriptor"), NaturalKeyMember]
        public string DiagnosisDescriptor { get; set; }

        /// <summary>
        /// Grade level for which effectiveness is measured.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }

        /// <summary>
        /// Population for which effectiveness is measured.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="populationServedType"), NaturalKeyMember]
        public string PopulationServedType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentInterventionAssociation != null) 
                    hash = hash * 23 + _studentInterventionAssociation.GetHashCode();
 
                // Standard Property
                if ((this as IStudentInterventionAssociationInterventionEffectiveness).DiagnosisDescriptor != null) 
                    hash = hash * 23 + (this as IStudentInterventionAssociationInterventionEffectiveness).DiagnosisDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as IStudentInterventionAssociationInterventionEffectiveness).GradeLevelDescriptor != null) 
                    hash = hash * 23 + (this as IStudentInterventionAssociationInterventionEffectiveness).GradeLevelDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as IStudentInterventionAssociationInterventionEffectiveness).PopulationServedType != null) 
                    hash = hash * 23 + (this as IStudentInterventionAssociationInterventionEffectiveness).PopulationServedType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Along a percentile distribution of students, the improvement index represents the change in an average student's percentile rank that is considered to be due to the intervention.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="improvementIndex")]
        public int? ImprovementIndex { get; set; }

        /// <summary>
        /// An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="interventionEffectivenessRatingType")]
        public string InterventionEffectivenessRatingType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentInterventionAssociationInterventionEffectiveness)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentInterventionAssociationInterventionEffectiveness) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentInterventionAssociationInterventionEffectivenessSynchronizationSourceSupport.IsImprovementIndexSupported                     { get { return true; } set { } }
 
        bool IStudentInterventionAssociationInterventionEffectivenessSynchronizationSourceSupport.IsInterventionEffectivenessRatingTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentInterventionAttendanceEvent

namespace EdFi.Ods.Api.Models.Resources.V2.StudentInterventionAttendanceEvent
{
    /// <summary>
    /// Represents a reference to the StudentInterventionAttendanceEvent resource.
    /// </summary>
    [DataContract]
    public class StudentInterventionAttendanceEventReference
    {
        [DataMember(Name="attendanceEventCategoryDescriptor"), NaturalKeyMember]
        public string AttendanceEventCategoryDescriptor { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="eventDate"), NaturalKeyMember]
        public DateTime EventDate { get; set; }

        [DataMember(Name="interventionIdentificationCode"), NaturalKeyMember]
        public string InterventionIdentificationCode { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentInterventionAttendanceEvent",
                            Href = "/studentInterventionAttendanceEvents"
                                    + "?attendanceEventCategoryDescriptor=" + WebUtility.UrlEncode(AttendanceEventCategoryDescriptor)            
                                    + "&educationOrganizationId=" + EducationOrganizationId            
                                    + "&eventDate=" + JsonConvert.SerializeObject(EventDate).Replace("\"", string.Empty)            
                                    + "&interventionIdentificationCode=" + WebUtility.UrlEncode(InterventionIdentificationCode)            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return AttendanceEventCategoryDescriptor != default(string)
                && EducationOrganizationId != default(int)
                && EventDate != default(DateTime)
                && InterventionIdentificationCode != default(string)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentInterventionAttendanceEvent table of the StudentInterventionAttendanceEvent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentInterventionAttendanceEvent : IStudentInterventionAttendanceEvent, IHasETag, IStudentInterventionAttendanceEventSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StudentInterventionAttendanceEvent resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _interventionReferenceExplicitlyAssigned;
        private Intervention.InterventionReference _interventionReference;
        private Intervention.InterventionReference ImplicitInterventionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_interventionReference == null && !_interventionReferenceExplicitlyAssigned)
                    _interventionReference = new Intervention.InterventionReference();

                return _interventionReference;
            }
        }

        [DataMember(Name="interventionReference")][NaturalKeyMember]
        public Intervention.InterventionReference InterventionReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitInterventionReference != null
                    && (_interventionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitInterventionReference.IsReferenceFullyDefined()))
                    return ImplicitInterventionReference;

                return null;
            }
            set 
            { 
                _interventionReferenceExplicitlyAssigned = true;
                _interventionReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A code describing the attendance event, for example:          Present          Unexcused absence          Excused absence          Tardy.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="attendanceEventCategoryDescriptor"), NaturalKeyMember]
        public string AttendanceEventCategoryDescriptor { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentInterventionAttendanceEvent.EducationOrganizationId
        {
            get
            {
                if (ImplicitInterventionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitInterventionReference.IsReferenceFullyDefined()))
                    return ImplicitInterventionReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Intervention
                _interventionReferenceExplicitlyAssigned = false;
                ImplicitInterventionReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// Date for this attendance event.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eventDate"), NaturalKeyMember]
        public DateTime EventDate { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentInterventionAttendanceEvent.InterventionIdentificationCode
        {
            get
            {
                if (ImplicitInterventionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitInterventionReference.IsReferenceFullyDefined()))
                    return ImplicitInterventionReference.InterventionIdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Intervention
                _interventionReferenceExplicitlyAssigned = false;
                ImplicitInterventionReference.InterventionIdentificationCode = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentInterventionAttendanceEvent.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStudentInterventionAttendanceEvent).AttendanceEventCategoryDescriptor != null) 
                    hash = hash * 23 + (this as IStudentInterventionAttendanceEvent).AttendanceEventCategoryDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentInterventionAttendanceEvent).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStudentInterventionAttendanceEvent).EducationOrganizationId.GetHashCode();
 
                // Standard Property
                if ((this as IStudentInterventionAttendanceEvent).EventDate != null) 
                    hash = hash * 23 + (this as IStudentInterventionAttendanceEvent).EventDate.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentInterventionAttendanceEvent).InterventionIdentificationCode != null) 
                    hash = hash * 23 + (this as IStudentInterventionAttendanceEvent).InterventionIdentificationCode.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentInterventionAttendanceEvent).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentInterventionAttendanceEvent).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The reported reason for a student's absence.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="attendanceEventReason")]
        public string AttendanceEventReason { get; set; }

        /// <summary>
        /// The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="educationalEnvironmentType")]
        public string EducationalEnvironmentType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentInterventionAttendanceEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentInterventionAttendanceEvent) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentInterventionAttendanceEventSynchronizationSourceSupport.IsAttendanceEventReasonSupported       { get { return true; } set { } }
 
        bool IStudentInterventionAttendanceEventSynchronizationSourceSupport.IsEducationalEnvironmentTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentLearningObjective

namespace EdFi.Ods.Api.Models.Resources.V2.StudentLearningObjective
{
    /// <summary>
    /// Represents a reference to the StudentLearningObjective resource.
    /// </summary>
    [DataContract]
    public class StudentLearningObjectiveReference
    {
        [DataMember(Name="gradingPeriodBeginDate"), NaturalKeyMember]
        public DateTime GradingPeriodBeginDate { get; set; }

        [DataMember(Name="gradingPeriodDescriptor"), NaturalKeyMember]
        public string GradingPeriodDescriptor { get; set; }

        [DataMember(Name="learningObjectiveId"), NaturalKeyMember]
        public string LearningObjectiveId { get; set; }

        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentLearningObjective",
                            Href = "/studentLearningObjectives"
                                    + "?gradingPeriodBeginDate=" + JsonConvert.SerializeObject(GradingPeriodBeginDate).Replace("\"", string.Empty)            
                                    + "&gradingPeriodDescriptor=" + WebUtility.UrlEncode(GradingPeriodDescriptor)            
                                    + "&learningObjectiveId=" + WebUtility.UrlEncode(LearningObjectiveId)            
                                    + "&namespace=" + WebUtility.UrlEncode(Namespace)            
                                    + "&schoolId=" + SchoolId            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return GradingPeriodBeginDate != default(DateTime)
                && GradingPeriodDescriptor != default(string)
                && LearningObjectiveId != default(string)
                && Namespace != default(string)
                && SchoolId != default(int)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentLearningObjective table of the StudentLearningObjective aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentLearningObjective : IStudentLearningObjective, IHasETag, IStudentLearningObjectiveSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StudentLearningObjective resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _gradingPeriodReferenceExplicitlyAssigned;
        private GradingPeriod.GradingPeriodReference _gradingPeriodReference;
        private GradingPeriod.GradingPeriodReference ImplicitGradingPeriodReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_gradingPeriodReference == null && !_gradingPeriodReferenceExplicitlyAssigned)
                    _gradingPeriodReference = new GradingPeriod.GradingPeriodReference();

                return _gradingPeriodReference;
            }
        }

        [DataMember(Name="gradingPeriodReference")][NaturalKeyMember]
        public GradingPeriod.GradingPeriodReference GradingPeriodReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitGradingPeriodReference != null
                    && (_gradingPeriodReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference;

                return null;
            }
            set 
            { 
                _gradingPeriodReferenceExplicitlyAssigned = true;
                _gradingPeriodReference = value;
            }
        }
        private bool _learningObjectiveReferenceExplicitlyAssigned;
        private LearningObjective.LearningObjectiveReference _learningObjectiveReference;
        private LearningObjective.LearningObjectiveReference ImplicitLearningObjectiveReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_learningObjectiveReference == null && !_learningObjectiveReferenceExplicitlyAssigned)
                    _learningObjectiveReference = new LearningObjective.LearningObjectiveReference();

                return _learningObjectiveReference;
            }
        }

        [DataMember(Name="learningObjectiveReference")][NaturalKeyMember]
        public LearningObjective.LearningObjectiveReference LearningObjectiveReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitLearningObjectiveReference != null
                    && (_learningObjectiveReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitLearningObjectiveReference;

                return null;
            }
            set 
            { 
                _learningObjectiveReferenceExplicitlyAssigned = true;
                _learningObjectiveReference = value;
            }
        }
        private bool _studentProgramAssociationReferenceExplicitlyAssigned;
        private StudentProgramAssociation.StudentProgramAssociationReference _studentProgramAssociationReference;
        private StudentProgramAssociation.StudentProgramAssociationReference ImplicitStudentProgramAssociationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentProgramAssociationReference == null && !_studentProgramAssociationReferenceExplicitlyAssigned)
                    _studentProgramAssociationReference = new StudentProgramAssociation.StudentProgramAssociationReference();

                return _studentProgramAssociationReference;
            }
        }

        [DataMember(Name="studentProgramAssociationReference")]
        public StudentProgramAssociation.StudentProgramAssociationReference StudentProgramAssociationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentProgramAssociationReference != null
                    && (_studentProgramAssociationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentProgramAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentProgramAssociationReference;

                return null;
            }
            set 
            { 
                _studentProgramAssociationReferenceExplicitlyAssigned = true;
                _studentProgramAssociationReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        private bool _studentSectionAssociationReferenceExplicitlyAssigned;
        private StudentSectionAssociation.StudentSectionAssociationReference _studentSectionAssociationReference;
        private StudentSectionAssociation.StudentSectionAssociationReference ImplicitStudentSectionAssociationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentSectionAssociationReference == null && !_studentSectionAssociationReferenceExplicitlyAssigned)
                    _studentSectionAssociationReference = new StudentSectionAssociation.StudentSectionAssociationReference();

                return _studentSectionAssociationReference;
            }
        }

        [DataMember(Name="studentSectionAssociationReference")]
        public StudentSectionAssociation.StudentSectionAssociationReference StudentSectionAssociationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentSectionAssociationReference != null
                    && (_studentSectionAssociationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference;

                return null;
            }
            set 
            { 
                _studentSectionAssociationReferenceExplicitlyAssigned = true;
                _studentSectionAssociationReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime IStudentLearningObjective.GradingPeriodBeginDate
        {
            get
            {
                if (ImplicitGradingPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference.BeginDate;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradingPeriod
                _gradingPeriodReferenceExplicitlyAssigned = false;
                ImplicitGradingPeriodReference.BeginDate = value;
            }
        }

        /// <summary>
        /// The name of the period for which grades are reported.
        /// </summary>

        // IS in a reference (StudentLearningObjective.GradingPeriodDescriptorId), IS a lookup column 
        string IStudentLearningObjective.GradingPeriodDescriptor
        {
            get
            {
                if (ImplicitGradingPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference.GradingPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitGradingPeriodReference.GradingPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentLearningObjective.LearningObjectiveId
        {
            get
            {
                if (ImplicitLearningObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitLearningObjectiveReference.LearningObjectiveId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // LearningObjective
                _learningObjectiveReferenceExplicitlyAssigned = false;
                ImplicitLearningObjectiveReference.LearningObjectiveId = value;
            }
        }

        /// <summary>
        /// Namespace for the LearningObjective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentLearningObjective.Namespace
        {
            get
            {
                if (ImplicitLearningObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitLearningObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitLearningObjectiveReference.Namespace;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // LearningObjective
                _learningObjectiveReferenceExplicitlyAssigned = false;
                ImplicitLearningObjectiveReference.Namespace = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentLearningObjective.SchoolId
        {
            get
            {
                if (ImplicitGradingPeriodReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGradingPeriodReference.IsReferenceFullyDefined()))
                    return ImplicitGradingPeriodReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GradingPeriod
                _gradingPeriodReferenceExplicitlyAssigned = false;
                ImplicitGradingPeriodReference.SchoolId = value;

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.SchoolId = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentLearningObjective.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;

                // StudentProgramAssociation
                _studentProgramAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentProgramAssociationReference.StudentUniqueId = value;

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IStudentLearningObjective).GradingPeriodBeginDate != null) 
                    hash = hash * 23 + (this as IStudentLearningObjective).GradingPeriodBeginDate.GetHashCode();
 
                //Unified Type Property
                if ((this as IStudentLearningObjective).GradingPeriodDescriptor != null) 
                    hash = hash * 23 + (this as IStudentLearningObjective).GradingPeriodDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentLearningObjective).LearningObjectiveId != null) 
                    hash = hash * 23 + (this as IStudentLearningObjective).LearningObjectiveId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentLearningObjective).Namespace != null) 
                    hash = hash * 23 + (this as IStudentLearningObjective).Namespace.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentLearningObjective).SchoolId != null) 
                    hash = hash * 23 + (this as IStudentLearningObjective).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentLearningObjective).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentLearningObjective).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Month, day, and year of the Student's entry or assignment to the Section.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime? IStudentLearningObjective.BeginDate
        {
            get
            {
                if (ImplicitStudentProgramAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentProgramAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentProgramAssociationReference.BeginDate;

                return default(DateTime?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentProgramAssociation
                _studentProgramAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentProgramAssociationReference.BeginDate = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentLearningObjective.ClassPeriodName
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.ClassPeriodName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.ClassPeriodName = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentLearningObjective.ClassroomIdentificationCode
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.ClassroomIdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.ClassroomIdentificationCode = value;
            }
        }

        /// <summary>
        /// The CompetencyLevel assessed for the student for the referenced LearningObjective.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="competencyLevelDescriptor")]
        public string CompetencyLevelDescriptor { get; set; }

        /// <summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="diagnosticStatement")]
        public string DiagnosticStatement { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? IStudentLearningObjective.EducationOrganizationId
        {
            get
            {
                if (ImplicitStudentProgramAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentProgramAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentProgramAssociationReference.EducationOrganizationId;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentProgramAssociation
                _studentProgramAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentProgramAssociationReference.EducationOrganizationId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentLearningObjective.LocalCourseCode
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.LocalCourseCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.LocalCourseCode = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? IStudentLearningObjective.ProgramEducationOrganizationId
        {
            get
            {
                if (ImplicitStudentProgramAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentProgramAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentProgramAssociationReference.ProgramEducationOrganizationId;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentProgramAssociation
                _studentProgramAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentProgramAssociationReference.ProgramEducationOrganizationId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentLearningObjective.ProgramName
        {
            get
            {
                if (ImplicitStudentProgramAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentProgramAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentProgramAssociationReference.ProgramName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentProgramAssociation
                _studentProgramAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentProgramAssociationReference.ProgramName = value;
            }
        }

        /// <summary>
        /// The type of program.
        /// </summary>

        // IS in a reference (StudentLearningObjective.ProgramTypeId), IS a lookup column 
        string IStudentLearningObjective.ProgramType
        {
            get
            {
                if (ImplicitStudentProgramAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentProgramAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentProgramAssociationReference.ProgramType;

                return null;
            }
            set
            {
                ImplicitStudentProgramAssociationReference.ProgramType = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short? IStudentLearningObjective.SchoolYear
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.SchoolYear;

                return default(short?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.SchoolYear = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? IStudentLearningObjective.SequenceOfCourse
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.SequenceOfCourse;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.SequenceOfCourse = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime? IStudentLearningObjective.StudentSectionAssociationBeginDate
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.BeginDate;

                return default(DateTime?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.BeginDate = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The term for the Session during the school year.
        /// </summary>

        // IS in a reference (StudentLearningObjective.TermDescriptorId), IS a lookup column 
        string IStudentLearningObjective.TermDescriptor
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitStudentSectionAssociationReference.TermDescriptor = value;
            }
        }

        /// <summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentLearningObjective.UniqueSectionCode
        {
            get
            {
                if (ImplicitStudentSectionAssociationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentSectionAssociationReference.IsReferenceFullyDefined()))
                    return ImplicitStudentSectionAssociationReference.UniqueSectionCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentSectionAssociation
                _studentSectionAssociationReferenceExplicitlyAssigned = false;
                ImplicitStudentSectionAssociationReference.UniqueSectionCode = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentLearningObjective)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentLearningObjective) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentLearningObjectiveSynchronizationSourceSupport.IsBeginDateSupported                           { get { return true; } set { } }
 
        bool IStudentLearningObjectiveSynchronizationSourceSupport.IsClassPeriodNameSupported                     { get { return true; } set { } }
 
        bool IStudentLearningObjectiveSynchronizationSourceSupport.IsClassroomIdentificationCodeSupported         { get { return true; } set { } }
 
        bool IStudentLearningObjectiveSynchronizationSourceSupport.IsCompetencyLevelDescriptorSupported           { get { return true; } set { } }
 
        bool IStudentLearningObjectiveSynchronizationSourceSupport.IsDiagnosticStatementSupported                 { get { return true; } set { } }
 
        bool IStudentLearningObjectiveSynchronizationSourceSupport.IsEducationOrganizationIdSupported             { get { return true; } set { } }
 
        bool IStudentLearningObjectiveSynchronizationSourceSupport.IsLocalCourseCodeSupported                     { get { return true; } set { } }
 
        bool IStudentLearningObjectiveSynchronizationSourceSupport.IsProgramEducationOrganizationIdSupported      { get { return true; } set { } }
 
        bool IStudentLearningObjectiveSynchronizationSourceSupport.IsProgramNameSupported                         { get { return true; } set { } }
 
        bool IStudentLearningObjectiveSynchronizationSourceSupport.IsProgramTypeSupported                         { get { return true; } set { } }
 
        bool IStudentLearningObjectiveSynchronizationSourceSupport.IsSchoolYearSupported                          { get { return true; } set { } }
 
        bool IStudentLearningObjectiveSynchronizationSourceSupport.IsSequenceOfCourseSupported                    { get { return true; } set { } }
 
        bool IStudentLearningObjectiveSynchronizationSourceSupport.IsStudentSectionAssociationBeginDateSupported  { get { return true; } set { } }
 
        bool IStudentLearningObjectiveSynchronizationSourceSupport.IsTermDescriptorSupported                      { get { return true; } set { } }
 
        bool IStudentLearningObjectiveSynchronizationSourceSupport.IsUniqueSectionCodeSupported                   { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentMigrantEducationProgramAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.StudentMigrantEducationProgramAssociation
{
    /// <summary>
    /// Represents a reference to the StudentMigrantEducationProgramAssociation resource.
    /// </summary>
    [DataContract]
    public class StudentMigrantEducationProgramAssociationReference
    {
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="programEducationOrganizationId"), NaturalKeyMember]
        public int ProgramEducationOrganizationId { get; set; }

        [DataMember(Name="programName"), NaturalKeyMember]
        public string ProgramName { get; set; }

        [DataMember(Name="programType"), NaturalKeyMember]
        public string ProgramType { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentMigrantEducationProgramAssociation",
                            Href = "/studentMigrantEducationProgramAssociations"
                                    + "?beginDate=" + JsonConvert.SerializeObject(BeginDate).Replace("\"", string.Empty)            
                                    + "&educationOrganizationId=" + EducationOrganizationId            
                                    + "&programEducationOrganizationId=" + ProgramEducationOrganizationId            
                                    + "&programName=" + WebUtility.UrlEncode(ProgramName)            
                                    + "&programType=" + WebUtility.UrlEncode(ProgramType)            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime)
                && EducationOrganizationId != default(int)
                && ProgramEducationOrganizationId != default(int)
                && ProgramName != default(string)
                && ProgramType != default(string)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentMigrantEducationProgramAssociation table of the StudentMigrantEducationProgramAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentMigrantEducationProgramAssociation : IStudentMigrantEducationProgramAssociation, EdFi.Ods.Entities.Common.IStudentProgramAssociation, IHasETag, IStudentMigrantEducationProgramAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StudentMigrantEducationProgramAssociation()
        {

            // Inherited lists
            StudentProgramAssociationServices = new List<StudentProgramAssociation.StudentProgramAssociationService>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the StudentMigrantEducationProgramAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        private bool _programReferenceExplicitlyAssigned;
        private Program.ProgramReference _programReference;
        private Program.ProgramReference ImplicitProgramReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_programReference == null && !_programReferenceExplicitlyAssigned)
                    _programReference = new Program.ProgramReference();

                return _programReference;
            }
        }

        [DataMember(Name="programReference")][NaturalKeyMember]
        public Program.ProgramReference ProgramReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitProgramReference != null
                    && (_programReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference;

                return null;
            }
            set 
            { 
                _programReferenceExplicitlyAssigned = true;
                _programReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the Student first received services.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentProgramAssociation.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentProgramAssociation.ProgramEducationOrganizationId
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentProgramAssociation.ProgramName
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.ProgramName = value;
            }
        }

        /// <summary>
        /// The type of program.
        /// </summary>

        // IS in a reference (StudentMigrantEducationProgramAssociation.ProgramTypeId), IS a lookup column 
        string IStudentProgramAssociation.ProgramType
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramType;

                return null;
            }
            set
            {
                ImplicitProgramReference.ProgramType = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentProgramAssociation.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStudentMigrantEducationProgramAssociation).BeginDate != null) 
                    hash = hash * 23 + (this as IStudentMigrantEducationProgramAssociation).BeginDate.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentMigrantEducationProgramAssociation).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStudentMigrantEducationProgramAssociation).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentMigrantEducationProgramAssociation).ProgramEducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStudentMigrantEducationProgramAssociation).ProgramEducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentMigrantEducationProgramAssociation).ProgramName != null) 
                    hash = hash * 23 + (this as IStudentMigrantEducationProgramAssociation).ProgramName.GetHashCode();
 
                //Unified Type Property
                if ((this as IStudentMigrantEducationProgramAssociation).ProgramType != null) 
                    hash = hash * 23 + (this as IStudentMigrantEducationProgramAssociation).ProgramType.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentMigrantEducationProgramAssociation).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentMigrantEducationProgramAssociation).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the Student exited the Program or stopped receiving services.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The reason the child left the Program within a school or district.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="reasonExitedDescriptor")]
        public string ReasonExitedDescriptor { get; set; }

        /// <summary>
        /// Indicates whether the Student received services during the summer session or between sessions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="servedOutsideOfRegularSession")]
        public bool? ServedOutsideOfRegularSession { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The \"continuation of services\" provision found in Section 1304(e) of the statute provides that (1) a child who ceases to be a migratory child during a school term shall be eligible for services until the end of such term; (2) a child who is no longer a migratory child may continue to receive services for one additional school year, but only if comparable services are not available through other programs; and (3) secondary school students who were eligible for services in secondary school may continue to be served through credit accrual programs until graduation. Only students who received services at any time during their 36 month eligibility period may continue to receive services (not necessarily the same service).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="continuationOfServicesReasonDescriptor")]
        public string ContinuationOfServicesReasonDescriptor { get; set; }

        /// <summary>
        /// Date the last qualifying move occurred; used to compute MEP status.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastQualifyingMove")]
        public DateTime LastQualifyingMove { get; set; }

        /// <summary>
        /// Report migratory children who are classified as having \"priority for services\" because they are failing, or most at risk of failing to meet the State's challenging State academic content standards and challenging State student academic achievement standards, and their education has been interrupted during the regular school year.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorityForServices")]
        public bool PriorityForServices { get; set; }

        /// <summary>
        /// The month, day, and year on which the Student first entered the U.S.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="usInitialEntry")]
        public DateTime? USInitialEntry { get; set; }

        /// <summary>
        /// The month, day, and year on which the Student first entered a U.S. school.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="usInitialSchoolEntry")]
        public DateTime? USInitialSchoolEntry { get; set; }

        /// <summary>
        /// The month, day, and year of the Student's most recent entry into the U.S.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="usMostRecentEntry")]
        public DateTime? USMostRecentEntry { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        private IList<StudentProgramAssociation.StudentProgramAssociationService> _studentProgramAssociationServices;
        private IList<IStudentProgramAssociationService> _studentProgramAssociationServicesCovariant;

        [DataMember(Name="services")]
        public IList<StudentProgramAssociation.StudentProgramAssociationService> StudentProgramAssociationServices 
        {
            get { return _studentProgramAssociationServices; }
            set 
            {
                _studentProgramAssociationServices = value;
                _studentProgramAssociationServicesCovariant = new CovariantIListAdapter<IStudentProgramAssociationService, StudentProgramAssociation.StudentProgramAssociationService>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentProgramAssociationService> IStudentProgramAssociation.StudentProgramAssociationServices
        {
            get { return _studentProgramAssociationServicesCovariant; }
            set { StudentProgramAssociationServices = new List<StudentProgramAssociation.StudentProgramAssociationService>(value.Cast<StudentProgramAssociation.StudentProgramAssociationService>()); }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            // _studentProgramAssociationServices
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentMigrantEducationProgramAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentMigrantEducationProgramAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentMigrantEducationProgramAssociationSynchronizationSourceSupport.IsContinuationOfServicesReasonDescriptorSupported  { get { return true; } set { } }
 
        bool IStudentMigrantEducationProgramAssociationSynchronizationSourceSupport.IsEndDateSupported                                 { get { return true; } set { } }
 
        bool IStudentMigrantEducationProgramAssociationSynchronizationSourceSupport.IsLastQualifyingMoveSupported                      { get { return true; } set { } }
 
        bool IStudentMigrantEducationProgramAssociationSynchronizationSourceSupport.IsPriorityForServicesSupported                     { get { return true; } set { } }
 
        bool IStudentMigrantEducationProgramAssociationSynchronizationSourceSupport.IsReasonExitedDescriptorSupported                  { get { return true; } set { } }
 
        bool IStudentMigrantEducationProgramAssociationSynchronizationSourceSupport.IsServedOutsideOfRegularSessionSupported           { get { return true; } set { } }
 
        bool IStudentMigrantEducationProgramAssociationSynchronizationSourceSupport.IsStudentProgramAssociationServicesSupported       { get { return true; } set { } }
 
        bool IStudentMigrantEducationProgramAssociationSynchronizationSourceSupport.IsUSInitialEntrySupported                          { get { return true; } set { } }
 
        bool IStudentMigrantEducationProgramAssociationSynchronizationSourceSupport.IsUSInitialSchoolEntrySupported                    { get { return true; } set { } }
 
        bool IStudentMigrantEducationProgramAssociationSynchronizationSourceSupport.IsUSMostRecentEntrySupported                       { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IStudentProgramAssociationService, bool> IStudentMigrantEducationProgramAssociationSynchronizationSourceSupport.IsStudentProgramAssociationServiceIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentParentAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.StudentParentAssociation
{
    /// <summary>
    /// Represents a reference to the StudentParentAssociation resource.
    /// </summary>
    [DataContract]
    public class StudentParentAssociationReference
    {
        [DataMember(Name="parentUniqueId"), NaturalKeyMember]
        public string ParentUniqueId { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentParentAssociation",
                            Href = "/studentParentAssociations"
                                    + "?parentUniqueId=" + WebUtility.UrlEncode(ParentUniqueId)            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ParentUniqueId != default(string)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentParentAssociation table of the StudentParentAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentParentAssociation : IStudentParentAssociation, IHasETag, IStudentParentAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StudentParentAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _parentReferenceExplicitlyAssigned;
        private Parent.ParentReference _parentReference;
        private Parent.ParentReference ImplicitParentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_parentReference == null && !_parentReferenceExplicitlyAssigned)
                    _parentReference = new Parent.ParentReference();

                return _parentReference;
            }
        }

        [DataMember(Name="parentReference")][NaturalKeyMember]
        public Parent.ParentReference ParentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitParentReference != null
                    && (_parentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitParentReference.IsReferenceFullyDefined()))
                    return ImplicitParentReference;

                return null;
            }
            set 
            { 
                _parentReferenceExplicitlyAssigned = true;
                _parentReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a parent.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentParentAssociation.ParentUniqueId
        {
            get
            {
                if (ImplicitParentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitParentReference.IsReferenceFullyDefined()))
                    return ImplicitParentReference.ParentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Parent
                _parentReferenceExplicitlyAssigned = false;
                ImplicitParentReference.ParentUniqueId = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentParentAssociation.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Referenced Property
                if ((this as IStudentParentAssociation).ParentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentParentAssociation).ParentUniqueId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentParentAssociation).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentParentAssociation).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The numeric order of the preferred sequence or priority of contact.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="contactPriority")]
        public int? ContactPriority { get; set; }

        /// <summary>
        /// Restrictions for student and/or teacher contact with the individual (e.g., the student may not be picked up by the individual).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="contactRestrictions")]
        public string ContactRestrictions { get; set; }

        /// <summary>
        /// Indicator of whether the person is a designated emergency contact for the Student.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="emergencyContactStatus")]
        public bool? EmergencyContactStatus { get; set; }

        /// <summary>
        /// Indicator of whether the Student lives with the associated parent.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="livesWith")]
        public bool? LivesWith { get; set; }

        /// <summary>
        /// Indicator of whether the person is a primary parental contact for the Student.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primaryContactStatus")]
        public bool? PrimaryContactStatus { get; set; }

        /// <summary>
        /// The nature of an individual's relationship to a student; for example:          Father, Mother, Step Father, Step Mother, Foster Father, Foster Mother, Guardian, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="relationType")]
        public string RelationType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentParentAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentParentAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentParentAssociationSynchronizationSourceSupport.IsContactPrioritySupported         { get { return true; } set { } }
 
        bool IStudentParentAssociationSynchronizationSourceSupport.IsContactRestrictionsSupported     { get { return true; } set { } }
 
        bool IStudentParentAssociationSynchronizationSourceSupport.IsEmergencyContactStatusSupported  { get { return true; } set { } }
 
        bool IStudentParentAssociationSynchronizationSourceSupport.IsLivesWithSupported               { get { return true; } set { } }
 
        bool IStudentParentAssociationSynchronizationSourceSupport.IsPrimaryContactStatusSupported    { get { return true; } set { } }
 
        bool IStudentParentAssociationSynchronizationSourceSupport.IsRelationTypeSupported            { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentParticipationCodeType

namespace EdFi.Ods.Api.Models.Resources.V2.StudentParticipationCodeType
{
    /// <summary>
    /// A class which represents the edfi.StudentParticipationCodeType table of the StudentParticipationCodeType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentParticipationCodeType : IStudentParticipationCodeType, IHasETag, IStudentParticipationCodeTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StudentParticipationCodeType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for StudentParticipationCode
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="studentParticipationCodeTypeId"), NaturalKeyMember]
        public int StudentParticipationCodeTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStudentParticipationCodeType).StudentParticipationCodeTypeId != null) 
                    hash = hash * 23 + (this as IStudentParticipationCodeType).StudentParticipationCodeTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the StudentParticipationCode type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the StudentParticipationCode type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentParticipationCodeType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentParticipationCodeType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentParticipationCodeTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IStudentParticipationCodeTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IStudentParticipationCodeTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentProgramAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.StudentProgramAssociation
{
    /// <summary>
    /// Represents a reference to the StudentProgramAssociation resource.
    /// </summary>
    [DataContract]
    public class StudentProgramAssociationReference
    {
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="programEducationOrganizationId"), NaturalKeyMember]
        public int ProgramEducationOrganizationId { get; set; }

        [DataMember(Name="programName"), NaturalKeyMember]
        public string ProgramName { get; set; }

        [DataMember(Name="programType"), NaturalKeyMember]
        public string ProgramType { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentProgramAssociation",
                            Href = "/studentProgramAssociations"
                                    + "?beginDate=" + JsonConvert.SerializeObject(BeginDate).Replace("\"", string.Empty)            
                                    + "&educationOrganizationId=" + EducationOrganizationId            
                                    + "&programEducationOrganizationId=" + ProgramEducationOrganizationId            
                                    + "&programName=" + WebUtility.UrlEncode(ProgramName)            
                                    + "&programType=" + WebUtility.UrlEncode(ProgramType)            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime)
                && EducationOrganizationId != default(int)
                && ProgramEducationOrganizationId != default(int)
                && ProgramName != default(string)
                && ProgramType != default(string)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentProgramAssociation table of the StudentProgramAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentProgramAssociation : IStudentProgramAssociation, IHasETag, IStudentProgramAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StudentProgramAssociation()
        {
            StudentProgramAssociationServices = new List<StudentProgramAssociationService>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the StudentProgramAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        private bool _programReferenceExplicitlyAssigned;
        private Program.ProgramReference _programReference;
        private Program.ProgramReference ImplicitProgramReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_programReference == null && !_programReferenceExplicitlyAssigned)
                    _programReference = new Program.ProgramReference();

                return _programReference;
            }
        }

        [DataMember(Name="programReference")][NaturalKeyMember]
        public Program.ProgramReference ProgramReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitProgramReference != null
                    && (_programReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference;

                return null;
            }
            set 
            { 
                _programReferenceExplicitlyAssigned = true;
                _programReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the Student first received services.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentProgramAssociation.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentProgramAssociation.ProgramEducationOrganizationId
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentProgramAssociation.ProgramName
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.ProgramName = value;
            }
        }

        /// <summary>
        /// The type of program.
        /// </summary>

        // IS in a reference (StudentProgramAssociation.ProgramTypeId), IS a lookup column 
        string IStudentProgramAssociation.ProgramType
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramType;

                return null;
            }
            set
            {
                ImplicitProgramReference.ProgramType = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentProgramAssociation.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStudentProgramAssociation).BeginDate != null) 
                    hash = hash * 23 + (this as IStudentProgramAssociation).BeginDate.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentProgramAssociation).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStudentProgramAssociation).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentProgramAssociation).ProgramEducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStudentProgramAssociation).ProgramEducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentProgramAssociation).ProgramName != null) 
                    hash = hash * 23 + (this as IStudentProgramAssociation).ProgramName.GetHashCode();
 
                //Unified Type Property
                if ((this as IStudentProgramAssociation).ProgramType != null) 
                    hash = hash * 23 + (this as IStudentProgramAssociation).ProgramType.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentProgramAssociation).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentProgramAssociation).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the Student exited the Program or stopped receiving services.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The reason the child left the Program within a school or district.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="reasonExitedDescriptor")]
        public string ReasonExitedDescriptor { get; set; }

        /// <summary>
        /// Indicates whether the Student received services during the summer session or between sessions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="servedOutsideOfRegularSession")]
        public bool? ServedOutsideOfRegularSession { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<StudentProgramAssociationService> _studentProgramAssociationServices;
        private IList<IStudentProgramAssociationService> _studentProgramAssociationServicesCovariant;

        [DataMember(Name="services")]
        public IList<StudentProgramAssociationService> StudentProgramAssociationServices 
        { 
            get { return _studentProgramAssociationServices; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentProgramAssociationService>(value,
                    (s, e) => ((IStudentProgramAssociationService)e.Item).StudentProgramAssociation = this);
                _studentProgramAssociationServices = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentProgramAssociationService, StudentProgramAssociationService>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentProgramAssociationService)e.Item).StudentProgramAssociation = this;
                _studentProgramAssociationServicesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentProgramAssociationService> IStudentProgramAssociation.StudentProgramAssociationServices
        {
            get { return _studentProgramAssociationServicesCovariant; }
            set { StudentProgramAssociationServices = new List<StudentProgramAssociationService>(value.Cast<StudentProgramAssociationService>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_studentProgramAssociationServices != null) foreach (var item in _studentProgramAssociationServices)
            {
                item.StudentProgramAssociation = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentProgramAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentProgramAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentProgramAssociationSynchronizationSourceSupport.IsEndDateSupported                            { get { return true; } set { } }
 
        bool IStudentProgramAssociationSynchronizationSourceSupport.IsReasonExitedDescriptorSupported             { get { return true; } set { } }
 
        bool IStudentProgramAssociationSynchronizationSourceSupport.IsServedOutsideOfRegularSessionSupported      { get { return true; } set { } }
 
        bool IStudentProgramAssociationSynchronizationSourceSupport.IsStudentProgramAssociationServicesSupported  { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IStudentProgramAssociationService, bool> IStudentProgramAssociationSynchronizationSourceSupport.IsStudentProgramAssociationServiceIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentProgramAssociationService table of the StudentProgramAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentProgramAssociationService : IStudentProgramAssociationService, IStudentProgramAssociationServiceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentProgramAssociation _studentProgramAssociation;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentProgramAssociation IStudentProgramAssociationService.StudentProgramAssociation
        {
            get { return _studentProgramAssociation; }
            set { _studentProgramAssociation = value; }
        }

        internal IStudentProgramAssociation StudentProgramAssociation
        {
            set { _studentProgramAssociation = value; }
        }

        /// <summary>
        /// Indicates the Service being provided to the student by the Program.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="serviceDescriptor"), NaturalKeyMember]
        public string ServiceDescriptor { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentProgramAssociation != null) 
                    hash = hash * 23 + _studentProgramAssociation.GetHashCode();
 
                // Standard Property
                if ((this as IStudentProgramAssociationService).ServiceDescriptor != null) 
                    hash = hash * 23 + (this as IStudentProgramAssociationService).ServiceDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// True if service is a primary service.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primaryIndicator")]
        public bool? PrimaryIndicator { get; set; }

        /// <summary>
        /// First date the Student was in this option for the current school year.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="serviceBeginDate")]
        public DateTime? ServiceBeginDate { get; set; }

        /// <summary>
        /// Last date the Student was in this option for the current school year.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="serviceEndDate")]
        public DateTime? ServiceEndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentProgramAssociationService)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentProgramAssociationService) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentProgramAssociationServiceSynchronizationSourceSupport.IsPrimaryIndicatorSupported  { get { return true; } set { } }
 
        bool IStudentProgramAssociationServiceSynchronizationSourceSupport.IsServiceBeginDateSupported  { get { return true; } set { } }
 
        bool IStudentProgramAssociationServiceSynchronizationSourceSupport.IsServiceEndDateSupported    { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentProgramAttendanceEvent

namespace EdFi.Ods.Api.Models.Resources.V2.StudentProgramAttendanceEvent
{
    /// <summary>
    /// Represents a reference to the StudentProgramAttendanceEvent resource.
    /// </summary>
    [DataContract]
    public class StudentProgramAttendanceEventReference
    {
        [DataMember(Name="attendanceEventCategoryDescriptor"), NaturalKeyMember]
        public string AttendanceEventCategoryDescriptor { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="eventDate"), NaturalKeyMember]
        public DateTime EventDate { get; set; }

        [DataMember(Name="programEducationOrganizationId"), NaturalKeyMember]
        public int ProgramEducationOrganizationId { get; set; }

        [DataMember(Name="programName"), NaturalKeyMember]
        public string ProgramName { get; set; }

        [DataMember(Name="programType"), NaturalKeyMember]
        public string ProgramType { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentProgramAttendanceEvent",
                            Href = "/studentProgramAttendanceEvents"
                                    + "?attendanceEventCategoryDescriptor=" + WebUtility.UrlEncode(AttendanceEventCategoryDescriptor)            
                                    + "&educationOrganizationId=" + EducationOrganizationId            
                                    + "&eventDate=" + JsonConvert.SerializeObject(EventDate).Replace("\"", string.Empty)            
                                    + "&programEducationOrganizationId=" + ProgramEducationOrganizationId            
                                    + "&programName=" + WebUtility.UrlEncode(ProgramName)            
                                    + "&programType=" + WebUtility.UrlEncode(ProgramType)            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return AttendanceEventCategoryDescriptor != default(string)
                && EducationOrganizationId != default(int)
                && EventDate != default(DateTime)
                && ProgramEducationOrganizationId != default(int)
                && ProgramName != default(string)
                && ProgramType != default(string)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentProgramAttendanceEvent table of the StudentProgramAttendanceEvent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentProgramAttendanceEvent : IStudentProgramAttendanceEvent, IHasETag, IStudentProgramAttendanceEventSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StudentProgramAttendanceEvent resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        private bool _programReferenceExplicitlyAssigned;
        private Program.ProgramReference _programReference;
        private Program.ProgramReference ImplicitProgramReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_programReference == null && !_programReferenceExplicitlyAssigned)
                    _programReference = new Program.ProgramReference();

                return _programReference;
            }
        }

        [DataMember(Name="programReference")][NaturalKeyMember]
        public Program.ProgramReference ProgramReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitProgramReference != null
                    && (_programReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference;

                return null;
            }
            set 
            { 
                _programReferenceExplicitlyAssigned = true;
                _programReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A code describing the attendance event, for example:          Present          Unexcused absence          Excused absence          Tardy.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="attendanceEventCategoryDescriptor"), NaturalKeyMember]
        public string AttendanceEventCategoryDescriptor { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentProgramAttendanceEvent.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// Date for this attendance event.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eventDate"), NaturalKeyMember]
        public DateTime EventDate { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentProgramAttendanceEvent.ProgramEducationOrganizationId
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentProgramAttendanceEvent.ProgramName
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.ProgramName = value;
            }
        }

        /// <summary>
        /// The type of program.
        /// </summary>

        // IS in a reference (StudentProgramAttendanceEvent.ProgramTypeId), IS a lookup column 
        string IStudentProgramAttendanceEvent.ProgramType
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramType;

                return null;
            }
            set
            {
                ImplicitProgramReference.ProgramType = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentProgramAttendanceEvent.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStudentProgramAttendanceEvent).AttendanceEventCategoryDescriptor != null) 
                    hash = hash * 23 + (this as IStudentProgramAttendanceEvent).AttendanceEventCategoryDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentProgramAttendanceEvent).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStudentProgramAttendanceEvent).EducationOrganizationId.GetHashCode();
 
                // Standard Property
                if ((this as IStudentProgramAttendanceEvent).EventDate != null) 
                    hash = hash * 23 + (this as IStudentProgramAttendanceEvent).EventDate.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentProgramAttendanceEvent).ProgramEducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStudentProgramAttendanceEvent).ProgramEducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentProgramAttendanceEvent).ProgramName != null) 
                    hash = hash * 23 + (this as IStudentProgramAttendanceEvent).ProgramName.GetHashCode();
 
                //Unified Type Property
                if ((this as IStudentProgramAttendanceEvent).ProgramType != null) 
                    hash = hash * 23 + (this as IStudentProgramAttendanceEvent).ProgramType.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentProgramAttendanceEvent).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentProgramAttendanceEvent).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The reported reason for a student's absence.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="attendanceEventReason")]
        public string AttendanceEventReason { get; set; }

        /// <summary>
        /// The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="educationalEnvironmentType")]
        public string EducationalEnvironmentType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentProgramAttendanceEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentProgramAttendanceEvent) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentProgramAttendanceEventSynchronizationSourceSupport.IsAttendanceEventReasonSupported       { get { return true; } set { } }
 
        bool IStudentProgramAttendanceEventSynchronizationSourceSupport.IsEducationalEnvironmentTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentSchoolAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.StudentSchoolAssociation
{
    /// <summary>
    /// Represents a reference to the StudentSchoolAssociation resource.
    /// </summary>
    [DataContract]
    public class StudentSchoolAssociationReference
    {
        [DataMember(Name="entryDate"), NaturalKeyMember]
        public DateTime EntryDate { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentSchoolAssociation",
                            Href = "/studentSchoolAssociations"
                                    + "?entryDate=" + JsonConvert.SerializeObject(EntryDate).Replace("\"", string.Empty)            
                                    + "&schoolId=" + SchoolId            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EntryDate != default(DateTime)
                && SchoolId != default(int)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentSchoolAssociation table of the StudentSchoolAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentSchoolAssociation : IStudentSchoolAssociation, IHasETag, IStudentSchoolAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StudentSchoolAssociation()
        {
            StudentSchoolAssociationEducationPlans = new List<StudentSchoolAssociationEducationPlan>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the StudentSchoolAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _classOfSchoolYearTypeReferenceExplicitlyAssigned;
        private SchoolYearType.SchoolYearTypeReference _classOfSchoolYearTypeReference;
        private SchoolYearType.SchoolYearTypeReference ImplicitClassOfSchoolYearTypeReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_classOfSchoolYearTypeReference == null && !_classOfSchoolYearTypeReferenceExplicitlyAssigned)
                    _classOfSchoolYearTypeReference = new SchoolYearType.SchoolYearTypeReference();

                return _classOfSchoolYearTypeReference;
            }
        }

        [DataMember(Name="classOfSchoolYearTypeReference")]
        public SchoolYearType.SchoolYearTypeReference ClassOfSchoolYearTypeReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitClassOfSchoolYearTypeReference != null
                    && (_classOfSchoolYearTypeReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitClassOfSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitClassOfSchoolYearTypeReference;

                return null;
            }
            set 
            { 
                _classOfSchoolYearTypeReferenceExplicitlyAssigned = true;
                _classOfSchoolYearTypeReference = value;
            }
        }
        private bool _graduationPlanReferenceExplicitlyAssigned;
        private GraduationPlan.GraduationPlanReference _graduationPlanReference;
        private GraduationPlan.GraduationPlanReference ImplicitGraduationPlanReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_graduationPlanReference == null && !_graduationPlanReferenceExplicitlyAssigned)
                    _graduationPlanReference = new GraduationPlan.GraduationPlanReference();

                return _graduationPlanReference;
            }
        }

        [DataMember(Name="graduationPlanReference")]
        public GraduationPlan.GraduationPlanReference GraduationPlanReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitGraduationPlanReference != null
                    && (_graduationPlanReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitGraduationPlanReference.IsReferenceFullyDefined()))
                    return ImplicitGraduationPlanReference;

                return null;
            }
            set 
            { 
                _graduationPlanReferenceExplicitlyAssigned = true;
                _graduationPlanReference = value;
            }
        }
        private bool _schoolReferenceExplicitlyAssigned;
        private School.SchoolReference _schoolReference;
        private School.SchoolReference ImplicitSchoolReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolReference == null && !_schoolReferenceExplicitlyAssigned)
                    _schoolReference = new School.SchoolReference();

                return _schoolReference;
            }
        }

        [DataMember(Name="schoolReference")][NaturalKeyMember]
        public School.SchoolReference SchoolReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolReference != null
                    && (_schoolReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference;

                return null;
            }
            set 
            { 
                _schoolReferenceExplicitlyAssigned = true;
                _schoolReference = value;
            }
        }
        private bool _schoolYearTypeReferenceExplicitlyAssigned;
        private SchoolYearType.SchoolYearTypeReference _schoolYearTypeReference;
        private SchoolYearType.SchoolYearTypeReference ImplicitSchoolYearTypeReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolYearTypeReference == null && !_schoolYearTypeReferenceExplicitlyAssigned)
                    _schoolYearTypeReference = new SchoolYearType.SchoolYearTypeReference();

                return _schoolYearTypeReference;
            }
        }

        [DataMember(Name="schoolYearTypeReference")]
        public SchoolYearType.SchoolYearTypeReference SchoolYearTypeReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolYearTypeReference != null
                    && (_schoolYearTypeReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference;

                return null;
            }
            set 
            { 
                _schoolYearTypeReferenceExplicitlyAssigned = true;
                _schoolYearTypeReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual enters and begins to receive instructional services in a school.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="entryDate"), NaturalKeyMember]
        public DateTime EntryDate { get; set; }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentSchoolAssociation.SchoolId
        {
            get
            {
                if (ImplicitSchoolReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // School
                _schoolReferenceExplicitlyAssigned = false;
                ImplicitSchoolReference.SchoolId = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentSchoolAssociation.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStudentSchoolAssociation).EntryDate != null) 
                    hash = hash * 23 + (this as IStudentSchoolAssociation).EntryDate.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSchoolAssociation).SchoolId != null) 
                    hash = hash * 23 + (this as IStudentSchoolAssociation).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSchoolAssociation).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentSchoolAssociation).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Projected High School graduation year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short? IStudentSchoolAssociation.ClassOfSchoolYear
        {
            get
            {
                if (ImplicitClassOfSchoolYearTypeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitClassOfSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitClassOfSchoolYearTypeReference.SchoolYear;

                return default(short?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ClassOfSchoolYearType
                _classOfSchoolYearTypeReferenceExplicitlyAssigned = false;
                ImplicitClassOfSchoolYearTypeReference.SchoolYear = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? IStudentSchoolAssociation.EducationOrganizationId
        {
            get
            {
                if (ImplicitGraduationPlanReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGraduationPlanReference.IsReferenceFullyDefined()))
                    return ImplicitGraduationPlanReference.EducationOrganizationId;

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GraduationPlan
                _graduationPlanReferenceExplicitlyAssigned = false;
                ImplicitGraduationPlanReference.EducationOrganizationId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="employedWhileEnrolled")]
        public bool? EmployedWhileEnrolled { get; set; }

        /// <summary>
        /// The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="entryGradeLevelDescriptor")]
        public string EntryGradeLevelDescriptor { get; set; }

        /// <summary>
        /// The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="entryGradeLevelReasonType")]
        public string EntryGradeLevelReasonType { get; set; }

        /// <summary>
        /// The process by which a student enters a school during a given academic session.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="entryTypeDescriptor")]
        public string EntryTypeDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year of the first day after the date of an individual's last attendance at a school (if known), the day on which an individual graduated, or the date on which it becomes known officially that an individual left school.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="exitWithdrawDate")]
        public DateTime? ExitWithdrawDate { get; set; }

        /// <summary>
        /// The circumstances under which the student exited from membership in an educational institution.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="exitWithdrawTypeDescriptor")]
        public string ExitWithdrawTypeDescriptor { get; set; }

        /// <summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        /// </summary>

        // IS in a reference (StudentSchoolAssociation.GraduationPlanTypeDescriptorId), IS a lookup column 
        string IStudentSchoolAssociation.GraduationPlanTypeDescriptor
        {
            get
            {
                if (ImplicitGraduationPlanReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGraduationPlanReference.IsReferenceFullyDefined()))
                    return ImplicitGraduationPlanReference.GraduationPlanTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitGraduationPlanReference.GraduationPlanTypeDescriptor = value;
            }
        }

        /// <summary>
        /// The school year the student is expected to graduate.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short? IStudentSchoolAssociation.GraduationSchoolYear
        {
            get
            {
                if (ImplicitGraduationPlanReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitGraduationPlanReference.IsReferenceFullyDefined()))
                    return ImplicitGraduationPlanReference.GraduationSchoolYear;

                return default(short?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // GraduationPlan
                _graduationPlanReferenceExplicitlyAssigned = false;
                ImplicitGraduationPlanReference.GraduationSchoolYear = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// Indicates if a given enrollment record should be considered the primary record for a student. If omitted, the default is true.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primarySchool")]
        public bool? PrimarySchool { get; set; }

        /// <summary>
        /// An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="repeatGradeIndicator")]
        public bool? RepeatGradeIndicator { get; set; }

        /// <summary>
        /// An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="residencyStatusDescriptor")]
        public string ResidencyStatusDescriptor { get; set; }

        /// <summary>
        /// An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="schoolChoiceTransfer")]
        public bool? SchoolChoiceTransfer { get; set; }

        /// <summary>
        /// The school year associated with the student's enrollment.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short? IStudentSchoolAssociation.SchoolYear
        {
            get
            {
                if (ImplicitSchoolYearTypeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference.SchoolYear;

                return default(short?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SchoolYearType
                _schoolYearTypeReferenceExplicitlyAssigned = false;
                ImplicitSchoolYearTypeReference.SchoolYear = value.GetValueOrDefault();
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<StudentSchoolAssociationEducationPlan> _studentSchoolAssociationEducationPlans;
        private IList<IStudentSchoolAssociationEducationPlan> _studentSchoolAssociationEducationPlansCovariant;

        [DataMember(Name="educationPlans")]
        public IList<StudentSchoolAssociationEducationPlan> StudentSchoolAssociationEducationPlans 
        { 
            get { return _studentSchoolAssociationEducationPlans; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentSchoolAssociationEducationPlan>(value,
                    (s, e) => ((IStudentSchoolAssociationEducationPlan)e.Item).StudentSchoolAssociation = this);
                _studentSchoolAssociationEducationPlans = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentSchoolAssociationEducationPlan, StudentSchoolAssociationEducationPlan>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentSchoolAssociationEducationPlan)e.Item).StudentSchoolAssociation = this;
                _studentSchoolAssociationEducationPlansCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentSchoolAssociationEducationPlan> IStudentSchoolAssociation.StudentSchoolAssociationEducationPlans
        {
            get { return _studentSchoolAssociationEducationPlansCovariant; }
            set { StudentSchoolAssociationEducationPlans = new List<StudentSchoolAssociationEducationPlan>(value.Cast<StudentSchoolAssociationEducationPlan>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_studentSchoolAssociationEducationPlans != null) foreach (var item in _studentSchoolAssociationEducationPlans)
            {
                item.StudentSchoolAssociation = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentSchoolAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentSchoolAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentSchoolAssociationSynchronizationSourceSupport.IsClassOfSchoolYearSupported                       { get { return true; } set { } }
 
        bool IStudentSchoolAssociationSynchronizationSourceSupport.IsEducationOrganizationIdSupported                 { get { return true; } set { } }
 
        bool IStudentSchoolAssociationSynchronizationSourceSupport.IsEmployedWhileEnrolledSupported                   { get { return true; } set { } }
 
        bool IStudentSchoolAssociationSynchronizationSourceSupport.IsEntryGradeLevelDescriptorSupported               { get { return true; } set { } }
 
        bool IStudentSchoolAssociationSynchronizationSourceSupport.IsEntryGradeLevelReasonTypeSupported               { get { return true; } set { } }
 
        bool IStudentSchoolAssociationSynchronizationSourceSupport.IsEntryTypeDescriptorSupported                     { get { return true; } set { } }
 
        bool IStudentSchoolAssociationSynchronizationSourceSupport.IsExitWithdrawDateSupported                        { get { return true; } set { } }
 
        bool IStudentSchoolAssociationSynchronizationSourceSupport.IsExitWithdrawTypeDescriptorSupported              { get { return true; } set { } }
 
        bool IStudentSchoolAssociationSynchronizationSourceSupport.IsGraduationPlanTypeDescriptorSupported            { get { return true; } set { } }
 
        bool IStudentSchoolAssociationSynchronizationSourceSupport.IsGraduationSchoolYearSupported                    { get { return true; } set { } }
 
        bool IStudentSchoolAssociationSynchronizationSourceSupport.IsPrimarySchoolSupported                           { get { return true; } set { } }
 
        bool IStudentSchoolAssociationSynchronizationSourceSupport.IsRepeatGradeIndicatorSupported                    { get { return true; } set { } }
 
        bool IStudentSchoolAssociationSynchronizationSourceSupport.IsResidencyStatusDescriptorSupported               { get { return true; } set { } }
 
        bool IStudentSchoolAssociationSynchronizationSourceSupport.IsSchoolChoiceTransferSupported                    { get { return true; } set { } }
 
        bool IStudentSchoolAssociationSynchronizationSourceSupport.IsSchoolYearSupported                              { get { return true; } set { } }
 
        bool IStudentSchoolAssociationSynchronizationSourceSupport.IsStudentSchoolAssociationEducationPlansSupported  { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IStudentSchoolAssociationEducationPlan, bool> IStudentSchoolAssociationSynchronizationSourceSupport.IsStudentSchoolAssociationEducationPlanIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentSchoolAssociationEducationPlan table of the StudentSchoolAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentSchoolAssociationEducationPlan : IStudentSchoolAssociationEducationPlan, IStudentSchoolAssociationEducationPlanSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentSchoolAssociation _studentSchoolAssociation;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentSchoolAssociation IStudentSchoolAssociationEducationPlan.StudentSchoolAssociation
        {
            get { return _studentSchoolAssociation; }
            set { _studentSchoolAssociation = value; }
        }

        internal IStudentSchoolAssociation StudentSchoolAssociation
        {
            set { _studentSchoolAssociation = value; }
        }

        /// <summary>
        /// The type of EducationPlan(s) the student is following, if appropriate. For example:          Special education IEP          Vocational.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="educationPlanType"), NaturalKeyMember]
        public string EducationPlanType { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentSchoolAssociation != null) 
                    hash = hash * 23 + _studentSchoolAssociation.GetHashCode();
 
                // Standard Property
                if ((this as IStudentSchoolAssociationEducationPlan).EducationPlanType != null) 
                    hash = hash * 23 + (this as IStudentSchoolAssociationEducationPlan).EducationPlanType.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentSchoolAssociationEducationPlan)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentSchoolAssociationEducationPlan) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentSchoolAttendanceEvent

namespace EdFi.Ods.Api.Models.Resources.V2.StudentSchoolAttendanceEvent
{
    /// <summary>
    /// Represents a reference to the StudentSchoolAttendanceEvent resource.
    /// </summary>
    [DataContract]
    public class StudentSchoolAttendanceEventReference
    {
        [DataMember(Name="attendanceEventCategoryDescriptor"), NaturalKeyMember]
        public string AttendanceEventCategoryDescriptor { get; set; }

        [DataMember(Name="eventDate"), NaturalKeyMember]
        public DateTime EventDate { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentSchoolAttendanceEvent",
                            Href = "/studentSchoolAttendanceEvents"
                                    + "?attendanceEventCategoryDescriptor=" + WebUtility.UrlEncode(AttendanceEventCategoryDescriptor)            
                                    + "&eventDate=" + JsonConvert.SerializeObject(EventDate).Replace("\"", string.Empty)            
                                    + "&schoolId=" + SchoolId            
                                    + "&schoolYear=" + SchoolYear            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                                    + "&termDescriptor=" + WebUtility.UrlEncode(TermDescriptor)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return AttendanceEventCategoryDescriptor != default(string)
                && EventDate != default(DateTime)
                && SchoolId != default(int)
                && SchoolYear != default(short)
                && StudentUniqueId != default(string)
                && TermDescriptor != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentSchoolAttendanceEvent table of the StudentSchoolAttendanceEvent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentSchoolAttendanceEvent : IStudentSchoolAttendanceEvent, IHasETag, IStudentSchoolAttendanceEventSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StudentSchoolAttendanceEvent resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _schoolReferenceExplicitlyAssigned;
        private School.SchoolReference _schoolReference;
        private School.SchoolReference ImplicitSchoolReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolReference == null && !_schoolReferenceExplicitlyAssigned)
                    _schoolReference = new School.SchoolReference();

                return _schoolReference;
            }
        }

        [DataMember(Name="schoolReference")][NaturalKeyMember]
        public School.SchoolReference SchoolReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSchoolReference != null
                    && (_schoolReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference;

                return null;
            }
            set 
            { 
                _schoolReferenceExplicitlyAssigned = true;
                _schoolReference = value;
            }
        }
        private bool _sessionReferenceExplicitlyAssigned;
        private Session.SessionReference _sessionReference;
        private Session.SessionReference ImplicitSessionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_sessionReference == null && !_sessionReferenceExplicitlyAssigned)
                    _sessionReference = new Session.SessionReference();

                return _sessionReference;
            }
        }

        [DataMember(Name="sessionReference")][NaturalKeyMember]
        public Session.SessionReference SessionReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSessionReference != null
                    && (_sessionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSessionReference.IsReferenceFullyDefined()))
                    return ImplicitSessionReference;

                return null;
            }
            set 
            { 
                _sessionReferenceExplicitlyAssigned = true;
                _sessionReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A code describing the attendance event, for example:          Present          Unexcused absence          Excused absence          Tardy.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="attendanceEventCategoryDescriptor"), NaturalKeyMember]
        public string AttendanceEventCategoryDescriptor { get; set; }

        /// <summary>
        /// Date for this attendance event.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eventDate"), NaturalKeyMember]
        public DateTime EventDate { get; set; }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentSchoolAttendanceEvent.SchoolId
        {
            get
            {
                if (ImplicitSchoolReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // School
                _schoolReferenceExplicitlyAssigned = false;
                ImplicitSchoolReference.SchoolId = value;

                // Session
                _sessionReferenceExplicitlyAssigned = false;
                ImplicitSessionReference.SchoolId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short IStudentSchoolAttendanceEvent.SchoolYear
        {
            get
            {
                if (ImplicitSessionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSessionReference.IsReferenceFullyDefined()))
                    return ImplicitSessionReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Session
                _sessionReferenceExplicitlyAssigned = false;
                ImplicitSessionReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentSchoolAttendanceEvent.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// The term for the Session during the school year.
        /// </summary>

        // IS in a reference (StudentSchoolAttendanceEvent.TermDescriptorId), IS a lookup column 
        string IStudentSchoolAttendanceEvent.TermDescriptor
        {
            get
            {
                if (ImplicitSessionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSessionReference.IsReferenceFullyDefined()))
                    return ImplicitSessionReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitSessionReference.TermDescriptor = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStudentSchoolAttendanceEvent).AttendanceEventCategoryDescriptor != null) 
                    hash = hash * 23 + (this as IStudentSchoolAttendanceEvent).AttendanceEventCategoryDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as IStudentSchoolAttendanceEvent).EventDate != null) 
                    hash = hash * 23 + (this as IStudentSchoolAttendanceEvent).EventDate.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSchoolAttendanceEvent).SchoolId != null) 
                    hash = hash * 23 + (this as IStudentSchoolAttendanceEvent).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSchoolAttendanceEvent).SchoolYear != null) 
                    hash = hash * 23 + (this as IStudentSchoolAttendanceEvent).SchoolYear.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSchoolAttendanceEvent).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentSchoolAttendanceEvent).StudentUniqueId.GetHashCode();
 
                //Unified Type Property
                if ((this as IStudentSchoolAttendanceEvent).TermDescriptor != null) 
                    hash = hash * 23 + (this as IStudentSchoolAttendanceEvent).TermDescriptor.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The reported reason for a student's absence.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="attendanceEventReason")]
        public string AttendanceEventReason { get; set; }

        /// <summary>
        /// The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="educationalEnvironmentType")]
        public string EducationalEnvironmentType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentSchoolAttendanceEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentSchoolAttendanceEvent) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentSchoolAttendanceEventSynchronizationSourceSupport.IsAttendanceEventReasonSupported       { get { return true; } set { } }
 
        bool IStudentSchoolAttendanceEventSynchronizationSourceSupport.IsEducationalEnvironmentTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentSectionAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.StudentSectionAssociation
{
    /// <summary>
    /// Represents a reference to the StudentSectionAssociation resource.
    /// </summary>
    [DataContract]
    public class StudentSectionAssociationReference
    {
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="classPeriodName"), NaturalKeyMember]
        public string ClassPeriodName { get; set; }

        [DataMember(Name="classroomIdentificationCode"), NaturalKeyMember]
        public string ClassroomIdentificationCode { get; set; }

        [DataMember(Name="localCourseCode"), NaturalKeyMember]
        public string LocalCourseCode { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sequenceOfCourse"), NaturalKeyMember]
        public int SequenceOfCourse { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        [DataMember(Name="uniqueSectionCode"), NaturalKeyMember]
        public string UniqueSectionCode { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentSectionAssociation",
                            Href = "/studentSectionAssociations"
                                    + "?beginDate=" + JsonConvert.SerializeObject(BeginDate).Replace("\"", string.Empty)            
                                    + "&classPeriodName=" + WebUtility.UrlEncode(ClassPeriodName)            
                                    + "&classroomIdentificationCode=" + WebUtility.UrlEncode(ClassroomIdentificationCode)            
                                    + "&localCourseCode=" + WebUtility.UrlEncode(LocalCourseCode)            
                                    + "&schoolId=" + SchoolId            
                                    + "&schoolYear=" + SchoolYear            
                                    + "&sequenceOfCourse=" + SequenceOfCourse            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                                    + "&termDescriptor=" + WebUtility.UrlEncode(TermDescriptor)            
                                    + "&uniqueSectionCode=" + WebUtility.UrlEncode(UniqueSectionCode)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime)
                && ClassPeriodName != default(string)
                && ClassroomIdentificationCode != default(string)
                && LocalCourseCode != default(string)
                && SchoolId != default(int)
                && SchoolYear != default(short)
                && SequenceOfCourse != default(int)
                && StudentUniqueId != default(string)
                && TermDescriptor != default(string)
                && UniqueSectionCode != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentSectionAssociation table of the StudentSectionAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentSectionAssociation : IStudentSectionAssociation, IHasETag, IStudentSectionAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StudentSectionAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _sectionReferenceExplicitlyAssigned;
        private Section.SectionReference _sectionReference;
        private Section.SectionReference ImplicitSectionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_sectionReference == null && !_sectionReferenceExplicitlyAssigned)
                    _sectionReference = new Section.SectionReference();

                return _sectionReference;
            }
        }

        [DataMember(Name="sectionReference")][NaturalKeyMember]
        public Section.SectionReference SectionReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSectionReference != null
                    && (_sectionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference;

                return null;
            }
            set 
            { 
                _sectionReferenceExplicitlyAssigned = true;
                _sectionReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Month, day, and year of the Student's entry or assignment to the Section.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentSectionAssociation.ClassPeriodName
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.ClassPeriodName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.ClassPeriodName = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentSectionAssociation.ClassroomIdentificationCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.ClassroomIdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.ClassroomIdentificationCode = value;
            }
        }

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentSectionAssociation.LocalCourseCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.LocalCourseCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.LocalCourseCode = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentSectionAssociation.SchoolId
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short IStudentSectionAssociation.SchoolYear
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentSectionAssociation.SequenceOfCourse
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SequenceOfCourse;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SequenceOfCourse = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentSectionAssociation.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// The term for the Session during the school year.
        /// </summary>

        // IS in a reference (StudentSectionAssociation.TermDescriptorId), IS a lookup column 
        string IStudentSectionAssociation.TermDescriptor
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitSectionReference.TermDescriptor = value;
            }
        }

        /// <summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentSectionAssociation.UniqueSectionCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.UniqueSectionCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.UniqueSectionCode = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStudentSectionAssociation).BeginDate != null) 
                    hash = hash * 23 + (this as IStudentSectionAssociation).BeginDate.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSectionAssociation).ClassPeriodName != null) 
                    hash = hash * 23 + (this as IStudentSectionAssociation).ClassPeriodName.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSectionAssociation).ClassroomIdentificationCode != null) 
                    hash = hash * 23 + (this as IStudentSectionAssociation).ClassroomIdentificationCode.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSectionAssociation).LocalCourseCode != null) 
                    hash = hash * 23 + (this as IStudentSectionAssociation).LocalCourseCode.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSectionAssociation).SchoolId != null) 
                    hash = hash * 23 + (this as IStudentSectionAssociation).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSectionAssociation).SchoolYear != null) 
                    hash = hash * 23 + (this as IStudentSectionAssociation).SchoolYear.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSectionAssociation).SequenceOfCourse != null) 
                    hash = hash * 23 + (this as IStudentSectionAssociation).SequenceOfCourse.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSectionAssociation).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentSectionAssociation).StudentUniqueId.GetHashCode();
 
                //Unified Type Property
                if ((this as IStudentSectionAssociation).TermDescriptor != null) 
                    hash = hash * 23 + (this as IStudentSectionAssociation).TermDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSectionAssociation).UniqueSectionCode != null) 
                    hash = hash * 23 + (this as IStudentSectionAssociation).UniqueSectionCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Month, day, and year of the withdrawal or exit of the Student from the Section.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Indicates the Section is the student's homeroom. Homeroom period may the convention for taking daily attendance.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="homeroomIndicator")]
        public bool? HomeroomIndicator { get; set; }

        /// <summary>
        /// An indication as to whether a student has previously taken a given course.          Repeated, counted in grade point average          Repeated, not counted in grade point average          Not repeated          Other.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="repeatIdentifierType")]
        public string RepeatIdentifierType { get; set; }

        /// <summary>
        /// Indicates that the student-section combination is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="teacherStudentDataLinkExclusion")]
        public bool? TeacherStudentDataLinkExclusion { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentSectionAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentSectionAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentSectionAssociationSynchronizationSourceSupport.IsEndDateSupported                          { get { return true; } set { } }
 
        bool IStudentSectionAssociationSynchronizationSourceSupport.IsHomeroomIndicatorSupported                { get { return true; } set { } }
 
        bool IStudentSectionAssociationSynchronizationSourceSupport.IsRepeatIdentifierTypeSupported             { get { return true; } set { } }
 
        bool IStudentSectionAssociationSynchronizationSourceSupport.IsTeacherStudentDataLinkExclusionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentSectionAttendanceEvent

namespace EdFi.Ods.Api.Models.Resources.V2.StudentSectionAttendanceEvent
{
    /// <summary>
    /// Represents a reference to the StudentSectionAttendanceEvent resource.
    /// </summary>
    [DataContract]
    public class StudentSectionAttendanceEventReference
    {
        [DataMember(Name="attendanceEventCategoryDescriptor"), NaturalKeyMember]
        public string AttendanceEventCategoryDescriptor { get; set; }

        [DataMember(Name="classPeriodName"), NaturalKeyMember]
        public string ClassPeriodName { get; set; }

        [DataMember(Name="classroomIdentificationCode"), NaturalKeyMember]
        public string ClassroomIdentificationCode { get; set; }

        [DataMember(Name="eventDate"), NaturalKeyMember]
        public DateTime EventDate { get; set; }

        [DataMember(Name="localCourseCode"), NaturalKeyMember]
        public string LocalCourseCode { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sequenceOfCourse"), NaturalKeyMember]
        public int SequenceOfCourse { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        [DataMember(Name="uniqueSectionCode"), NaturalKeyMember]
        public string UniqueSectionCode { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentSectionAttendanceEvent",
                            Href = "/studentSectionAttendanceEvents"
                                    + "?attendanceEventCategoryDescriptor=" + WebUtility.UrlEncode(AttendanceEventCategoryDescriptor)            
                                    + "&classPeriodName=" + WebUtility.UrlEncode(ClassPeriodName)            
                                    + "&classroomIdentificationCode=" + WebUtility.UrlEncode(ClassroomIdentificationCode)            
                                    + "&eventDate=" + JsonConvert.SerializeObject(EventDate).Replace("\"", string.Empty)            
                                    + "&localCourseCode=" + WebUtility.UrlEncode(LocalCourseCode)            
                                    + "&schoolId=" + SchoolId            
                                    + "&schoolYear=" + SchoolYear            
                                    + "&sequenceOfCourse=" + SequenceOfCourse            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                                    + "&termDescriptor=" + WebUtility.UrlEncode(TermDescriptor)            
                                    + "&uniqueSectionCode=" + WebUtility.UrlEncode(UniqueSectionCode)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return AttendanceEventCategoryDescriptor != default(string)
                && ClassPeriodName != default(string)
                && ClassroomIdentificationCode != default(string)
                && EventDate != default(DateTime)
                && LocalCourseCode != default(string)
                && SchoolId != default(int)
                && SchoolYear != default(short)
                && SequenceOfCourse != default(int)
                && StudentUniqueId != default(string)
                && TermDescriptor != default(string)
                && UniqueSectionCode != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentSectionAttendanceEvent table of the StudentSectionAttendanceEvent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentSectionAttendanceEvent : IStudentSectionAttendanceEvent, IHasETag, IStudentSectionAttendanceEventSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the StudentSectionAttendanceEvent resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _sectionReferenceExplicitlyAssigned;
        private Section.SectionReference _sectionReference;
        private Section.SectionReference ImplicitSectionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_sectionReference == null && !_sectionReferenceExplicitlyAssigned)
                    _sectionReference = new Section.SectionReference();

                return _sectionReference;
            }
        }

        [DataMember(Name="sectionReference")][NaturalKeyMember]
        public Section.SectionReference SectionReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitSectionReference != null
                    && (_sectionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference;

                return null;
            }
            set 
            { 
                _sectionReferenceExplicitlyAssigned = true;
                _sectionReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A code describing the attendance event, for example:          Present          Unexcused absence          Excused absence          Tardy.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="attendanceEventCategoryDescriptor"), NaturalKeyMember]
        public string AttendanceEventCategoryDescriptor { get; set; }

        /// <summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentSectionAttendanceEvent.ClassPeriodName
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.ClassPeriodName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.ClassPeriodName = value;
            }
        }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentSectionAttendanceEvent.ClassroomIdentificationCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.ClassroomIdentificationCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.ClassroomIdentificationCode = value;
            }
        }

        /// <summary>
        /// Date for this attendance event.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eventDate"), NaturalKeyMember]
        public DateTime EventDate { get; set; }

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentSectionAttendanceEvent.LocalCourseCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.LocalCourseCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.LocalCourseCode = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentSectionAttendanceEvent.SchoolId
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short IStudentSectionAttendanceEvent.SchoolYear
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentSectionAttendanceEvent.SequenceOfCourse
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SequenceOfCourse;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SequenceOfCourse = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentSectionAttendanceEvent.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// The term for the Session during the school year.
        /// </summary>

        // IS in a reference (StudentSectionAttendanceEvent.TermDescriptorId), IS a lookup column 
        string IStudentSectionAttendanceEvent.TermDescriptor
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitSectionReference.TermDescriptor = value;
            }
        }

        /// <summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentSectionAttendanceEvent.UniqueSectionCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.UniqueSectionCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.UniqueSectionCode = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStudentSectionAttendanceEvent).AttendanceEventCategoryDescriptor != null) 
                    hash = hash * 23 + (this as IStudentSectionAttendanceEvent).AttendanceEventCategoryDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSectionAttendanceEvent).ClassPeriodName != null) 
                    hash = hash * 23 + (this as IStudentSectionAttendanceEvent).ClassPeriodName.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSectionAttendanceEvent).ClassroomIdentificationCode != null) 
                    hash = hash * 23 + (this as IStudentSectionAttendanceEvent).ClassroomIdentificationCode.GetHashCode();
 
                // Standard Property
                if ((this as IStudentSectionAttendanceEvent).EventDate != null) 
                    hash = hash * 23 + (this as IStudentSectionAttendanceEvent).EventDate.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSectionAttendanceEvent).LocalCourseCode != null) 
                    hash = hash * 23 + (this as IStudentSectionAttendanceEvent).LocalCourseCode.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSectionAttendanceEvent).SchoolId != null) 
                    hash = hash * 23 + (this as IStudentSectionAttendanceEvent).SchoolId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSectionAttendanceEvent).SchoolYear != null) 
                    hash = hash * 23 + (this as IStudentSectionAttendanceEvent).SchoolYear.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSectionAttendanceEvent).SequenceOfCourse != null) 
                    hash = hash * 23 + (this as IStudentSectionAttendanceEvent).SequenceOfCourse.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSectionAttendanceEvent).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentSectionAttendanceEvent).StudentUniqueId.GetHashCode();
 
                //Unified Type Property
                if ((this as IStudentSectionAttendanceEvent).TermDescriptor != null) 
                    hash = hash * 23 + (this as IStudentSectionAttendanceEvent).TermDescriptor.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSectionAttendanceEvent).UniqueSectionCode != null) 
                    hash = hash * 23 + (this as IStudentSectionAttendanceEvent).UniqueSectionCode.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The reported reason for a student's absence.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="attendanceEventReason")]
        public string AttendanceEventReason { get; set; }

        /// <summary>
        /// The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="educationalEnvironmentType")]
        public string EducationalEnvironmentType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentSectionAttendanceEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentSectionAttendanceEvent) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentSectionAttendanceEventSynchronizationSourceSupport.IsAttendanceEventReasonSupported       { get { return true; } set { } }
 
        bool IStudentSectionAttendanceEventSynchronizationSourceSupport.IsEducationalEnvironmentTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentSpecialEducationProgramAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.StudentSpecialEducationProgramAssociation
{
    /// <summary>
    /// Represents a reference to the StudentSpecialEducationProgramAssociation resource.
    /// </summary>
    [DataContract]
    public class StudentSpecialEducationProgramAssociationReference
    {
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="programEducationOrganizationId"), NaturalKeyMember]
        public int ProgramEducationOrganizationId { get; set; }

        [DataMember(Name="programName"), NaturalKeyMember]
        public string ProgramName { get; set; }

        [DataMember(Name="programType"), NaturalKeyMember]
        public string ProgramType { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentSpecialEducationProgramAssociation",
                            Href = "/studentSpecialEducationProgramAssociations"
                                    + "?beginDate=" + JsonConvert.SerializeObject(BeginDate).Replace("\"", string.Empty)            
                                    + "&educationOrganizationId=" + EducationOrganizationId            
                                    + "&programEducationOrganizationId=" + ProgramEducationOrganizationId            
                                    + "&programName=" + WebUtility.UrlEncode(ProgramName)            
                                    + "&programType=" + WebUtility.UrlEncode(ProgramType)            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime)
                && EducationOrganizationId != default(int)
                && ProgramEducationOrganizationId != default(int)
                && ProgramName != default(string)
                && ProgramType != default(string)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentSpecialEducationProgramAssociation table of the StudentSpecialEducationProgramAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentSpecialEducationProgramAssociation : IStudentSpecialEducationProgramAssociation, EdFi.Ods.Entities.Common.IStudentProgramAssociation, IHasETag, IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StudentSpecialEducationProgramAssociation()
        {
            StudentSpecialEducationProgramAssociationServiceProviders = new List<StudentSpecialEducationProgramAssociationServiceProvider>();

            // Inherited lists
            StudentProgramAssociationServices = new List<StudentProgramAssociation.StudentProgramAssociationService>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the StudentSpecialEducationProgramAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        private bool _programReferenceExplicitlyAssigned;
        private Program.ProgramReference _programReference;
        private Program.ProgramReference ImplicitProgramReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_programReference == null && !_programReferenceExplicitlyAssigned)
                    _programReference = new Program.ProgramReference();

                return _programReference;
            }
        }

        [DataMember(Name="programReference")][NaturalKeyMember]
        public Program.ProgramReference ProgramReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitProgramReference != null
                    && (_programReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference;

                return null;
            }
            set 
            { 
                _programReferenceExplicitlyAssigned = true;
                _programReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the Student first received services.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentProgramAssociation.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentProgramAssociation.ProgramEducationOrganizationId
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentProgramAssociation.ProgramName
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.ProgramName = value;
            }
        }

        /// <summary>
        /// The type of program.
        /// </summary>

        // IS in a reference (StudentSpecialEducationProgramAssociation.ProgramTypeId), IS a lookup column 
        string IStudentProgramAssociation.ProgramType
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramType;

                return null;
            }
            set
            {
                ImplicitProgramReference.ProgramType = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentProgramAssociation.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStudentSpecialEducationProgramAssociation).BeginDate != null) 
                    hash = hash * 23 + (this as IStudentSpecialEducationProgramAssociation).BeginDate.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSpecialEducationProgramAssociation).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStudentSpecialEducationProgramAssociation).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSpecialEducationProgramAssociation).ProgramEducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStudentSpecialEducationProgramAssociation).ProgramEducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSpecialEducationProgramAssociation).ProgramName != null) 
                    hash = hash * 23 + (this as IStudentSpecialEducationProgramAssociation).ProgramName.GetHashCode();
 
                //Unified Type Property
                if ((this as IStudentSpecialEducationProgramAssociation).ProgramType != null) 
                    hash = hash * 23 + (this as IStudentSpecialEducationProgramAssociation).ProgramType.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSpecialEducationProgramAssociation).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentSpecialEducationProgramAssociation).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the Student exited the Program or stopped receiving services.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The reason the child left the Program within a school or district.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="reasonExitedDescriptor")]
        public string ReasonExitedDescriptor { get; set; }

        /// <summary>
        /// Indicates whether the Student received services during the summer session or between sessions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="servedOutsideOfRegularSession")]
        public bool? ServedOutsideOfRegularSession { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="ideaEligibility")]
        public bool? IdeaEligibility { get; set; }

        /// <summary>
        /// The effective date of the most recent IEP.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="iepBeginDate")]
        public DateTime? IEPBeginDate { get; set; }

        /// <summary>
        /// The end date of the most recent IEP.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="iepEndDate")]
        public DateTime? IEPEndDate { get; set; }

        /// <summary>
        /// The date of the last IEP review.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="iepReviewDate")]
        public DateTime? IEPReviewDate { get; set; }

        /// <summary>
        /// The date of the last special education evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastEvaluationDate")]
        public DateTime? LastEvaluationDate { get; set; }

        /// <summary>
        /// Indicates whether the Student receiving special education and related services is:          1) in the age range of birth to 22 years, and          2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and          3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and          4) lives with ongoing threat to his or her continued well-being.          Aligns with federal requirements.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="medicallyFragile")]
        public bool? MedicallyFragile { get; set; }

        /// <summary>
        /// Indicates whether the Student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="multiplyDisabled")]
        public bool? MultiplyDisabled { get; set; }

        /// <summary>
        /// Indicate the total number of hours of instructional time per week for the school that the student attends.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="schoolHoursPerWeek")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? SchoolHoursPerWeek { get; set; }

        /// <summary>
        /// The number of hours per week for special education instruction and therapy.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="specialEducationHoursPerWeek")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? SpecialEducationHoursPerWeek { get; set; }

        /// <summary>
        /// The major instructional setting (more than 50 percent of a student's special education program).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="specialEducationSettingDescriptor")]
        public string SpecialEducationSettingDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        private IList<StudentProgramAssociation.StudentProgramAssociationService> _studentProgramAssociationServices;
        private IList<IStudentProgramAssociationService> _studentProgramAssociationServicesCovariant;

        [DataMember(Name="services")]
        public IList<StudentProgramAssociation.StudentProgramAssociationService> StudentProgramAssociationServices 
        {
            get { return _studentProgramAssociationServices; }
            set 
            {
                _studentProgramAssociationServices = value;
                _studentProgramAssociationServicesCovariant = new CovariantIListAdapter<IStudentProgramAssociationService, StudentProgramAssociation.StudentProgramAssociationService>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentProgramAssociationService> IStudentProgramAssociation.StudentProgramAssociationServices
        {
            get { return _studentProgramAssociationServicesCovariant; }
            set { StudentProgramAssociationServices = new List<StudentProgramAssociation.StudentProgramAssociationService>(value.Cast<StudentProgramAssociation.StudentProgramAssociationService>()); }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private IList<StudentSpecialEducationProgramAssociationServiceProvider> _studentSpecialEducationProgramAssociationServiceProviders;
        private IList<IStudentSpecialEducationProgramAssociationServiceProvider> _studentSpecialEducationProgramAssociationServiceProvidersCovariant;

        [DataMember(Name="serviceProviders")]
        public IList<StudentSpecialEducationProgramAssociationServiceProvider> StudentSpecialEducationProgramAssociationServiceProviders 
        { 
            get { return _studentSpecialEducationProgramAssociationServiceProviders; }
            set 
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new ListAdapterWithAddNotifications<StudentSpecialEducationProgramAssociationServiceProvider>(value,
                    (s, e) => ((IStudentSpecialEducationProgramAssociationServiceProvider)e.Item).StudentSpecialEducationProgramAssociation = this);
                _studentSpecialEducationProgramAssociationServiceProviders = list;

                // Initialize covariant list with notifying adapter with deferred wireup so only new items are processed (optimization)
                var covariantList = new CovariantIListAdapterWithAddNotifications<IStudentSpecialEducationProgramAssociationServiceProvider, StudentSpecialEducationProgramAssociationServiceProvider>(value);
                covariantList.ItemAdded += (s, e) => ((IStudentSpecialEducationProgramAssociationServiceProvider)e.Item).StudentSpecialEducationProgramAssociation = this;
                _studentSpecialEducationProgramAssociationServiceProvidersCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentSpecialEducationProgramAssociationServiceProvider> IStudentSpecialEducationProgramAssociation.StudentSpecialEducationProgramAssociationServiceProviders
        {
            get { return _studentSpecialEducationProgramAssociationServiceProvidersCovariant; }
            set { StudentSpecialEducationProgramAssociationServiceProviders = new List<StudentSpecialEducationProgramAssociationServiceProvider>(value.Cast<StudentSpecialEducationProgramAssociationServiceProvider>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            // _studentProgramAssociationServices
            if (_studentSpecialEducationProgramAssociationServiceProviders != null) foreach (var item in _studentSpecialEducationProgramAssociationServiceProviders)
            {
                item.StudentSpecialEducationProgramAssociation = this;
            }
            
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentSpecialEducationProgramAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentSpecialEducationProgramAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport.IsEndDateSupported                                                    { get { return true; } set { } }
 
        bool IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport.IsIdeaEligibilitySupported                                            { get { return true; } set { } }
 
        bool IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport.IsIEPBeginDateSupported                                               { get { return true; } set { } }
 
        bool IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport.IsIEPEndDateSupported                                                 { get { return true; } set { } }
 
        bool IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport.IsIEPReviewDateSupported                                              { get { return true; } set { } }
 
        bool IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport.IsLastEvaluationDateSupported                                         { get { return true; } set { } }
 
        bool IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport.IsMedicallyFragileSupported                                           { get { return true; } set { } }
 
        bool IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport.IsMultiplyDisabledSupported                                           { get { return true; } set { } }
 
        bool IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport.IsReasonExitedDescriptorSupported                                     { get { return true; } set { } }
 
        bool IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport.IsSchoolHoursPerWeekSupported                                         { get { return true; } set { } }
 
        bool IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport.IsServedOutsideOfRegularSessionSupported                              { get { return true; } set { } }
 
        bool IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport.IsSpecialEducationHoursPerWeekSupported                               { get { return true; } set { } }
 
        bool IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport.IsSpecialEducationSettingDescriptorSupported                          { get { return true; } set { } }
 
        bool IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport.IsStudentProgramAssociationServicesSupported                          { get { return true; } set { } }
 
        bool IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport.IsStudentSpecialEducationProgramAssociationServiceProvidersSupported  { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IStudentProgramAssociationService, bool> IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport.IsStudentProgramAssociationServiceIncluded
        { 
            get { return null; }
            set { }
        }
 
        Func<IStudentSpecialEducationProgramAssociationServiceProvider, bool> IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport.IsStudentSpecialEducationProgramAssociationServiceProviderIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
    /// <summary>
    /// A class which represents the edfi.StudentSpecialEducationProgramAssociationServiceProvider table of the StudentSpecialEducationProgramAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentSpecialEducationProgramAssociationServiceProvider : IStudentSpecialEducationProgramAssociationServiceProvider, IStudentSpecialEducationProgramAssociationServiceProviderSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _staffReferenceExplicitlyAssigned;
        private Staff.StaffReference _staffReference;
        private Staff.StaffReference ImplicitStaffReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_staffReference == null && !_staffReferenceExplicitlyAssigned)
                    _staffReference = new Staff.StaffReference();

                return _staffReference;
            }
        }

        [DataMember(Name="staffReference")][NaturalKeyMember]
        public Staff.StaffReference StaffReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStaffReference != null
                    && (_staffReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference;

                return null;
            }
            set 
            { 
                _staffReferenceExplicitlyAssigned = true;
                _staffReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private IStudentSpecialEducationProgramAssociation _studentSpecialEducationProgramAssociation;

        [IgnoreDataMember] // Don't modify back references during acceptance testing
        IStudentSpecialEducationProgramAssociation IStudentSpecialEducationProgramAssociationServiceProvider.StudentSpecialEducationProgramAssociation
        {
            get { return _studentSpecialEducationProgramAssociation; }
            set { _studentSpecialEducationProgramAssociation = value; }
        }

        internal IStudentSpecialEducationProgramAssociation StudentSpecialEducationProgramAssociation
        {
            set { _studentSpecialEducationProgramAssociation = value; }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentSpecialEducationProgramAssociationServiceProvider.StaffUniqueId
        {
            get
            {
                if (ImplicitStaffReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference.StaffUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Staff
                _staffReferenceExplicitlyAssigned = false;
                ImplicitStaffReference.StaffUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentSpecialEducationProgramAssociation != null) 
                    hash = hash * 23 + _studentSpecialEducationProgramAssociation.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentSpecialEducationProgramAssociationServiceProvider).StaffUniqueId != null) 
                    hash = hash * 23 + (this as IStudentSpecialEducationProgramAssociationServiceProvider).StaffUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Primary ServiceProvider.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primaryProvider")]
        public bool? PrimaryProvider { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentSpecialEducationProgramAssociationServiceProvider)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentSpecialEducationProgramAssociationServiceProvider) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentSpecialEducationProgramAssociationServiceProviderSynchronizationSourceSupport.IsPrimaryProviderSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: StudentTitleIPartAProgramAssociation

namespace EdFi.Ods.Api.Models.Resources.V2.StudentTitleIPartAProgramAssociation
{
    /// <summary>
    /// Represents a reference to the StudentTitleIPartAProgramAssociation resource.
    /// </summary>
    [DataContract]
    public class StudentTitleIPartAProgramAssociationReference
    {
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="programEducationOrganizationId"), NaturalKeyMember]
        public int ProgramEducationOrganizationId { get; set; }

        [DataMember(Name="programName"), NaturalKeyMember]
        public string ProgramName { get; set; }

        [DataMember(Name="programType"), NaturalKeyMember]
        public string ProgramType { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                    {
                        _link = new Link
                        {
                            Rel = "StudentTitleIPartAProgramAssociation",
                            Href = "/studentTitleIPartAProgramAssociations"
                                    + "?beginDate=" + JsonConvert.SerializeObject(BeginDate).Replace("\"", string.Empty)            
                                    + "&educationOrganizationId=" + EducationOrganizationId            
                                    + "&programEducationOrganizationId=" + ProgramEducationOrganizationId            
                                    + "&programName=" + WebUtility.UrlEncode(ProgramName)            
                                    + "&programType=" + WebUtility.UrlEncode(ProgramType)            
                                    + "&studentUniqueId=" + WebUtility.UrlEncode(StudentUniqueId)            
                        };
                    }
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime)
                && EducationOrganizationId != default(int)
                && ProgramEducationOrganizationId != default(int)
                && ProgramName != default(string)
                && ProgramType != default(string)
                && StudentUniqueId != default(string)
                ;
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.StudentTitleIPartAProgramAssociation table of the StudentTitleIPartAProgramAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class StudentTitleIPartAProgramAssociation : IStudentTitleIPartAProgramAssociation, EdFi.Ods.Entities.Common.IStudentProgramAssociation, IHasETag, IStudentTitleIPartAProgramAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StudentTitleIPartAProgramAssociation()
        {

            // Inherited lists
            StudentProgramAssociationServices = new List<StudentProgramAssociation.StudentProgramAssociationService>();
        }
        // -------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the StudentTitleIPartAProgramAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EducationOrganizationReference EducationOrganizationReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set 
            { 
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        private bool _programReferenceExplicitlyAssigned;
        private Program.ProgramReference _programReference;
        private Program.ProgramReference ImplicitProgramReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_programReference == null && !_programReferenceExplicitlyAssigned)
                    _programReference = new Program.ProgramReference();

                return _programReference;
            }
        }

        [DataMember(Name="programReference")][NaturalKeyMember]
        public Program.ProgramReference ProgramReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitProgramReference != null
                    && (_programReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference;

                return null;
            }
            set 
            { 
                _programReferenceExplicitlyAssigned = true;
                _programReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.StudentReference _studentReference;
        private Student.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.StudentReference StudentReference
        {
            get 
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned 
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set 
            { 
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the Student first received services.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentProgramAssociation.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int IStudentProgramAssociation.ProgramEducationOrganizationId
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentProgramAssociation.ProgramName
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Program
                _programReferenceExplicitlyAssigned = false;
                ImplicitProgramReference.ProgramName = value;
            }
        }

        /// <summary>
        /// The type of program.
        /// </summary>

        // IS in a reference (StudentTitleIPartAProgramAssociation.ProgramTypeId), IS a lookup column 
        string IStudentProgramAssociation.ProgramType
        {
            get
            {
                if (ImplicitProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProgramReference.IsReferenceFullyDefined()))
                    return ImplicitProgramReference.ProgramType;

                return null;
            }
            set
            {
                ImplicitProgramReference.ProgramType = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string IStudentProgramAssociation.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IStudentTitleIPartAProgramAssociation).BeginDate != null) 
                    hash = hash * 23 + (this as IStudentTitleIPartAProgramAssociation).BeginDate.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentTitleIPartAProgramAssociation).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStudentTitleIPartAProgramAssociation).EducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentTitleIPartAProgramAssociation).ProgramEducationOrganizationId != null) 
                    hash = hash * 23 + (this as IStudentTitleIPartAProgramAssociation).ProgramEducationOrganizationId.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentTitleIPartAProgramAssociation).ProgramName != null) 
                    hash = hash * 23 + (this as IStudentTitleIPartAProgramAssociation).ProgramName.GetHashCode();
 
                //Unified Type Property
                if ((this as IStudentTitleIPartAProgramAssociation).ProgramType != null) 
                    hash = hash * 23 + (this as IStudentTitleIPartAProgramAssociation).ProgramType.GetHashCode();
 
                //Referenced Property
                if ((this as IStudentTitleIPartAProgramAssociation).StudentUniqueId != null) 
                    hash = hash * 23 + (this as IStudentTitleIPartAProgramAssociation).StudentUniqueId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the Student exited the Program or stopped receiving services.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The reason the child left the Program within a school or district.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="reasonExitedDescriptor")]
        public string ReasonExitedDescriptor { get; set; }

        /// <summary>
        /// Indicates whether the Student received services during the summer session or between sessions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="servedOutsideOfRegularSession")]
        public bool? ServedOutsideOfRegularSession { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication of the type of Title I program, if any, in which the student is participating and by which the student is served:          Public Targeted Assistance Program           Public Schoolwide Program          Private School Students Participating          Local Neglected Program.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="titleIPartAParticipantType")]
        public string TitleIPartAParticipantType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        private IList<StudentProgramAssociation.StudentProgramAssociationService> _studentProgramAssociationServices;
        private IList<IStudentProgramAssociationService> _studentProgramAssociationServicesCovariant;

        [DataMember(Name="services")]
        public IList<StudentProgramAssociation.StudentProgramAssociationService> StudentProgramAssociationServices 
        {
            get { return _studentProgramAssociationServices; }
            set 
            {
                _studentProgramAssociationServices = value;
                _studentProgramAssociationServicesCovariant = new CovariantIListAdapter<IStudentProgramAssociationService, StudentProgramAssociation.StudentProgramAssociationService>(value);
            }
        }

        // Covariant version, visible only on the interface
        IList<IStudentProgramAssociationService> IStudentProgramAssociation.StudentProgramAssociationServices
        {
            get { return _studentProgramAssociationServicesCovariant; }
            set { StudentProgramAssociationServices = new List<StudentProgramAssociation.StudentProgramAssociationService>(value.Cast<StudentProgramAssociation.StudentProgramAssociationService>()); }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            // _studentProgramAssociationServices
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IStudentTitleIPartAProgramAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IStudentTitleIPartAProgramAssociation) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IStudentTitleIPartAProgramAssociationSynchronizationSourceSupport.IsEndDateSupported                            { get { return true; } set { } }
 
        bool IStudentTitleIPartAProgramAssociationSynchronizationSourceSupport.IsReasonExitedDescriptorSupported             { get { return true; } set { } }
 
        bool IStudentTitleIPartAProgramAssociationSynchronizationSourceSupport.IsServedOutsideOfRegularSessionSupported      { get { return true; } set { } }
 
        bool IStudentTitleIPartAProgramAssociationSynchronizationSourceSupport.IsStudentProgramAssociationServicesSupported  { get { return true; } set { } }
 
        bool IStudentTitleIPartAProgramAssociationSynchronizationSourceSupport.IsTitleIPartAParticipantTypeSupported         { get { return true; } set { } }

        // Child collection item filter delegates
 
        Func<IStudentProgramAssociationService, bool> IStudentTitleIPartAProgramAssociationSynchronizationSourceSupport.IsStudentProgramAssociationServiceIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------
    }
}
// Aggregate: TeachingCredentialBasisType

namespace EdFi.Ods.Api.Models.Resources.V2.TeachingCredentialBasisType
{
    /// <summary>
    /// A class which represents the edfi.TeachingCredentialBasisType table of the TeachingCredentialBasisType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class TeachingCredentialBasisType : ITeachingCredentialBasisType, IHasETag, ITeachingCredentialBasisTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the TeachingCredentialBasisType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for TeachingCredentialBasis
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="teachingCredentialBasisTypeId"), NaturalKeyMember]
        public int TeachingCredentialBasisTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ITeachingCredentialBasisType).TeachingCredentialBasisTypeId != null) 
                    hash = hash * 23 + (this as ITeachingCredentialBasisType).TeachingCredentialBasisTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the TeachingCredentialBasis type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the TeachingCredentialBasis type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ITeachingCredentialBasisType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ITeachingCredentialBasisType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ITeachingCredentialBasisTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ITeachingCredentialBasisTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ITeachingCredentialBasisTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: TeachingCredentialDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.TeachingCredentialDescriptor
{
    /// <summary>
    /// A class which represents the edfi.TeachingCredentialDescriptor table of the TeachingCredentialDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class TeachingCredentialDescriptor : ITeachingCredentialDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, ITeachingCredentialDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the TeachingCredentialDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="teachingCredentialDescriptorId"), NaturalKeyMember]
        public int TeachingCredentialDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return TeachingCredentialDescriptorId; }
            set { TeachingCredentialDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as ITeachingCredentialDescriptor).TeachingCredentialDescriptorId != null) 
                    hash = hash * 23 + (this as ITeachingCredentialDescriptor).TeachingCredentialDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="teachingCredentialType")]
        public string TeachingCredentialType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ITeachingCredentialDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ITeachingCredentialDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ITeachingCredentialDescriptorSynchronizationSourceSupport.IsCodeValueSupported               { get { return true; } set { } }
 
        bool ITeachingCredentialDescriptorSynchronizationSourceSupport.IsDescriptionSupported             { get { return true; } set { } }
 
        bool ITeachingCredentialDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported      { get { return true; } set { } }
 
        bool ITeachingCredentialDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported        { get { return true; } set { } }
 
        bool ITeachingCredentialDescriptorSynchronizationSourceSupport.IsNamespaceSupported               { get { return true; } set { } }
 
        bool ITeachingCredentialDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported       { get { return true; } set { } }
 
        bool ITeachingCredentialDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported        { get { return true; } set { } }
 
        bool ITeachingCredentialDescriptorSynchronizationSourceSupport.IsTeachingCredentialTypeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: TeachingCredentialType

namespace EdFi.Ods.Api.Models.Resources.V2.TeachingCredentialType
{
    /// <summary>
    /// A class which represents the edfi.TeachingCredentialType table of the TeachingCredentialType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class TeachingCredentialType : ITeachingCredentialType, IHasETag, ITeachingCredentialTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the TeachingCredentialType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for TeachingCredential
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="teachingCredentialTypeId"), NaturalKeyMember]
        public int TeachingCredentialTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ITeachingCredentialType).TeachingCredentialTypeId != null) 
                    hash = hash * 23 + (this as ITeachingCredentialType).TeachingCredentialTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the TeachingCredential type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the TeachingCredential type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ITeachingCredentialType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ITeachingCredentialType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ITeachingCredentialTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ITeachingCredentialTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ITeachingCredentialTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: TelephoneNumberType

namespace EdFi.Ods.Api.Models.Resources.V2.TelephoneNumberType
{
    /// <summary>
    /// A class which represents the edfi.TelephoneNumberType table of the TelephoneNumberType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class TelephoneNumberType : ITelephoneNumberType, IHasETag, ITelephoneNumberTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the TelephoneNumberType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for TelephoneNumber
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="telephoneNumberTypeId"), NaturalKeyMember]
        public int TelephoneNumberTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ITelephoneNumberType).TelephoneNumberTypeId != null) 
                    hash = hash * 23 + (this as ITelephoneNumberType).TelephoneNumberTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the TelephoneNumber type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the TelephoneNumber type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ITelephoneNumberType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ITelephoneNumberType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ITelephoneNumberTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ITelephoneNumberTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ITelephoneNumberTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: TermDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.TermDescriptor
{
    /// <summary>
    /// A class which represents the edfi.TermDescriptor table of the TermDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class TermDescriptor : ITermDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, ITermDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the TermDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="termDescriptorId"), NaturalKeyMember]
        public int TermDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return TermDescriptorId; }
            set { TermDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as ITermDescriptor).TermDescriptorId != null) 
                    hash = hash * 23 + (this as ITermDescriptor).TermDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="termType")]
        public string TermType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ITermDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ITermDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ITermDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
 
        bool ITermDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
 
        bool ITermDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
 
        bool ITermDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
 
        bool ITermDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
 
        bool ITermDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
 
        bool ITermDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
 
        bool ITermDescriptorSynchronizationSourceSupport.IsTermTypeSupported            { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: TermType

namespace EdFi.Ods.Api.Models.Resources.V2.TermType
{
    /// <summary>
    /// A class which represents the edfi.TermType table of the TermType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class TermType : ITermType, IHasETag, ITermTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the TermType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Term
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="termTypeId"), NaturalKeyMember]
        public int TermTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ITermType).TermTypeId != null) 
                    hash = hash * 23 + (this as ITermType).TermTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Term type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Term type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ITermType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ITermType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ITermTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ITermTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ITermTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: TitleIPartAParticipantType

namespace EdFi.Ods.Api.Models.Resources.V2.TitleIPartAParticipantType
{
    /// <summary>
    /// A class which represents the edfi.TitleIPartAParticipantType table of the TitleIPartAParticipantType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class TitleIPartAParticipantType : ITitleIPartAParticipantType, IHasETag, ITitleIPartAParticipantTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the TitleIPartAParticipantType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for TitleIPartAParticipant
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="titleIPartAParticipantTypeId"), NaturalKeyMember]
        public int TitleIPartAParticipantTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ITitleIPartAParticipantType).TitleIPartAParticipantTypeId != null) 
                    hash = hash * 23 + (this as ITitleIPartAParticipantType).TitleIPartAParticipantTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the TitleIPartAParticipant type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the TitleIPartAParticipant type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ITitleIPartAParticipantType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ITitleIPartAParticipantType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ITitleIPartAParticipantTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ITitleIPartAParticipantTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ITitleIPartAParticipantTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: TitleIPartASchoolDesignationType

namespace EdFi.Ods.Api.Models.Resources.V2.TitleIPartASchoolDesignationType
{
    /// <summary>
    /// A class which represents the edfi.TitleIPartASchoolDesignationType table of the TitleIPartASchoolDesignationType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class TitleIPartASchoolDesignationType : ITitleIPartASchoolDesignationType, IHasETag, ITitleIPartASchoolDesignationTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the TitleIPartASchoolDesignationType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for TitleIPartASchoolDesignation
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="titleIPartASchoolDesignationTypeId"), NaturalKeyMember]
        public int TitleIPartASchoolDesignationTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as ITitleIPartASchoolDesignationType).TitleIPartASchoolDesignationTypeId != null) 
                    hash = hash * 23 + (this as ITitleIPartASchoolDesignationType).TitleIPartASchoolDesignationTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the TitleIPartASchoolDesignation type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the TitleIPartASchoolDesignation type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((ITitleIPartASchoolDesignationType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((ITitleIPartASchoolDesignationType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool ITitleIPartASchoolDesignationTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool ITitleIPartASchoolDesignationTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool ITitleIPartASchoolDesignationTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: VisaType

namespace EdFi.Ods.Api.Models.Resources.V2.VisaType
{
    /// <summary>
    /// A class which represents the edfi.VisaType table of the VisaType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class VisaType : IVisaType, IHasETag, IVisaTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the VisaType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Visa
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="visaTypeId"), NaturalKeyMember]
        public int VisaTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IVisaType).VisaTypeId != null) 
                    hash = hash * 23 + (this as IVisaType).VisaTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Visa type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Visa type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IVisaType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IVisaType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IVisaTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IVisaTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IVisaTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: WeaponDescriptor

namespace EdFi.Ods.Api.Models.Resources.V2.WeaponDescriptor
{
    /// <summary>
    /// A class which represents the edfi.WeaponDescriptor table of the WeaponDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class WeaponDescriptor : IWeaponDescriptor, EdFi.Ods.Entities.Common.IDescriptor, IHasETag, IWeaponDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the WeaponDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="weaponDescriptorId"), NaturalKeyMember]
        public int WeaponDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return WeaponDescriptorId; }
            set { WeaponDescriptorId = value; }
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                //Derived Property
                if ((this as IWeaponDescriptor).WeaponDescriptorId != null) 
                    hash = hash * 23 + (this as IWeaponDescriptor).WeaponDescriptorId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="weaponType")]
        public string WeaponType { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IWeaponDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IWeaponDescriptor) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IWeaponDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
 
        bool IWeaponDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
 
        bool IWeaponDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
 
        bool IWeaponDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
 
        bool IWeaponDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
 
        bool IWeaponDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
 
        bool IWeaponDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
 
        bool IWeaponDescriptorSynchronizationSourceSupport.IsWeaponTypeSupported          { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}
// Aggregate: WeaponType

namespace EdFi.Ods.Api.Models.Resources.V2.WeaponType
{
    /// <summary>
    /// A class which represents the edfi.WeaponType table of the WeaponType aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    public class WeaponType : IWeaponType, IHasETag, IWeaponTypeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        /// <summary>
        /// The unique identifier for the WeaponType resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(EdFi.Ods.Common.GuidConverter))]
        public Guid Id { get; set; }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Key for Weapon
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="weaponTypeId"), NaturalKeyMember]
        public int WeaponTypeId { get; set; }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as IWeaponType).WeaponTypeId != null) 
                    hash = hash * 23 + (this as IWeaponType).WeaponTypeId.GetHashCode();

                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This column is deprecated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description for the Weapon type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The value for the Weapon type.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IWeaponType)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((IWeaponType) target, null);
        }

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
 
        bool IWeaponTypeSynchronizationSourceSupport.IsCodeValueSupported         { get { return true; } set { } }
 
        bool IWeaponTypeSynchronizationSourceSupport.IsDescriptionSupported       { get { return true; } set { } }
 
        bool IWeaponTypeSynchronizationSourceSupport.IsShortDescriptionSupported  { get { return true; } set { } }
        // -------------------------------------------------------------
    }
}

